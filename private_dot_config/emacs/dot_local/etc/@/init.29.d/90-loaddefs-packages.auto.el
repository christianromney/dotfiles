(autoload 'company-dict-refresh "company-dict" "Refresh all loaded dictionaries." t)(autoload 'company-dict "company-dict" "`company-mode' backend for user-provided dictionaries. Dictionary files are lazy\nloaded.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-mode "company" "\"complete anything\"; is an in-buffer completion framework.\n\nCompletion starts automatically, depending on the values\n`company-idle-delay' and `company-minimum-prefix-length'.\n\nCompletion can be controlled with the commands:\n`company-complete-common', `company-complete-selection', `company-complete',\n`company-select-next', `company-select-previous'.  If these commands are\ncalled before `company-idle-delay', completion will also start.\n\nCompletions can be searched with `company-search-candidates' or\n`company-filter-candidates'.  These can be used while completion is\ninactive, as well.\n\nThe completion data is retrieved using `company-backends' and displayed\nusing `company-frontends'.  If you want to start a specific backend, call\nit interactively or use `company-begin-backend'.\n\nBy default, the completions list is sorted alphabetically, unless the\nbackend chooses otherwise, or `company-transformers' changes it later.\n\nregular keymap (`company-mode-map'):\n\n\\{company-mode-map}\nkeymap during active completions (`company-active-map'):\n\n\\{company-active-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Company mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `company-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-company-mode 'globalized-minor-mode t)(defvar global-company-mode nil "Non-nil if Global Company mode is enabled.\nSee the `global-company-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-company-mode'.")(autoload 'global-company-mode "company" "Toggle Company mode in all buffers.\nWith prefix ARG, enable Global Company mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nCompany mode is enabled in all buffers where `company-mode-on' would\ndo it.\n\nSee `company-mode' for more information on Company mode.\n\n(fn &optional ARG)" t)(autoload 'company-manual-begin "company" "Start the completion interface.\n\nUnlike `company-complete-selection' or `company-complete', this command\ndoesn't cause any immediate changes to the buffer text." t)(autoload 'company-complete "company" "Insert the common part of all candidates or the current selection.\nThe first time this is called, the common part is inserted, the second\ntime, or when the selection has been changed, the selected candidate is\ninserted." t)(autoload 'company-abbrev "company-abbrev" "`company-mode' completion backend for abbrev.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-bbdb "company-bbdb" "`company-mode' completion backend for BBDB.\n\n(fn COMMAND &optional ARG &rest IGNORE)" t)(autoload 'company-css "company-css" "`company-mode' completion backend for `css-mode'.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-dabbrev "company-dabbrev" "dabbrev-like `company-mode' completion backend.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-dabbrev-code "company-dabbrev-code" "dabbrev-like `company-mode' backend for code.\nThe backend looks for all symbols in the current buffer that aren't in\ncomments or strings.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-elisp "company-elisp" "`company-mode' completion backend for Emacs Lisp.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-etags "company-etags" "`company-mode' completion backend for etags.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-files "company-files" "`company-mode' completion backend existing file names.\nCompletions works for proper absolute and relative files paths.\nFile paths with spaces are only supported inside strings.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-gtags "company-gtags" "`company-mode' completion backend for GNU Global.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-ispell "company-ispell" "`company-mode' completion backend using Ispell.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-keywords "company-keywords" "`company-mode' backend for programming language keywords.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-nxml "company-nxml" "`company-mode' completion backend for `nxml-mode'.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-oddmuse "company-oddmuse" "`company-mode' completion backend for `oddmuse-mode'.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-semantic "company-semantic" "`company-mode' completion backend using CEDET Semantic.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-tempo "company-tempo" "`company-mode' completion backend for tempo.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-tng-frontend "company-tng" "When the user changes the selection at least once, this\nfrontend will display the candidate in the buffer as if it's\nalready there and any key outside of `company-active-map' will\nconfirm the selection and finish the completion.\n\n(fn COMMAND)")(define-obsolete-function-alias 'company-tng-configure-default 'company-tng-mode "0.10.0" "Applies the default configuration to enable company-tng.")(defvar company-tng-mode nil "Non-nil if Company-Tng mode is enabled.\nSee the `company-tng-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `company-tng-mode'.")(autoload 'company-tng-mode "company-tng" "This minor mode enables `company-tng-frontend'.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Company-Tng mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='company-tng-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'company-yasnippet "company-yasnippet" "`company-mode' backend for `yasnippet'.\n\nThis backend should be used with care, because as long as there are\nsnippets defined for the current major mode, this backend will always\nshadow backends that come after it.  Recommended usages:\n\n* In a buffer-local value of `company-backends', grouped with a backend or\n  several that provide actual text completions.\n\n  (add-hook \\='js-mode-hook\n            (lambda ()\n              (set (make-local-variable \\='company-backends)\n                   \\='((company-dabbrev-code company-yasnippet)))))\n\n* After keyword `:with', grouped with other backends.\n\n  (push \\='(company-semantic :with company-yasnippet) company-backends)\n\n* Not in `company-backends', just bound to a key.\n\n  (global-set-key (kbd \"C-c y\") \\='company-yasnippet)\n\n(fn COMMAND &optional ARG &rest IGNORE)" t)(autoload 'nerd-icons-completion-marginalia-setup "nerd-icons-completion" "Hook to `marginalia-mode-hook' to bind `nerd-icons-completion-mode' to it.")(defvar nerd-icons-completion-mode nil "Non-nil if Nerd-Icons-Completion mode is enabled.\nSee the `nerd-icons-completion-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `nerd-icons-completion-mode'.")(autoload 'nerd-icons-completion-mode "nerd-icons-completion" "Add icons to completion candidates.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Nerd-Icons-Completion mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='nerd-icons-completion-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'nerd-icons-install-fonts "nerd-icons" "Helper function to download and install the latests fonts based on OS.\nThe provided Nerd Font is Symbols Nerd Font Mono.\nWhen PFX is non-nil, ignore the prompt and just install\n\n(fn &optional PFX)" t)(autoload 'nerd-icons-insert "nerd-icons" "Interactive icon insertion function.\nWhen Prefix ARG is non-nil, insert the propertized icon.\nWhen GLYPH-SET is non-nil, limit the candidates to the icon set matching it.\n\n(fn &optional ARG GLYPH-SET)" t)(autoload 'nerd-icons-icon-for-dir "nerd-icons" "Get the formatted icon for DIR.\nARG-OVERRIDES should be a plist containining `:height',\n`:v-adjust' or `:face' properties like in the normal icon\ninserting functions.\n\n(fn DIR &rest ARG-OVERRIDES)")(autoload 'nerd-icons-icon-for-file "nerd-icons" "Get the formatted icon for FILE.\nARG-OVERRIDES should be a plist containining `:height',\n`:v-adjust' or `:face' properties like in the normal icon\ninserting functions.\n\n(fn FILE &rest ARG-OVERRIDES)")(autoload 'nerd-icons-icon-for-extension "nerd-icons" "Get the formatted icon for EXT.\nARG-OVERRIDES should be a plist containining `:height',\n`:v-adjust' or `:face' properties like in the normal icon\ninserting functions.\n\n(fn EXT &rest ARG-OVERRIDES)")(autoload 'nerd-icons-icon-for-mode "nerd-icons" "Get the formatted icon for MODE.\nARG-OVERRIDES should be a plist containining `:height',\n`:v-adjust' or `:face' properties like in the normal icon\ninserting functions.\n\n(fn MODE &rest ARG-OVERRIDES)")(autoload 'nerd-icons-icon-for-url "nerd-icons" "Get the formatted icon for URL.\nIf an icon for URL isn't found in `nerd-icons-url-alist', a globe is used.\nARG-OVERRIDES should be a plist containining `:height',\n`:v-adjust' or `:face' properties like in the normal icon\ninserting functions.\n\n(fn URL &rest ARG-OVERRIDES)")(autoload 'nerd-icons-icon-for-buffer "nerd-icons" "Get the formatted icon for the current buffer.\n\nThis function prioritises the use of the buffers file extension to\ndiscern the icon when its `major-mode' matches its auto mode,\notherwise it will use the buffers `major-mode' to decide its\nicon.")(autoload 'wgrep-setup "wgrep" "Setup wgrep preparation.")(add-hook 'grep-setup-hook 'wgrep-setup)(defvar marginalia-mode nil "Non-nil if Marginalia mode is enabled.\nSee the `marginalia-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `marginalia-mode'.")(autoload 'marginalia-mode "marginalia" "Annotate completion candidates with richer information.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Marginalia mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='marginalia-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'marginalia-cycle "marginalia" "Cycle between annotators in `marginalia-annotator-registry'." t)(autoload 'seq-subseq "seq-25" "Return the sequence of elements of SEQUENCE from START to END.\nEND is exclusive.\n\nIf END is omitted, it defaults to the length of the sequence.  If\nSTART or END is negative, it counts from the end.  Signal an\nerror if START or END are outside of the sequence (i.e too large\nif positive or too small if negative).\n\n(fn SEQUENCE START &optional END)")(autoload 'seq-take "seq-25" "Return the sequence made of the first N elements of SEQUENCE.\nThe result is a sequence of the same type as SEQUENCE.\n\nIf N is a negative integer or zero, an empty sequence is\nreturned.\n\n(fn SEQUENCE N)")(autoload 'seq-sort-by "seq-25" "Sort SEQUENCE transformed by FUNCTION using PRED as the comparison function.\nElements of SEQUENCE are transformed by FUNCTION before being\nsorted.  FUNCTION must be a function of one argument.\n\n(fn FUNCTION PRED SEQUENCE)")(autoload 'seq-filter "seq-25" "Return a list of all the elements in SEQUENCE for which PRED returns non-nil.\n\n(fn PRED SEQUENCE)")(autoload 'seq-remove "seq-25" "Return a list of all the elements in SEQUENCE for which PRED returns nil.\n\n(fn PRED SEQUENCE)")(autoload 'seq-remove-at-position "seq-25" "Return a copy of SEQUENCE with the element at index N removed.\n\nN is the (zero-based) index of the element that should not be in\nthe result.\n\nThe result is a sequence of the same type as SEQUENCE.\n\n(fn SEQUENCE N)")(autoload 'seq-reduce "seq-25" "Reduce the function FUNCTION across SEQUENCE, starting with INITIAL-VALUE.\n\nReturn the result of calling FUNCTION with INITIAL-VALUE and the\nfirst element of SEQUENCE, then calling FUNCTION with that result\nand the second element of SEQUENCE, then with that result and the\nthird element of SEQUENCE, etc.  FUNCTION will be called with\nINITIAL-VALUE (and then the accumulated value) as the first\nargument, and the elements from SEQUENCE as the second argument.\n\nIf SEQUENCE is empty, return INITIAL-VALUE and FUNCTION is not called.\n\n(fn FUNCTION SEQUENCE INITIAL-VALUE)")(autoload 'seq-every-p "seq-25" "Return non-nil if PRED returns non-nil for all the elements of SEQUENCE.\n\n(fn PRED SEQUENCE)")(autoload 'seq-some "seq-25" "Return non-nil if PRED returns non-nil for at least one element of SEQUENCE.\nIf the value is non-nil, it is the first non-nil value returned by PRED.\n\n(fn PRED SEQUENCE)")(autoload 'seq-find "seq-25" "Return the first element in SEQUENCE for which PRED returns non-nil.\nIf no such element is found, return DEFAULT.\n\nNote that `seq-find' has an ambiguity if the found element is\nidentical to DEFAULT, as in that case it is impossible to know\nwhether an element was found or not.\n\n(fn PRED SEQUENCE &optional DEFAULT)")(autoload 'seq-position "seq-25" "Return the (zero-based) index of the first element in SEQUENCE \"equal\" to ELT.\n\"Equality\" is defined by the function TESTFN, which defaults to `equal'.\n\n(fn SEQUENCE ELT &optional TESTFN)")(autoload 'seq-positions "seq-25" "Return list of indices of SEQUENCE elements for which TESTFN returns non-nil.\n\nTESTFN is a two-argument function which is called with each element of\nSEQUENCE as the first argument and ELT as the second.\nTESTFN defaults to `equal'.\n\nThe result is a list of (zero-based) indices.\n\n(fn SEQUENCE ELT &optional TESTFN)")(autoload 'seq-uniq "seq-25" "Return a list of the elements of SEQUENCE with duplicates removed.\nTESTFN is used to compare elements, and defaults to `equal'.\n\n(fn SEQUENCE &optional TESTFN)")(autoload 'seq-union "seq-25" "Return a list of all the elements that appear in either SEQUENCE1 or SEQUENCE2.\n\"Equality\" of elements is defined by the function TESTFN, which\ndefaults to `equal'.\n\n(fn SEQUENCE1 SEQUENCE2 &optional TESTFN)")(autoload 'seq-intersection "seq-25" "Return a list of all the elements that appear in both SEQUENCE1 and SEQUENCE2.\n\"Equality\" of elements is defined by the function TESTFN, which\ndefaults to `equal'.\n\n(fn SEQUENCE1 SEQUENCE2 &optional TESTFN)")(autoload 'seq-group-by "seq-25" "Apply FUNCTION to each element of SEQUENCE.\nSeparate the elements of SEQUENCE into an alist using the results as\nkeys.  Keys are compared using `equal'.\n\n(fn FUNCTION SEQUENCE)")(autoload 'seq-max "seq-25" "Return the largest element of SEQUENCE.\nSEQUENCE must be a sequence of numbers or markers.\n\n(fn SEQUENCE)")(autoload 'seq-random-elt "seq-25" "Return a randomly chosen element from SEQUENCE.\nSignal an error if SEQUENCE is empty.\n\n(fn SEQUENCE)")(defun embark--record-this-command nil "Record command which opened the minibuffer.\nWe record this because it will be the default action.\nThis function is meant to be added to `minibuffer-setup-hook'." (setq-local embark--command this-command))(add-hook 'minibuffer-setup-hook #'embark--record-this-command)(autoload 'embark-eldoc-first-target "embark" "Eldoc function reporting the first Embark target at point.\nThis function uses the eldoc REPORT callback and is meant to be\nadded to `eldoc-documentation-functions'.\n\n(fn REPORT &rest _)")(autoload 'embark-eldoc-target-types "embark" "Eldoc function reporting the types of all Embark targets at point.\nThis function uses the eldoc REPORT callback and is meant to be\nadded to `eldoc-documentation-functions'.\n\n(fn REPORT &rest _)")(autoload 'embark-bindings-in-keymap "embark" "Explore command key bindings in KEYMAP with `completing-read'.\nThe selected command will be executed.  Interactively, prompt the\nuser for a KEYMAP variable.\n\n(fn KEYMAP)" t)(autoload 'embark-bindings "embark" "Explore current command key bindings with `completing-read'.\nThe selected command will be executed.\n\nThis shows key bindings from minor mode maps and the local\nmap (usually set by the major mode), but also less common keymaps\nsuch as those from a text property or overlay, or the overriding\nmaps: `overriding-terminal-local-map' and `overriding-local-map'.\n\nAdditionally, if GLOBAL is non-nil (interactively, if called with\na prefix argument), this command includes global key bindings.\n\n(fn GLOBAL)" t)(autoload 'embark-bindings-at-point "embark" "Explore all key bindings at point with `completing-read'.\nThe selected command will be executed.\n\nThis command lists key bindings found in keymaps specified by the\ntext properties `keymap' or `local-map', from either buffer text\nor an overlay.  These are not widely used in Emacs, and when they\nare used can be somewhat hard to discover.  Examples of locations\nthat have such a keymap are links and images in `eww' buffers,\nattachment links in `gnus' article buffers, and the stash line\nin a `vc-dir' buffer." t)(autoload 'embark-prefix-help-command "embark" "Prompt for and run a command bound in the prefix used for this command.\nThe prefix described consists of all but the last event of the\nkey sequence that ran this command.  This function is intended to\nbe used as a value for `prefix-help-command'.\n\nIn addition to using completion to select a command, you can also\ntype @ and the key binding (without the prefix)." t)(autoload 'embark-act "embark" "Prompt the user for an action and perform it.\nThe targets of the action are chosen by `embark-target-finders'.\nBy default, if called from a minibuffer the target is the top\ncompletion candidate.  When called from a non-minibuffer buffer\nthere can multiple targets and you can cycle among them by using\n`embark-cycle' (which is bound by default to the same key\nbinding `embark-act' is, but see `embark-cycle-key').\n\nThis command uses `embark-prompter' to ask the user to specify an\naction, and calls it injecting the target at the first minibuffer\nprompt.\n\nIf you call this from the minibuffer, it can optionally quit the\nminibuffer.  The variable `embark-quit-after-action' controls\nwhether calling `embark-act' with nil ARG quits the minibuffer,\nand if ARG is non-nil it will do the opposite.  Interactively,\nARG is the prefix argument.\n\nIf instead you call this from outside the minibuffer, the first\nARG targets are skipped over (if ARG is negative the skipping is\ndone by cycling backwards) and cycling starts from the following\ntarget.\n\n(fn &optional ARG)" t)(autoload 'embark-act-all "embark" "Prompt the user for an action and perform it on each candidate.\nThe candidates are chosen by `embark-candidate-collectors'.  By\ndefault, if `embark-select' has been used to select some\ncandidates, then `embark-act-all' will act on those candidates;\notherwise, if the selection is empty and `embark-act-all' is\ncalled from a minibuffer, then the candidates are the completion\ncandidates.\n\nThis command uses `embark-prompter' to ask the user to specify an\naction, and calls it injecting the target at the first minibuffer\nprompt.\n\nIf you call this from the minibuffer, it can optionally quit the\nminibuffer.  The variable `embark-quit-after-action' controls\nwhether calling `embark-act' with nil ARG quits the minibuffer,\nand if ARG is non-nil it will do the opposite.  Interactively,\nARG is the prefix argument.\n\n(fn &optional ARG)" t)(autoload 'embark-dwim "embark" "Run the default action on the current target.\nThe target of the action is chosen by `embark-target-finders'.\n\nIf the target comes from minibuffer completion, then the default\naction is the command that opened the minibuffer in the first\nplace, unless overridden by `embark-default-action-overrides'.\n\nFor targets that do not come from minibuffer completion\n(typically some thing at point in a regular buffer) and whose\ntype is not listed in `embark-default-action-overrides', the\ndefault action is given by whatever binding RET has in the action\nkeymap for the target's type.\n\nSee `embark-act' for the meaning of the prefix ARG.\n\n(fn &optional ARG)" t)(autoload 'embark-become "embark" "Make current command become a different command.\nTake the current minibuffer input as initial input for new\ncommand.  The new command can be run normally using key bindings or\n\\[execute-extended-command], but if the current command is found in a keymap in\n`embark-become-keymaps', that keymap is activated to provide\nconvenient access to the other commands in it.\n\nIf FULL is non-nil (interactively, if called with a prefix\nargument), the entire minibuffer contents are used as the initial\ninput of the new command.  By default only the part of the\nminibuffer contents between the current completion boundaries is\ntaken.  What this means is fairly technical, but (1) usually\nthere is no difference: the completion boundaries include the\nentire minibuffer contents, and (2) the most common case where\nthese notions differ is file completion, in which case the\ncompletion boundaries single out the path component containing\npoint.\n\n(fn &optional FULL)" t)(autoload 'embark-collect "embark" "Create an Embark Collect buffer.\n\nTo control the display, add an entry to `display-buffer-alist'\nwith key \"Embark Collect\".\n\nIn Embark Collect buffers `revert-buffer' is remapped to\n`embark-rerun-collect-or-export', which has slightly unusual\nbehavior if the buffer was obtained by running `embark-collect'\nfrom within a minibuffer completion session.  In that case\nrerunning just restarts the completion session, that is, the\ncommand that opened the minibuffer is run again and the\nminibuffer contents restored.  You can then interact normally with\nthe command, perhaps editing the minibuffer contents, and, if you\nwish, you can rerun `embark-collect' to get an updated buffer." t)(autoload 'embark-live "embark" "Create a live-updating Embark Collect buffer.\n\nTo control the display, add an entry to `display-buffer-alist'\nwith key \"Embark Live\"." t)(autoload 'embark-export "embark" "Create a type-specific buffer to manage current candidates.\nThe variable `embark-exporters-alist' controls how to make the\nbuffer for each type of completion.\n\nIn Embark Export buffers `revert-buffer' is remapped to\n`embark-rerun-collect-or-export', which has slightly unusual\nbehavior if the buffer was obtained by running `embark-export'\nfrom within a minibuffer completion session.  In that case\nreverting just restarts the completion session, that is, the\ncommand that opened the minibuffer is run again and the\nminibuffer contents restored.  You can then interact normally\nwith the command, perhaps editing the minibuffer contents, and,\nif you wish, you can rerun `embark-export' to get an updated\nbuffer." t)(autoload 'embark-select "embark" "Add or remove the target from the current buffer's selection.\nYou can act on all selected targets at once with `embark-act-all'.\nWhen called from outside `embark-act' this command will select\nthe first target at point." t)(autoload 'consult-completion-in-region "consult" "Use minibuffer completion as the UI for `completion-at-point'.\n\nThe function is called with 4 arguments: START END COLLECTION PREDICATE.\nThe arguments and expected return value are as specified for\n`completion-in-region'.  Use as a value for `completion-in-region-function'.\n\nThe function can be configured via `consult-customize'.\n\n    (consult-customize consult-completion-in-region\n                       :completion-styles (basic)\n                       :cycle-threshold 3)\n\nThese configuration options are supported:\n\n    * :cycle-threshold - Cycling threshold (def: `completion-cycle-threshold')\n    * :completion-styles - Use completion styles (def: `completion-styles')\n    * :require-match - Require matches when completing (def: nil)\n    * :prompt - The prompt string shown in the minibuffer\n\n(fn START END COLLECTION &optional PREDICATE)")(autoload 'consult-outline "consult" "Jump to an outline heading, obtained by matching against `outline-regexp'.\n\nThis command supports narrowing to a heading level and candidate\npreview.  The initial narrowing LEVEL can be given as prefix\nargument.  The symbol at point is added to the future history.\n\n(fn &optional LEVEL)" t)(autoload 'consult-mark "consult" "Jump to a marker in MARKERS list (defaults to buffer-local `mark-ring').\n\nThe command supports preview of the currently selected marker position.\nThe symbol at point is added to the future history.\n\n(fn &optional MARKERS)" t)(autoload 'consult-global-mark "consult" "Jump to a marker in MARKERS list (defaults to `global-mark-ring').\n\nThe command supports preview of the currently selected marker position.\nThe symbol at point is added to the future history.\n\n(fn &optional MARKERS)" t)(autoload 'consult-line "consult" "Search for a matching line.\n\nDepending on the setting `consult-point-placement' the command\njumps to the beginning or the end of the first match on the line\nor the line beginning.  The default candidate is the non-empty\nline next to point.  This command obeys narrowing.  Optional\nINITIAL input can be provided.  The search starting point is\nchanged if the START prefix argument is set.  The symbol at point\nand the last `isearch-string' is added to the future history.\n\n(fn &optional INITIAL START)" t)(autoload 'consult-line-multi "consult" "Search for a matching line in multiple buffers.\n\nBy default search across all project buffers.  If the prefix\nargument QUERY is non-nil, all buffers are searched.  Optional\nINITIAL input can be provided.  The symbol at point and the last\n`isearch-string' is added to the future history.  In order to\nsearch a subset of buffers, QUERY can be set to a plist according\nto `consult--buffer-query'.\n\n(fn QUERY &optional INITIAL)" t)(autoload 'consult-keep-lines "consult" "Select a subset of the lines in the current buffer with live preview.\n\nThe selected lines are kept and the other lines are deleted.  When called\ninteractively, the lines selected are those that match the minibuffer input.  In\norder to match the inverse of the input, prefix the input with `! '.  When\ncalled from Elisp, the filtering is performed by a FILTER function.  This\ncommand obeys narrowing.\n\nFILTER is the filter function.\nINITIAL is the initial input.\n\n(fn FILTER &optional INITIAL)" t)(autoload 'consult-focus-lines "consult" "Hide or show lines using overlays.\n\nThe selected lines are shown and the other lines hidden.  When called\ninteractively, the lines selected are those that match the minibuffer input.  In\norder to match the inverse of the input, prefix the input with `! '.  With\noptional prefix argument SHOW reveal the hidden lines.  Alternatively the\ncommand can be restarted to reveal the lines.  When called from Elisp, the\nfiltering is performed by a FILTER function.  This command obeys narrowing.\n\nFILTER is the filter function.\nINITIAL is the initial input.\n\n(fn FILTER &optional SHOW INITIAL)" t)(autoload 'consult-goto-line "consult" "Read line number and jump to the line with preview.\n\nEnter either a line number to jump to the first column of the\ngiven line or line:column in order to jump to a specific column.\nJump directly if a line number is given as prefix ARG.  The\ncommand respects narrowing and the settings\n`consult-goto-line-numbers' and `consult-line-numbers-widen'.\n\n(fn &optional ARG)" t)(autoload 'consult-recent-file "consult" "Find recent file using `completing-read'." t)(autoload 'consult-mode-command "consult" "Run a command from any of the given MODES.\n\nIf no MODES are specified, use currently active major and minor modes.\n\n(fn &rest MODES)" t)(autoload 'consult-yank-from-kill-ring "consult" "Select STRING from the kill ring and insert it.\nWith prefix ARG, put point at beginning, and mark at end, like `yank' does.\n\nThis command behaves like `yank-from-kill-ring' in Emacs 28, which also offers\na `completing-read' interface to the `kill-ring'.  Additionally the Consult\nversion supports preview of the selected string.\n\n(fn STRING &optional ARG)" t)(autoload 'consult-yank-pop "consult" "If there is a recent yank act like `yank-pop'.\n\nOtherwise select string from the kill ring and insert it.\nSee `yank-pop' for the meaning of ARG.\n\nThis command behaves like `yank-pop' in Emacs 28, which also offers a\n`completing-read' interface to the `kill-ring'.  Additionally the Consult\nversion supports preview of the selected string.\n\n(fn &optional ARG)" t)(autoload 'consult-yank-replace "consult" "Select STRING from the kill ring.\n\nIf there was no recent yank, insert the string.\nOtherwise replace the just-yanked string with the selected string.\n\nThere exists no equivalent of this command in Emacs 28.\n\n(fn STRING)" t)(autoload 'consult-bookmark "consult" "If bookmark NAME exists, open it, otherwise create a new bookmark with NAME.\n\nThe command supports preview of file bookmarks and narrowing.  See the\nvariable `consult-bookmark-narrow' for the narrowing configuration.\n\n(fn NAME)" t)(autoload 'consult-complex-command "consult" "Select and evaluate command from the command history.\n\nThis command can act as a drop-in replacement for `repeat-complex-command'." t)(autoload 'consult-history "consult" "Insert string from HISTORY of current buffer.\nIn order to select from a specific HISTORY, pass the history\nvariable as argument.  INDEX is the name of the index variable to\nupdate, if any.  BOL is the function which jumps to the beginning\nof the prompt.  See also `cape-history' from the Cape package.\n\n(fn &optional HISTORY INDEX BOL)" t)(autoload 'consult-isearch-history "consult" "Read a search string with completion from the Isearch history.\n\nThis replaces the current search string if Isearch is active, and\nstarts a new Isearch session otherwise." t)(autoload 'consult-minor-mode-menu "consult" "Enable or disable minor mode.\n\nThis is an alternative to `minor-mode-menu-from-indicator'." t)(autoload 'consult-theme "consult" "Disable current themes and enable THEME from `consult-themes'.\n\nThe command supports previewing the currently selected theme.\n\n(fn THEME)" t)(autoload 'consult-buffer "consult" "Enhanced `switch-to-buffer' command with support for virtual buffers.\n\nThe command supports recent files, bookmarks, views and project files as\nvirtual buffers.  Buffers are previewed.  Narrowing to buffers (b), files (f),\nbookmarks (m) and project files (p) is supported via the corresponding\nkeys.  In order to determine the project-specific files and buffers, the\n`consult-project-function' is used.  The virtual buffer SOURCES\ndefault to `consult-buffer-sources'.  See `consult--multi' for the\nconfiguration of the virtual buffer sources.\n\n(fn &optional SOURCES)" t)(autoload 'consult-project-buffer "consult" "Enhanced `project-switch-to-buffer' command with support for virtual buffers.\nThe command may prompt you for a project directory if it is invoked from\noutside a project.  See `consult-buffer' for more details." t)(autoload 'consult-buffer-other-window "consult" "Variant of `consult-buffer', switching to a buffer in another window." t)(autoload 'consult-buffer-other-frame "consult" "Variant of `consult-buffer', switching to a buffer in another frame." t)(autoload 'consult-buffer-other-tab "consult" "Variant of `consult-buffer', switching to a buffer in another tab." t)(autoload 'consult-grep "consult" "Search with `grep' for files in DIR where the content matches a regexp.\n\nThe initial input is given by the INITIAL argument.  DIR can be\nnil, a directory string or a list of file/directory paths.  If\n`consult-grep' is called interactively with a prefix argument,\nthe user can specify the directories or files to search in.\nMultiple directories must be separated by comma in the\nminibuffer, since they are read via `completing-read-multiple'.\nBy default the project directory is used if\n`consult-project-function' is defined and returns non-nil.\nOtherwise the `default-directory' is searched.\n\nThe input string is split, the first part of the string (grep\ninput) is passed to the asynchronous grep process and the second\npart of the string is passed to the completion-style filtering.\n\nThe input string is split at a punctuation character, which is\ngiven as the first character of the input string.  The format is\nsimilar to Perl-style regular expressions, e.g., /regexp/.\nFurthermore command line options can be passed to grep, specified\nbehind --.  The overall prompt input has the form\n`#async-input -- grep-opts#filter-string'.\n\nNote that the grep input string is transformed from Emacs regular\nexpressions to Posix regular expressions.  Always enter Emacs\nregular expressions at the prompt.  `consult-grep' behaves like\nbuiltin Emacs search commands, e.g., Isearch, which take Emacs\nregular expressions.  Furthermore the asynchronous input split\ninto words, each word must match separately and in any order.\nSee `consult--regexp-compiler' for the inner workings.  In order\nto disable transformations of the grep input, adjust\n`consult--regexp-compiler' accordingly.\n\nHere we give a few example inputs:\n\n#alpha beta         : Search for alpha and beta in any order.\n#alpha.*beta        : Search for alpha before beta.\n#\\(alpha\\|beta\\) : Search for alpha or beta (Note Emacs syntax!)\n#word -- -C3        : Search for word, include 3 lines as context\n#first#second       : Search for first, quick filter for second.\n\nThe symbol at point is added to the future history.\n\n(fn &optional DIR INITIAL)" t)(autoload 'consult-git-grep "consult" "Search with `git grep' for files in DIR with INITIAL input.\nSee `consult-grep' for details.\n\n(fn &optional DIR INITIAL)" t)(autoload 'consult-ripgrep "consult" "Search with `rg' for files in DIR with INITIAL input.\nSee `consult-grep' for details.\n\n(fn &optional DIR INITIAL)" t)(autoload 'consult-find "consult" "Search for files with `find' in DIR.\nThe file names must match the input regexp.  INITIAL is the\ninitial minibuffer input.  See `consult-grep' for details\nregarding the asynchronous search and the arguments.\n\n(fn &optional DIR INITIAL)" t)(autoload 'consult-fd "consult" "Search for files with `fd' in DIR.\nThe file names must match the input regexp.  INITIAL is the\ninitial minibuffer input.  See `consult-grep' for details\nregarding the asynchronous search and the arguments.\n\n(fn &optional DIR INITIAL)" t)(autoload 'consult-locate "consult" "Search with `locate' for files which match input given INITIAL input.\n\nThe input is treated literally such that locate can take advantage of\nthe locate database index.  Regular expressions would often force a slow\nlinear search through the entire database.  The locate process is started\nasynchronously, similar to `consult-grep'.  See `consult-grep' for more\ndetails regarding the asynchronous search.\n\n(fn &optional INITIAL)" t)(autoload 'consult-man "consult" "Search for man page given INITIAL input.\n\nThe input string is not preprocessed and passed literally to the\nunderlying man commands.  The man process is started asynchronously,\nsimilar to `consult-grep'.  See `consult-grep' for more details regarding\nthe asynchronous search.\n\n(fn &optional INITIAL)" t)(autoload 'consult-compile-error "consult-compile" "Jump to a compilation error in the current buffer.\n\nThis command collects entries from compilation buffers and grep\nbuffers related to the current buffer.  The command supports\npreview of the currently selected error." t)(autoload 'consult-flymake "consult-flymake" "Jump to Flymake diagnostic.\nWhen PROJECT is non-nil then prompt with diagnostics from all\nbuffers in the current project instead of just the current buffer.\n\n(fn &optional PROJECT)" t)(autoload 'consult-imenu "consult-imenu" "Select item from flattened `imenu' using `completing-read' with preview.\n\nThe command supports preview and narrowing.  See the variable\n`consult-imenu-config', which configures the narrowing.\nThe symbol at point is added to the future history.\n\nSee also `consult-imenu-multi'." t)(autoload 'consult-imenu-multi "consult-imenu" "Select item from the imenus of all buffers from the same project.\n\nIn order to determine the buffers belonging to the same project, the\n`consult-project-function' is used.  Only the buffers with the\nsame major mode as the current buffer are used.  See also\n`consult-imenu' for more details.  In order to search a subset of buffers,\nQUERY can be set to a plist according to `consult--buffer-query'.\n\n(fn &optional QUERY)" t)(autoload 'consult-info "consult-info" "Full text search through info MANUALS.\n\n(fn &rest MANUALS)" t)(autoload 'consult-kmacro "consult-kmacro" "Run a chosen keyboard macro.\n\nWith prefix ARG, run the macro that many times.\nMacros containing mouse clicks are omitted.\n\n(fn ARG)" t)(autoload 'consult-org-heading "consult-org" "Jump to an Org heading.\n\nMATCH and SCOPE are as in `org-map-entries' and determine which\nentries are offered.  By default, all entries of the current\nbuffer are offered.\n\n(fn &optional MATCH SCOPE)" t)(autoload 'consult-org-agenda "consult-org" "Jump to an Org agenda heading.\n\nBy default, all agenda entries are offered.  MATCH is as in\n`org-map-entries' and can used to refine this.\n\n(fn &optional MATCH)" t)(autoload 'consult-register-window "consult-register" "Enhanced drop-in replacement for `register-preview'.\n\nBUFFER is the window buffer.\nSHOW-EMPTY must be t if the window should be shown for an empty register list.\n\n(fn BUFFER &optional SHOW-EMPTY)")(autoload 'consult-register-format "consult-register" "Enhanced preview of register REG.\nThis function can be used as `register-preview-function'.\nIf COMPLETION is non-nil format the register for completion.\n\n(fn REG &optional COMPLETION)")(autoload 'consult-register "consult-register" "Load register and either jump to location or insert the stored text.\n\nThis command is useful to search the register contents.  For quick access\nto registers it is still recommended to use the register functions\n`consult-register-load' and `consult-register-store' or the built-in\nbuilt-in register access functions.  The command supports narrowing, see\n`consult-register--narrow'.  Marker positions are previewed.  See\n`jump-to-register' and `insert-register' for the meaning of prefix ARG.\n\n(fn &optional ARG)" t)(autoload 'consult-register-load "consult-register" "Do what I mean with a REG.\n\nFor a window configuration, restore it.  For a number or text, insert it.\nFor a location, jump to it.  See `jump-to-register' and `insert-register'\nfor the meaning of prefix ARG.\n\n(fn REG &optional ARG)" t)(autoload 'consult-register-store "consult-register" "Store register dependent on current context, showing an action menu.\n\nWith an active region, store/append/prepend the contents, optionally\ndeleting the region when a prefix ARG is given.  With a numeric prefix\nARG, store or add the number.  Otherwise store point, frameset, window or\nkmacro.\n\n(fn ARG)" t)(autoload 'consult-xref "consult-xref" "Show xrefs with preview in the minibuffer.\n\nThis function can be used for `xref-show-xrefs-function'.\nSee `xref-show-xrefs-function' for the description of the\nFETCHER and ALIST arguments.\n\n(fn FETCHER &optional ALIST)")(autoload 'consult-flycheck "consult-flycheck" "Jump to flycheck error." t)(autoload 'flycheck-manual "flycheck" "Open the Flycheck manual." t)(autoload 'flycheck-mode "flycheck" "Flycheck is a minor mode for on-the-fly syntax checking.\n\nIn `flycheck-mode' the buffer is automatically syntax-checked\nusing the first suitable syntax checker from `flycheck-checkers'.\nUse `flycheck-select-checker' to select a checker for the current\nbuffer manually.\n\nIf you run into issues, use `\\[flycheck-verify-setup]' to get help.\n\nFlycheck supports many languages out of the box, and many\nadditional ones are available on MELPA.  Adding new ones is very\neasy.  Complete documentation is available online at URL\n`https://www.flycheck.org/en/latest/'.  Please report issues and\nrequest features at URL `https://github.com/flycheck/flycheck'.\n\nFlycheck displays its status in the mode line.  In the default\nconfiguration, it looks like this:\n\n`FlyC'     This buffer has not been checked yet.\n`FlyC-'    Flycheck doesn't have a checker for this buffer.\n`FlyC*'    Flycheck is running.  Expect results soon!\n`FlyC:3|2' This buffer contains three warnings and two errors.\n           Use `\\[flycheck-list-errors]' to see the list.\n\nYou may also see the following icons:\n`FlyC!'    The checker crashed.\n`FlyC.'    The last syntax check was manually interrupted.\n`FlyC?'    The checker did something unexpected, like exiting with 1\n           but returning no errors.\n\nThe following keybindings are available in `flycheck-mode':\n\n\\{flycheck-mode-map}\n(you can change the prefix by customizing\n`flycheck-keymap-prefix')\n\nIf called interactively, enable Flycheck mode if ARG is positive,\nand disable it if ARG is zero or negative.  If called from Lisp,\nalso enable the mode if ARG is omitted or nil, and toggle it if\nARG is \x2018toggle\x2019; disable the mode otherwise.\n\n(fn &optional ARG)" t)(put 'global-flycheck-mode 'globalized-minor-mode t)(defvar global-flycheck-mode nil "Non-nil if Global Flycheck mode is enabled.\nSee the `global-flycheck-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-flycheck-mode'.")(autoload 'global-flycheck-mode "flycheck" "Toggle Flycheck mode in all buffers.\nWith prefix ARG, enable Global Flycheck mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nFlycheck mode is enabled in all buffers where `flycheck-mode-on-safe'\nwould do it.\n\nSee `flycheck-mode' for more information on Flycheck mode.\n\n(fn &optional ARG)" t)(autoload 'flycheck-define-error-level "flycheck" "Define a new error LEVEL with PROPERTIES.\n\nThe following PROPERTIES constitute an error level:\n\n`:severity SEVERITY'\n     A number denoting the severity of this level.  The higher\n     the number, the more severe is this level compared to other\n     levels.  Defaults to 0; info is -10, warning is 10, and\n     error is 100.\n\n     The severity is used by `flycheck-error-level-<' to\n     determine the ordering of errors according to their levels.\n\n`:compilation-level LEVEL'\n\n     A number indicating the broad class of messages that errors\n     at this level belong to: one of 0 (info), 1 (warning), or\n     2 or nil (error).  Defaults to nil.\n\n     This is used by `flycheck-checker-pattern-to-error-regexp'\n     to map error levels into `compilation-mode''s hierarchy and\n     to get proper highlighting of errors in `compilation-mode'.\n\n`:overlay-category CATEGORY'\n     A symbol denoting the overlay category to use for error\n     highlight overlays for this level.  See Info\n     node `(elisp)Overlay Properties' for more information about\n     overlay categories.\n\n     A category for an error level overlay should at least define\n     the `face' property, for error highlighting.  Another useful\n     property for error level categories is `priority', to\n     influence the stacking of multiple error level overlays.\n\n`:fringe-bitmap BITMAPS'\n     A fringe bitmap symbol denoting the bitmap to use for fringe\n     indicators for this level, or a cons of two bitmaps (one for\n     narrow fringes and one for wide fringes).  See Info node\n     `(elisp)Fringe Bitmaps' for more information about fringe\n     bitmaps, including a list of built-in fringe bitmaps.\n\n`:fringe-face FACE'\n     A face symbol denoting the face to use for fringe indicators\n     for this level.\n\n`:margin-spec SPEC'\n     A display specification indicating what to display in the\n     margin when `flycheck-indication-mode' is `left-margin' or\n     `right-margin'.  See Info node `(elisp)Displaying in the\n     Margins'.  If omitted, Flycheck generates an image spec from\n     the fringe bitmap.\n\n`:error-list-face FACE'\n     A face symbol denoting the face to use for messages of this\n     level in the error list.  See `flycheck-list-errors'.\n\n(fn LEVEL &rest PROPERTIES)")(function-put 'flycheck-define-error-level 'lisp-indent-function 1)(autoload 'flycheck-define-command-checker "flycheck" "Define SYMBOL as syntax checker to run a command.\n\nDefine SYMBOL as generic syntax checker via\n`flycheck-define-generic-checker', which uses an external command\nto check the buffer.  SYMBOL and DOCSTRING are the same as for\n`flycheck-define-generic-checker'.\n\nIn addition to the properties understood by\n`flycheck-define-generic-checker', the following PROPERTIES\nconstitute a command syntax checker.  Unless otherwise noted, all\nproperties are mandatory.  Note that the default `:error-filter'\nof command checkers is `flycheck-sanitize-errors'.\n\n`:command COMMAND'\n     The command to run for syntax checking.\n\n     COMMAND is a list of the form `(EXECUTABLE [ARG ...])'.\n\n     EXECUTABLE is a string with the executable of this syntax\n     checker.  It can be overridden with the variable\n     `flycheck-SYMBOL-executable'.  Note that this variable is\n     NOT implicitly defined by this function.  Use\n     `flycheck-def-executable-var' to define this variable.\n\n     Each ARG is an argument to the executable, either as string,\n     or as special symbol or form for\n     `flycheck-substitute-argument', which see.\n\n`:error-patterns PATTERNS'\n     A list of patterns to parse the output of the `:command'.\n\n     Each ITEM in PATTERNS is a list `(LEVEL SEXP ...)', where\n     LEVEL is a Flycheck error level (see\n     `flycheck-define-error-level'), followed by one or more RX\n     `SEXP's which parse an error of that level and extract line,\n     column, file name and the message.\n\n     See `rx' for general information about RX, and\n     `flycheck-rx-to-string' for some special RX forms provided\n     by Flycheck.\n\n     All patterns are applied in the order of declaration to the\n     whole output of the syntax checker.  Output already matched\n     by a pattern will not be matched by subsequent patterns.  In\n     other words, the first pattern wins.\n\n     This property is optional.  If omitted, however, an\n     `:error-parser' is mandatory.\n\n`:error-parser FUNCTION'\n     A function to parse errors with.\n\n     The function shall accept three arguments OUTPUT CHECKER\n     BUFFER.  OUTPUT is the syntax checker output as string,\n     CHECKER the syntax checker that was used, and BUFFER a\n     buffer object representing the checked buffer.  The function\n     must return a list of `flycheck-error' objects parsed from\n     OUTPUT.\n\n     This property is optional.  If omitted, it defaults to\n     `flycheck-parse-with-patterns'.  In this case,\n     `:error-patterns' is mandatory.\n\n`:standard-input t'\n     Whether to send the buffer contents on standard input.\n\n     If this property is given and has a non-nil value, send the\n     contents of the buffer on standard input.\n\n     Defaults to nil.\n\nNote that you may not give `:start', `:interrupt', and\n`:print-doc' for a command checker.  You can give a custom\n`:verify' function, though, whose results will be appended to the\ndefault `:verify' function of command checkers.\n\n(fn SYMBOL DOCSTRING &rest PROPERTIES)")(function-put 'flycheck-define-command-checker 'lisp-indent-function 1)(function-put 'flycheck-define-command-checker 'doc-string-elt 2)(autoload 'flycheck-def-config-file-var "flycheck" "Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.\n\nSYMBOL is declared as customizable variable using `defcustom', to\nprovide configuration files for the given syntax CHECKER.\nCUSTOM-ARGS are forwarded to `defcustom'.\n\nFILE-NAME is the initial value of the new variable.  If omitted,\nthe default value is nil.  It can be either a string or a list of\nstrings.\n\nUse this together with the `config-file' form in the `:command'\nargument to `flycheck-define-checker'.\n\n(fn SYMBOL CHECKER &optional FILE-NAME &rest CUSTOM-ARGS)" nil t)(function-put 'flycheck-def-config-file-var 'lisp-indent-function 3)(autoload 'flycheck-def-option-var "flycheck" "Define SYMBOL as option variable with INIT-VALUE for CHECKER.\n\nSYMBOL is declared as customizable variable using `defcustom', to\nprovide an option for the given syntax CHECKERS (a checker or a\nlist of checkers).  INIT-VALUE is the initial value of the\nvariable, and DOCSTRING is its docstring.  CUSTOM-ARGS are\nforwarded to `defcustom'.\n\nUse this together with the `option', `option-list' and\n`option-flag' forms in the `:command' argument to\n`flycheck-define-checker'.\n\n(fn SYMBOL INIT-VALUE CHECKERS DOCSTRING &rest CUSTOM-ARGS)" nil t)(function-put 'flycheck-def-option-var 'lisp-indent-function 3)(function-put 'flycheck-def-option-var 'doc-string-elt 4)(autoload 'flycheck-define-checker "flycheck" "Define SYMBOL as command syntax checker with DOCSTRING and PROPERTIES.\n\nLike `flycheck-define-command-checker', but PROPERTIES must not\nbe quoted.  Also, implicitly define the executable variable for\nSYMBOL with `flycheck-def-executable-var'.\n\n(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil t)(function-put 'flycheck-define-checker 'lisp-indent-function 1)(function-put 'flycheck-define-checker 'doc-string-elt 2)(autoload 'dash-fontify-mode "dash" "Toggle fontification of Dash special variables.\n\nDash-Fontify mode is a buffer-local minor mode intended for Emacs\nLisp buffers.  Enabling it causes the special variables bound in\nanaphoric Dash macros to be fontified.  These anaphoras include\n`it', `it-index', `acc', and `other'.  In older Emacs versions\nwhich do not dynamically detect macros, Dash-Fontify mode\nadditionally fontifies Dash macro calls.\n\nSee also `dash-fontify-mode-lighter' and\n`global-dash-fontify-mode'.\n\nThis is a minor mode.  If called interactively, toggle the\n`Dash-Fontify mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `dash-fontify-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-dash-fontify-mode 'globalized-minor-mode t)(defvar global-dash-fontify-mode nil "Non-nil if Global Dash-Fontify mode is enabled.\nSee the `global-dash-fontify-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-dash-fontify-mode'.")(autoload 'global-dash-fontify-mode "dash" "Toggle Dash-Fontify mode in all buffers.\nWith prefix ARG, enable Global Dash-Fontify mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nDash-Fontify mode is enabled in all buffers where\n`dash--turn-on-fontify-mode' would do it.\n\nSee `dash-fontify-mode' for more information on Dash-Fontify mode.\n\n(fn &optional ARG)" t)(autoload 'dash-register-info-lookup "dash" "Register the Dash Info manual with `info-lookup-symbol'.\nThis allows Dash symbols to be looked up with \\[info-lookup-symbol]." t)(autoload 'pkg-info-library-original-version "pkg-info" "Get the original version in the header of LIBRARY.\n\nThe original version is stored in the X-Original-Version header.\nThis header is added by the MELPA package archive to preserve\nupstream version numbers.\n\nLIBRARY is either a symbol denoting a named feature, or a library\nname as string.\n\nIf SHOW is non-nil, show the version in the minibuffer.\n\nReturn the version from the header of LIBRARY as list.  Signal an\nerror if the LIBRARY was not found or had no X-Original-Version\nheader.\n\nSee Info node `(elisp)Library Headers' for more information\nabout library headers.\n\n(fn LIBRARY &optional SHOW)" t)(autoload 'pkg-info-library-version "pkg-info" "Get the version in the header of LIBRARY.\n\nLIBRARY is either a symbol denoting a named feature, or a library\nname as string.\n\nIf SHOW is non-nil, show the version in the minibuffer.\n\nReturn the version from the header of LIBRARY as list.  Signal an\nerror if the LIBRARY was not found or had no proper header.\n\nSee Info node `(elisp)Library Headers' for more information\nabout library headers.\n\n(fn LIBRARY &optional SHOW)" t)(autoload 'pkg-info-defining-library-original-version "pkg-info" "Get the original version of the library defining FUNCTION.\n\nThe original version is stored in the X-Original-Version header.\nThis header is added by the MELPA package archive to preserve\nupstream version numbers.\n\nIf SHOW is non-nil, show the version in mini-buffer.\n\nThis function is mainly intended to find the version of a major\nor minor mode, i.e.\n\n   (pkg-info-defining-library-version 'flycheck-mode)\n\nReturn the version of the library defining FUNCTION.  Signal an\nerror if FUNCTION is not a valid function, if its defining\nlibrary was not found, or if the library had no proper version\nheader.\n\n(fn FUNCTION &optional SHOW)" t)(autoload 'pkg-info-defining-library-version "pkg-info" "Get the version of the library defining FUNCTION.\n\nIf SHOW is non-nil, show the version in mini-buffer.\n\nThis function is mainly intended to find the version of a major\nor minor mode, i.e.\n\n   (pkg-info-defining-library-version 'flycheck-mode)\n\nReturn the version of the library defining FUNCTION.  Signal an\nerror if FUNCTION is not a valid function, if its defining\nlibrary was not found, or if the library had no proper version\nheader.\n\n(fn FUNCTION &optional SHOW)" t)(autoload 'pkg-info-package-version "pkg-info" "Get the version of an installed PACKAGE.\n\nIf SHOW is non-nil, show the version in the minibuffer.\n\nReturn the version as list, or nil if PACKAGE is not installed.\n\n(fn PACKAGE &optional SHOW)" t)(autoload 'pkg-info-version-info "pkg-info" "Obtain complete version info for LIBRARY and PACKAGE.\n\nLIBRARY is a symbol denoting a named feature, or a library name\nas string.  PACKAGE is a symbol denoting an ELPA package.  If\nomitted or nil, default to LIBRARY.\n\nIf SHOW is non-nil, show the version in the minibuffer.\n\nWhen called interactively, prompt for LIBRARY.  When called\ninteractively with prefix argument, prompt for PACKAGE as well.\n\nReturn a string with complete version information for LIBRARY.\nThis version information contains the version from the headers of\nLIBRARY, and the version of the installed PACKAGE, the LIBRARY is\npart of.  If PACKAGE is not installed, or if the PACKAGE version\nis the same as the LIBRARY version, do not include a package\nversion.\n\n(fn LIBRARY &optional PACKAGE SHOW)" t)(autoload 'consult-dir-jump-file "consult-dir" "Jump to file from the directory in the minibuffer prompt." t)(autoload 'consult-dir "consult-dir" "Choose a directory and act on it.\n\nThe action taken on the directory is the value of\n`consult-dir-default-command'. The default is to call\n`find-file' starting at this directory.\n\nWhen called from the minibuffer, insert the directory into the\nminibuffer prompt instead. Existing minibuffer contents will be\nshadowed or deleted depending on the value of\n`consult-dir-shadow-filenames'.\n\nThe list of sources for directory paths is\n`consult-dir-sources', which can be customized." t)(autoload 'orderless-filter "orderless" "Split STRING into components and find entries TABLE matching all.\nThe predicate PRED is used to constrain the entries in TABLE.\n\n(fn STRING TABLE &optional PRED)")(autoload 'orderless-all-completions "orderless" "Split STRING into components and find entries TABLE matching all.\nThe predicate PRED is used to constrain the entries in TABLE.  The\nmatching portions of each candidate are highlighted.\nThis function is part of the `orderless' completion style.\n\n(fn STRING TABLE PRED POINT)")(autoload 'orderless-try-completion "orderless" "Complete STRING to unique matching entry in TABLE.\nThis uses `orderless-all-completions' to find matches for STRING\nin TABLE among entries satisfying PRED.  If there is only one\nmatch, it completes to that match.  If there are no matches, it\nreturns nil.  In any other case it \"completes\" STRING to\nitself, without moving POINT.\nThis function is part of the `orderless' completion style.\n\n(fn STRING TABLE PRED POINT)")(add-to-list 'completion-styles-alist '(orderless orderless-try-completion orderless-all-completions "Completion of multiple components, in any order."))(autoload 'orderless-ivy-re-builder "orderless" "Convert STR into regexps for use with ivy.\nThis function is for integration of orderless with ivy, use it as\na value in `ivy-re-builders-alist'.\n\n(fn STR)")(defvar vertico-mode nil "Non-nil if Vertico mode is enabled.\nSee the `vertico-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `vertico-mode'.")(autoload 'vertico-mode "vertico" "VERTical Interactive COmpletion.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Vertico mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='vertico-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar vertico-buffer-mode nil "Non-nil if Vertico-Buffer mode is enabled.\nSee the `vertico-buffer-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `vertico-buffer-mode'.")(autoload 'vertico-buffer-mode "vertico-buffer" "Display Vertico like a regular buffer in a large window.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Vertico-Buffer mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='vertico-buffer-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'vertico-directory-enter "vertico-directory" "Enter directory or exit completion with current candidate.\nExit with current input if prefix ARG is given.\n\n(fn &optional ARG)" t)(autoload 'vertico-directory-up "vertico-directory" "Delete N names before point.\n\n(fn &optional N)" t)(autoload 'vertico-directory-delete-char "vertico-directory" "Delete N directories or chars before point.\n\n(fn &optional N)" t)(autoload 'vertico-directory-delete-word "vertico-directory" "Delete N directories or words before point.\n\n(fn &optional N)" t)(autoload 'vertico-directory-tidy "vertico-directory" "Tidy shadowed file name, see `rfn-eshadow-overlay'.")(defvar vertico-flat-mode nil "Non-nil if Vertico-Flat mode is enabled.\nSee the `vertico-flat-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `vertico-flat-mode'.")(autoload 'vertico-flat-mode "vertico-flat" "Flat, horizontal display for Vertico.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Vertico-Flat mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='vertico-flat-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar vertico-grid-mode nil "Non-nil if Vertico-Grid mode is enabled.\nSee the `vertico-grid-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `vertico-grid-mode'.")(autoload 'vertico-grid-mode "vertico-grid" "Grid display for Vertico.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Vertico-Grid mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='vertico-grid-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar vertico-indexed-mode nil "Non-nil if Vertico-Indexed mode is enabled.\nSee the `vertico-indexed-mode' command\nfor a description of this minor mode.")(autoload 'vertico-indexed-mode "vertico-indexed" "Prefix candidates with indices.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Vertico-Indexed mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='vertico-indexed-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar vertico-mouse-mode nil "Non-nil if Vertico-Mouse mode is enabled.\nSee the `vertico-mouse-mode' command\nfor a description of this minor mode.")(autoload 'vertico-mouse-mode "vertico-mouse" "Mouse support for Vertico.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Vertico-Mouse mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='vertico-mouse-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar vertico-multiform-mode nil "Non-nil if Vertico-Multiform mode is enabled.\nSee the `vertico-multiform-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `vertico-multiform-mode'.")(autoload 'vertico-multiform-mode "vertico-multiform" "Configure Vertico in various forms per command.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Vertico-Multiform mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='vertico-multiform-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'vertico-quick-jump "vertico-quick" "Jump to candidate using quick keys." t)(autoload 'vertico-quick-exit "vertico-quick" "Exit with candidate using quick keys." t)(autoload 'vertico-quick-insert "vertico-quick" "Insert candidate using quick keys." t)(autoload 'vertico-repeat-save "vertico-repeat" "Save Vertico session for `vertico-repeat'.\nThis function must be registered as `minibuffer-setup-hook'.")(autoload 'vertico-repeat-next "vertico-repeat" "Repeat Nth next Vertico completion session.\nThis command must be called from an existing Vertico session\nafter `vertico-repeat-previous'.\n\n(fn N)" t)(autoload 'vertico-repeat-previous "vertico-repeat" "Repeat Nth previous Vertico completion session.\nIf called from an existing Vertico session, restore the input and\nselected candidate for the current command.\n\n(fn N)" t)(autoload 'vertico-repeat-select "vertico-repeat" "Select a Vertico session from the session history and repeat it.\nIf called from an existing Vertico session, you can select among\nprevious sessions for the current command." t)(autoload 'vertico-repeat "vertico-repeat" "Repeat last Vertico session.\nIf prefix ARG is non-nil, offer completion menu to select from session history.\n\n(fn &optional ARG)" t)(defvar vertico-reverse-mode nil "Non-nil if Vertico-Reverse mode is enabled.\nSee the `vertico-reverse-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `vertico-reverse-mode'.")(autoload 'vertico-reverse-mode "vertico-reverse" "Reverse the Vertico display.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Vertico-Reverse mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='vertico-reverse-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'vertico-suspend "vertico-suspend" "Suspend the current completion session.\nIf the command is invoked from within the Vertico minibuffer, the\ncurrent session is suspended.  If the command is invoked from\noutside the minibuffer, the active minibuffer is either selected\nor the latest completion session is restored." t)(defvar vertico-unobtrusive-mode nil "Non-nil if Vertico-Unobtrusive mode is enabled.\nSee the `vertico-unobtrusive-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `vertico-unobtrusive-mode'.")(autoload 'vertico-unobtrusive-mode "vertico-unobtrusive" "Unobtrusive display for Vertico.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Vertico-Unobtrusive mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='vertico-unobtrusive-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defface solaire-default-face '((t :inherit default)) "Alternative version of the `default' face." :group 'solaire-mode)(autoload 'solaire-mode "solaire-mode" "Make current buffer a different color so others can be grossly incandescent.\n\nRemaps faces in `solaire-mode-remap-alist', then runs `solaire-mode-hook', where\nadditional mode-specific fixes may live. Lastly, adjusts the fringes for the\ncurrent frame.\n\nThis is a minor mode.  If called interactively, toggle the\n`Solaire mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `solaire-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'solaire-global-mode 'globalized-minor-mode t)(defvar solaire-global-mode nil "Non-nil if Solaire-Global mode is enabled.\nSee the `solaire-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `solaire-global-mode'.")(autoload 'solaire-global-mode "solaire-mode" "Toggle Solaire mode in all buffers.\nWith prefix ARG, enable Solaire-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nSolaire mode is enabled in all buffers where `turn-on-solaire-mode'\nwould do it.\n\nSee `solaire-mode' for more information on Solaire mode.\n\n(fn &optional ARG)" t)(autoload 'turn-on-solaire-mode "solaire-mode" "Conditionally enable `solaire-mode' in the current buffer.\n\nDoes nothing if the current buffer doesn't satisfy the function in\n`solaire-mode-real-buffer-fn'.\n\n(fn &rest _)" t)(autoload 'turn-off-solaire-mode "solaire-mode" "Disable `solaire-mode' in the current buffer.\n\n(fn &rest _)" t)(autoload 'solaire-mode-reset "solaire-mode" "Reset `solaire-mode' in all buffers where it is enabled.\n\nUse this in case solaire-mode has caused some sort of problem, e.g. after\nchanging themes.  are more prelevant in Emacs 25 and 26, but far less so in 27+;\nparticularly where the fringe is concerned.\n\n(fn &rest _)" t)(autoload 'solaire-mode-reset-buffer "solaire-mode" "Reset `solaire-mode' incurrent buffer.\n\nSee `solaire-mode-reset' for details.")(defun solaire-mode--prepare-for-theme-a (theme &rest _) "Prepare solaire-mode for THEME.\nMeant to be used as a `load-theme' advice." (when (and (get theme 'theme-feature) (memq theme custom-enabled-themes)) (setq solaire-mode--supported-p (ignore-errors (let ((default1 (face-background 'default nil t)) (default2 (face-background 'solaire-default-face nil t))) (and default1 default2 (not (equal default1 default2))))) solaire-mode--swapped-p nil solaire-mode--theme theme) (when (bound-and-true-p solaire-global-mode) (if solaire-mode--supported-p (solaire-mode-swap-faces-maybe) (solaire-global-mode -1)))))(advice-add #'load-theme :after #'solaire-mode--prepare-for-theme-a)(autoload 'doom-name-to-rgb "doom-themes" "Retrieves the hexidecimal string repesented the named COLOR (e.g. \"red\")\nfor FRAME (defaults to the current frame).\n\n(fn COLOR)")(autoload 'doom-blend "doom-themes" "Blend two colors (hexidecimal strings) together by a coefficient ALPHA (a\nfloat between 0 and 1)\n\n(fn COLOR1 COLOR2 ALPHA)")(autoload 'doom-darken "doom-themes" "Darken a COLOR (a hexidecimal string) by a coefficient ALPHA (a float between\n0 and 1).\n\n(fn COLOR ALPHA)")(autoload 'doom-lighten "doom-themes" "Brighten a COLOR (a hexidecimal string) by a coefficient ALPHA (a float\nbetween 0 and 1).\n\n(fn COLOR ALPHA)")(autoload 'doom-color "doom-themes" "Retrieve a specific color named NAME (a symbol) from the current theme.\n\n(fn NAME &optional TYPE)")(autoload 'doom-ref "doom-themes" "TODO\n\n(fn FACE PROP &optional CLASS)")(autoload 'doom-themes-set-faces "doom-themes" "Customize THEME (a symbol) with FACES.\n\nIf THEME is nil, it applies to all themes you load. FACES is a list of Doom\ntheme face specs. These is a simplified spec. For example:\n\n  (doom-themes-set-faces \\='user\n    \\='(default :background red :foreground blue)\n    \\='(doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))\n    \\='(doom-modeline-buffer-file :inherit \\='mode-line-buffer-id :weight \\='bold)\n    \\='(doom-modeline-buffer-path :inherit \\='mode-line-emphasis :weight \\='bold)\n    \\='(doom-modeline-buffer-project-root :foreground green :weight \\='bold))\n\n(fn THEME &rest FACES)")(function-put 'doom-themes-set-faces 'lisp-indent-function 'defun)(when (and (boundp 'custom-theme-load-path) "~/.config/emacs/.local/straight/build-29.2/doom-themes/doom-themes-autoloads.el") (let* ((base (file-name-directory "~/.config/emacs/.local/straight/build-29.2/doom-themes/doom-themes-autoloads.el")) (dir (expand-file-name "themes/" base))) (add-to-list 'custom-theme-load-path (or (and (file-directory-p dir) dir) base))))(autoload 'doom-themes-neotree-config "doom-themes-ext-neotree" "Install doom-themes' neotree configuration.\n\nIncludes an Atom-esque icon theme and highlighting based on filetype.")(autoload 'doom-themes-org-config "doom-themes-ext-org" "Load `doom-themes-ext-org'.")(autoload 'doom-themes-treemacs-config "doom-themes-ext-treemacs" "Install doom-themes' treemacs configuration.\n\nIncludes an Atom-esque icon theme and highlighting based on filetype.")(autoload 'doom-themes-visual-bell-fn "doom-themes-ext-visual-bell" "Blink the mode-line red briefly. Set `ring-bell-function' to this to use it.")(autoload 'doom-themes-visual-bell-config "doom-themes-ext-visual-bell" "Enable flashing the mode-line on error.")(autoload 'emojify-set-emoji-styles "emojify" "Set the type of emojis that should be displayed.\n\nSTYLES is the styles emoji styles that should be used, see `emojify-emoji-styles'\n\n(fn STYLES)")(autoload 'emojify-mode "emojify" "Emojify mode\n\nThis is a minor mode.  If called interactively, toggle the\n`Emojify mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `emojify-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-emojify-mode 'globalized-minor-mode t)(defvar global-emojify-mode nil "Non-nil if Global Emojify mode is enabled.\nSee the `global-emojify-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-emojify-mode'.")(autoload 'global-emojify-mode "emojify" "Toggle Emojify mode in all buffers.\nWith prefix ARG, enable Global Emojify mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nEmojify mode is enabled in all buffers where `emojify-mode' would do\nit.\n\nSee `emojify-mode' for more information on Emojify mode.\n\n(fn &optional ARG)" t)(autoload 'emojify-mode-line-mode "emojify" "Emojify mode line\n\nThis is a minor mode.  If called interactively, toggle the\n`Emojify-Mode-Line mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `emojify-mode-line-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-emojify-mode-line-mode 'globalized-minor-mode t)(defvar global-emojify-mode-line-mode nil "Non-nil if Global Emojify-Mode-Line mode is enabled.\nSee the `global-emojify-mode-line-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-emojify-mode-line-mode'.")(autoload 'global-emojify-mode-line-mode "emojify" "Toggle Emojify-Mode-Line mode in all buffers.\nWith prefix ARG, enable Global Emojify-Mode-Line mode if ARG is\npositive; otherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nEmojify-Mode-Line mode is enabled in all buffers where\n`emojify-mode-line-mode' would do it.\n\nSee `emojify-mode-line-mode' for more information on Emojify-Mode-Line\nmode.\n\n(fn &optional ARG)" t)(autoload 'emojify-apropos-emoji "emojify" "Show Emojis that match PATTERN.\n\n(fn PATTERN)" t)(autoload 'emojify-insert-emoji "emojify" "Interactively prompt for Emojis and insert them in the current buffer.\n\nThis respects the `emojify-emoji-styles' variable." t)(autoload 'hl-todo-mode "hl-todo" "Highlight TODO and similar keywords in comments and strings.\n\nThis is a minor mode.  If called interactively, toggle the\n`Hl-Todo mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `hl-todo-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-hl-todo-mode 'globalized-minor-mode t)(defvar global-hl-todo-mode nil "Non-nil if Global Hl-Todo mode is enabled.\nSee the `global-hl-todo-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-hl-todo-mode'.")(autoload 'global-hl-todo-mode "hl-todo" "Toggle Hl-Todo mode in all buffers.\nWith prefix ARG, enable Global Hl-Todo mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nHl-Todo mode is enabled in all buffers where\n`hl-todo--turn-on-mode-if-desired' would do it.\n\nSee `hl-todo-mode' for more information on Hl-Todo mode.\n\n(fn &optional ARG)" t)(autoload 'hl-todo-next "hl-todo" "Jump to the next TODO or similar keyword.\nThe prefix argument ARG specifies how many keywords to move.\nA negative argument means move backward that many keywords.\n\n(fn ARG)" t)(autoload 'hl-todo-previous "hl-todo" "Jump to the previous TODO or similar keyword.\nThe prefix argument ARG specifies how many keywords to move.\nA negative argument means move forward that many keywords.\n\n(fn ARG)" t)(autoload 'hl-todo-occur "hl-todo" "Use `occur' to find all TODO or similar keywords.\nThis actually finds a superset of the highlighted keywords,\nbecause it uses a regexp instead of a more sophisticated\nmatcher.  It also finds occurrences that are not within a\nstring or comment." t)(autoload 'hl-todo-rgrep "hl-todo" "Use `rgrep' to find all TODO or similar keywords.\nThis actually finds a superset of the highlighted keywords,\nbecause it uses a regexp instead of a more sophisticated\nmatcher.  It also finds occurrences that are not within a\nstring or comment.  See `rgrep' for the meaning of REGEXP,\nFILES, DIR and CONFIRM, except that the type of prefix\nargument does not matter; with any prefix you can edit the\nconstructed shell command line before it is executed.\nAlso see option `hl-todo-keyword-faces'.\n\n(fn REGEXP &optional FILES DIR CONFIRM)" t)(autoload 'hl-todo-flymake "hl-todo" "Flymake backend for `hl-todo-mode'.\nDiagnostics are reported to REPORT-FN.  Use `add-hook' to\nregister this function in `flymake-diagnostic-functions' before\nenabling `flymake-mode'.\n\n(fn REPORT-FN &rest PLIST)")(autoload 'hl-todo-insert "hl-todo" "Insert TODO or similar keyword.\nIf point is not inside a string or comment, then insert a new\ncomment.  If point is at the end of the line, then insert the\ncomment there, otherwise insert it as a new line before the\ncurrent line.  When called interactively the KEYWORD is read via\n`completing-read'.\n\n(fn KEYWORD)" t)(autoload 'anzu-mode "anzu" "minor-mode which display search information in mode-line.\n\nThis is a minor mode.  If called interactively, toggle the `Anzu\nmode' mode.  If the prefix argument is positive, enable the mode,\nand if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `anzu-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-anzu-mode 'globalized-minor-mode t)(defvar global-anzu-mode nil "Non-nil if Global Anzu mode is enabled.\nSee the `global-anzu-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-anzu-mode'.")(autoload 'global-anzu-mode "anzu" "Toggle Anzu mode in all buffers.\nWith prefix ARG, enable Global Anzu mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nAnzu mode is enabled in all buffers where `anzu--turn-on' would do\nit.\n\nSee `anzu-mode' for more information on Anzu mode.\n\n(fn &optional ARG)" t)(autoload 'anzu-query-replace-at-cursor "anzu" "Replace symbol at cursor with to-string." t)(autoload 'anzu-query-replace-at-cursor-thing "anzu" "Replace symbol at cursor within `anzu-replace-at-cursor-thing' area." t)(autoload 'anzu-query-replace "anzu" "anzu version of `query-replace'.\n\n(fn ARG)" t)(autoload 'anzu-query-replace-regexp "anzu" "anzu version of `query-replace-regexp'.\n\n(fn ARG)" t)(autoload 'anzu-replace-at-cursor-thing "anzu" "anzu-query-replace-at-cursor-thing without query." t)(autoload 'anzu-isearch-query-replace "anzu" "anzu version of `isearch-query-replace'.\n\n(fn ARG)" t)(autoload 'anzu-isearch-query-replace-regexp "anzu" "anzu version of `isearch-query-replace-regexp'.\n\n(fn ARG)" t)(autoload 'doom-modeline-set-main-modeline "doom-modeline" "Set main mode-line.\nIf DEFAULT is non-nil, set the default mode-line for all buffers.\n\n(fn &optional DEFAULT)")(defvar doom-modeline-mode nil "Non-nil if Doom-Modeline mode is enabled.\nSee the `doom-modeline-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `doom-modeline-mode'.")(autoload 'doom-modeline-mode "doom-modeline" "Toggle `doom-modeline' on or off.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Doom-Modeline mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='doom-modeline-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'doom-modeline-env-setup-python "doom-modeline-env")(autoload 'doom-modeline-env-setup-ruby "doom-modeline-env")(autoload 'doom-modeline-env-setup-perl "doom-modeline-env")(autoload 'doom-modeline-env-setup-go "doom-modeline-env")(autoload 'doom-modeline-env-setup-elixir "doom-modeline-env")(autoload 'doom-modeline-env-setup-rust "doom-modeline-env")(defvar volatile-highlights-mode nil "Non-nil if Volatile-Highlights mode is enabled.\nSee the `volatile-highlights-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `volatile-highlights-mode'.")(autoload 'volatile-highlights-mode "volatile-highlights" "Minor mode for visual feedback on some operations.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Volatile-Highlights mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='volatile-highlights-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'git-gutter:linum-setup "git-gutter" "Setup for linum-mode.")(autoload 'git-gutter-mode "git-gutter" "Git-Gutter mode\n\nThis is a minor mode.  If called interactively, toggle the\n`Git-Gutter mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `git-gutter-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-git-gutter-mode 'globalized-minor-mode t)(defvar global-git-gutter-mode nil "Non-nil if Global Git-Gutter mode is enabled.\nSee the `global-git-gutter-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-git-gutter-mode'.")(autoload 'global-git-gutter-mode "git-gutter" "Toggle Git-Gutter mode in all buffers.\nWith prefix ARG, enable Global Git-Gutter mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nGit-Gutter mode is enabled in all buffers where `git-gutter--turn-on'\nwould do it.\n\nSee `git-gutter-mode' for more information on Git-Gutter mode.\n\n(fn &optional ARG)" t)(autoload 'git-gutter "git-gutter" "Show diff information in gutter" t)(autoload 'git-gutter:toggle "git-gutter" "Toggle to show diff information." t)(autoload 'vi-tilde-fringe-mode "vi-tilde-fringe" "Buffer-local minor mode to display tildes in the fringe when the line is\n\nempty.\n\nThis is a minor mode.  If called interactively, toggle the\n`Vi-Tilde-Fringe mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `vi-tilde-fringe-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-vi-tilde-fringe-mode 'globalized-minor-mode t)(defvar global-vi-tilde-fringe-mode nil "Non-nil if Global Vi-Tilde-Fringe mode is enabled.\nSee the `global-vi-tilde-fringe-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-vi-tilde-fringe-mode'.")(autoload 'global-vi-tilde-fringe-mode "vi-tilde-fringe" "Toggle Vi-Tilde-Fringe mode in all buffers.\nWith prefix ARG, enable Global Vi-Tilde-Fringe mode if ARG is\npositive; otherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nVi-Tilde-Fringe mode is enabled in all buffers where\n`vi-tilde-fringe-mode--turn-on' would do it.\n\nSee `vi-tilde-fringe-mode' for more information on Vi-Tilde-Fringe\nmode.\n\n(fn &optional ARG)" t)(autoload 'ace-select-window "ace-window" "Ace select window." t)(autoload 'ace-delete-window "ace-window" "Ace delete window." t)(autoload 'ace-swap-window "ace-window" "Ace swap window." t)(autoload 'ace-delete-other-windows "ace-window" "Ace delete other windows." t)(autoload 'ace-display-buffer "ace-window" "Make `display-buffer' and `pop-to-buffer' select using `ace-window'.\nSee sample config for `display-buffer-base-action' and `display-buffer-alist':\nhttps://github.com/abo-abo/ace-window/wiki/display-buffer.\n\n(fn BUFFER ALIST)")(autoload 'ace-window "ace-window" "Select a window.\nPerform an action based on ARG described below.\n\nBy default, behaves like extended `other-window'.\nSee `aw-scope' which extends it to work with frames.\n\nPrefixed with one \\[universal-argument], does a swap between the\nselected window and the current window, so that the selected\nbuffer moves to current window (and current buffer moves to\nselected window).\n\nPrefixed with two \\[universal-argument]'s, deletes the selected\nwindow.\n\n(fn ARG)" t)(defvar ace-window-display-mode nil "Non-nil if Ace-Window-Display mode is enabled.\nSee the `ace-window-display-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `ace-window-display-mode'.")(autoload 'ace-window-display-mode "ace-window" "Minor mode for showing the ace window key in the mode line.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Ace-Window-Display mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='ace-window-display-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar ace-window-posframe-mode nil "Non-nil if Ace-Window-Posframe mode is enabled.\nSee the `ace-window-posframe-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `ace-window-posframe-mode'.")(autoload 'ace-window-posframe-mode "ace-window-posframe" "Minor mode for showing the ace window key with child frames.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Ace-Window-Posframe mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='ace-window-posframe-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'avy-process "avy" "Select one of CANDIDATES using `avy-read'.\nUse OVERLAY-FN to visualize the decision overlay.\nCLEANUP-FN should take no arguments and remove the effects of\nmultiple OVERLAY-FN invocations.\n\n(fn CANDIDATES &optional OVERLAY-FN CLEANUP-FN)")(autoload 'avy-goto-char "avy" "Jump to the currently visible CHAR.\nThe window scope is determined by `avy-all-windows' (ARG negates it).\n\n(fn CHAR &optional ARG)" t)(autoload 'avy-goto-char-in-line "avy" "Jump to the currently visible CHAR in the current line.\n\n(fn CHAR)" t)(autoload 'avy-goto-char-2 "avy" "Jump to the currently visible CHAR1 followed by CHAR2.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\nBEG and END narrow the scope where candidates are searched.\n\n(fn CHAR1 CHAR2 &optional ARG BEG END)" t)(autoload 'avy-goto-char-2-above "avy" "Jump to the currently visible CHAR1 followed by CHAR2.\nThis is a scoped version of `avy-goto-char-2', where the scope is\nthe visible part of the current buffer up to point.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\n\n(fn CHAR1 CHAR2 &optional ARG)" t)(autoload 'avy-goto-char-2-below "avy" "Jump to the currently visible CHAR1 followed by CHAR2.\nThis is a scoped version of `avy-goto-char-2', where the scope is\nthe visible part of the current buffer following point.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\n\n(fn CHAR1 CHAR2 &optional ARG)" t)(autoload 'avy-isearch "avy" "Jump to one of the current isearch candidates." t)(autoload 'avy-goto-word-0 "avy" "Jump to a word start.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\nBEG and END narrow the scope where candidates are searched.\n\n(fn ARG &optional BEG END)" t)(autoload 'avy-goto-whitespace-end "avy" "Jump to the end of a whitespace sequence.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\nBEG and END narrow the scope where candidates are searched.\n\n(fn ARG &optional BEG END)" t)(autoload 'avy-goto-word-1 "avy" "Jump to the currently visible CHAR at a word start.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\nBEG and END narrow the scope where candidates are searched.\nWhen SYMBOL is non-nil, jump to symbol start instead of word start.\n\n(fn CHAR &optional ARG BEG END SYMBOL)" t)(autoload 'avy-goto-word-1-above "avy" "Jump to the currently visible CHAR at a word start.\nThis is a scoped version of `avy-goto-word-1', where the scope is\nthe visible part of the current buffer up to point.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\n\n(fn CHAR &optional ARG)" t)(autoload 'avy-goto-word-1-below "avy" "Jump to the currently visible CHAR at a word start.\nThis is a scoped version of `avy-goto-word-1', where the scope is\nthe visible part of the current buffer following point.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\n\n(fn CHAR &optional ARG)" t)(autoload 'avy-goto-symbol-1 "avy" "Jump to the currently visible CHAR at a symbol start.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\n\n(fn CHAR &optional ARG)" t)(autoload 'avy-goto-symbol-1-above "avy" "Jump to the currently visible CHAR at a symbol start.\nThis is a scoped version of `avy-goto-symbol-1', where the scope is\nthe visible part of the current buffer up to point.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\n\n(fn CHAR &optional ARG)" t)(autoload 'avy-goto-symbol-1-below "avy" "Jump to the currently visible CHAR at a symbol start.\nThis is a scoped version of `avy-goto-symbol-1', where the scope is\nthe visible part of the current buffer following point.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\n\n(fn CHAR &optional ARG)" t)(autoload 'avy-goto-subword-0 "avy" "Jump to a word or subword start.\nThe window scope is determined by `avy-all-windows' (ARG negates it).\n\nWhen PREDICATE is non-nil it's a function of zero parameters that\nshould return true.\n\nBEG and END narrow the scope where candidates are searched.\n\n(fn &optional ARG PREDICATE BEG END)" t)(autoload 'avy-goto-subword-1 "avy" "Jump to the currently visible CHAR at a subword start.\nThe window scope is determined by `avy-all-windows' (ARG negates it).\nThe case of CHAR is ignored.\n\n(fn CHAR &optional ARG)" t)(autoload 'avy-goto-word-or-subword-1 "avy" "Forward to `avy-goto-subword-1' or `avy-goto-word-1'.\nWhich one depends on variable `subword-mode'." t)(autoload 'avy-goto-line "avy" "Jump to a line start in current buffer.\n\nWhen ARG is 1, jump to lines currently visible, with the option\nto cancel to `goto-line' by entering a number.\n\nWhen ARG is 4, negate the window scope determined by\n`avy-all-windows'.\n\nOtherwise, forward to `goto-line' with ARG.\n\n(fn &optional ARG)" t)(autoload 'avy-goto-line-above "avy" "Goto visible line above the cursor.\nOFFSET changes the distance between the closest key to the cursor and\nthe cursor\nWhen BOTTOM-UP is non-nil, display avy candidates from top to bottom\n\n(fn &optional OFFSET BOTTOM-UP)" t)(autoload 'avy-goto-line-below "avy" "Goto visible line below the cursor.\nOFFSET changes the distance between the closest key to the cursor and\nthe cursor\nWhen BOTTOM-UP is non-nil, display avy candidates from top to bottom\n\n(fn &optional OFFSET BOTTOM-UP)" t)(autoload 'avy-goto-end-of-line "avy" "Call `avy-goto-line' and move to the end of the line.\n\n(fn &optional ARG)" t)(autoload 'avy-copy-line "avy" "Copy a selected line above the current line.\nARG lines can be used.\n\n(fn ARG)" t)(autoload 'avy-move-line "avy" "Move a selected line above the current line.\nARG lines can be used.\n\n(fn ARG)" t)(autoload 'avy-copy-region "avy" "Select two lines and copy the text between them to point.\n\nThe window scope is determined by `avy-all-windows' or\n`avy-all-windows-alt' when ARG is non-nil.\n\n(fn ARG)" t)(autoload 'avy-move-region "avy" "Select two lines and move the text between them above the current line." t)(autoload 'avy-kill-region "avy" "Select two lines and kill the region between them.\n\nThe window scope is determined by `avy-all-windows' or\n`avy-all-windows-alt' when ARG is non-nil.\n\n(fn ARG)" t)(autoload 'avy-kill-ring-save-region "avy" "Select two lines and save the region between them to the kill ring.\nThe window scope is determined by `avy-all-windows'.\nWhen ARG is non-nil, do the opposite of `avy-all-windows'.\n\n(fn ARG)" t)(autoload 'avy-kill-whole-line "avy" "Select line and kill the whole selected line.\n\nWith a numerical prefix ARG, kill ARG line(s) starting from the\nselected line.  If ARG is negative, kill backward.\n\nIf ARG is zero, kill the selected line but exclude the trailing\nnewline.\n\n\\[universal-argument] 3 \\[avy-kil-whole-line] kill three lines\nstarting from the selected line.  \\[universal-argument] -3\n\n\\[avy-kill-whole-line] kill three lines backward including the\nselected line.\n\n(fn ARG)" t)(autoload 'avy-kill-ring-save-whole-line "avy" "Select line and save the whole selected line as if killed, but don\x2019t kill it.\n\nThis command is similar to `avy-kill-whole-line', except that it\nsaves the line(s) as if killed, but does not kill it(them).\n\nWith a numerical prefix ARG, kill ARG line(s) starting from the\nselected line.  If ARG is negative, kill backward.\n\nIf ARG is zero, kill the selected line but exclude the trailing\nnewline.\n\n(fn ARG)" t)(autoload 'avy-setup-default "avy" "Setup the default shortcuts.")(autoload 'avy-goto-char-timer "avy" "Read one or many consecutive chars and jump to the first one.\nThe window scope is determined by `avy-all-windows' (ARG negates it).\n\n(fn &optional ARG)" t)(autoload 'avy-transpose-lines-in-region "avy" "Transpose lines in the active region." t)(autoload 'persp-def-auto-persp "persp-mode" "\n\n(fn NAME &rest KEYARGS &key BUFFER-NAME FILE-NAME MODE MODE-NAME MINOR-MODE MINOR-MODE-NAME PREDICATE HOOKS DYN-ENV GET-NAME GET-BUFFER GET-PERSP SWITCH PARAMETERS NOAUTO WEAK USER-DATA ON-MATCH AFTER-MATCH DONT-PICK-UP-BUFFERS DELETE)")(define-obsolete-function-alias 'def-auto-persp 'persp-def-auto-persp "persp-mode 2.9.6")(autoload 'persp-def-buffer-save/load "persp-mode" "\n\n(fn &rest KEYARGS &key BUFFER-NAME FILE-NAME MODE MODE-NAME MINOR-MODE MINOR-MODE-NAME PREDICATE TAG-SYMBOL SAVE-VARS SAVE-FUNCTION LOAD-FUNCTION AFTER-LOAD-FUNCTION MODE-RESTORE-FUNCTION APPEND)")(define-obsolete-function-alias 'def-persp-buffer-save/load 'persp-def-buffer-save/load "persp-mode 2.9.6")(defvar persp-mode nil "Non-nil if Persp mode is enabled.\nSee the `persp-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `persp-mode'.")(autoload 'persp-mode "persp-mode" "Toggle the persp-mode.\n\nWhen active, keeps track of multiple \\='perspectives\\=',\nnamed collections of buffers and window configurations.\nHere is a keymap of this minor mode:\n\\{persp-mode-map}\n\nThis is a global minor mode.  If called interactively, toggle the\n`Persp mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='persp-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'ts-fold-mode "ts-fold" "Folding code using tree sitter.\n\nThis is a minor mode.  If called interactively, toggle the\n`TS-Fold mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `ts-fold-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar global-ts-fold-mode nil "Non-nil if Global Ts-Fold mode is enabled.\nSee the `global-ts-fold-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-ts-fold-mode'.")(autoload 'global-ts-fold-mode "ts-fold" "Use `ts-fold-mode' wherever possible.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Global Ts-Fold mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='global-ts-fold-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'ts-fold-line-comment-mode "ts-fold" "Enable line comment folding.\n\nThis is a minor mode.  If called interactively, toggle the\n`Ts-Fold-Line-Comment mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `ts-fold-line-comment-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'ts-fold-close "ts-fold" "Fold the syntax node at `point` if it is foldable.\n\nFoldable nodes are defined in `ts-fold-range-alist' for the\ncurrent `major-mode'.\n\nIf no NODE is found in point, do nothing.\n\n(fn &optional NODE)" t)(autoload 'ts-fold-open "ts-fold" "Open the fold of the syntax node in which `point' resides.\nIf the current node is not folded or not foldable, do nothing." t)(autoload 'ts-fold-open-recursively "ts-fold" "Open recursively folded syntax NODE that are contained in the node at point." t)(autoload 'ts-fold-close-all "ts-fold" "Fold all foldable syntax nodes in the buffer." t)(autoload 'ts-fold-open-all "ts-fold" "Unfold all syntax nodes in the buffer." t)(autoload 'ts-fold-toggle "ts-fold" "Toggle the syntax node at `point'.\nIf the current syntax node is not foldable, do nothing." t)(autoload 'ts-fold-indicators-mode "ts-fold-indicators" "Minor mode for indicators mode.\n\nThis is a minor mode.  If called interactively, toggle the\n`Ts-Fold-Indicators mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `ts-fold-indicators-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar global-ts-fold-indicators-mode nil "Non-nil if Global Ts-Fold-Indicators mode is enabled.\nSee the `global-ts-fold-indicators-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-ts-fold-indicators-mode'.")(autoload 'global-ts-fold-indicators-mode "ts-fold-indicators" "Global minor mode for turning on ts-fold with indicators whenever avaliable.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Global Ts-Fold-Indicators mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='global-ts-fold-indicators-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'ts-fold-indicators-refresh "ts-fold-indicators" "Refresh indicators for all folding range.\n\n(fn &rest _)")(autoload 'tree-sitter-mode "tree-sitter" "Minor mode that keeps an up-to-date syntax tree using incremental parsing.\n\nThis is a minor mode.  If called interactively, toggle the\n`tree-sitter mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `tree-sitter-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'turn-on-tree-sitter-mode "tree-sitter" "Turn on `tree-sitter-mode' in a buffer, if possible.")(put 'global-tree-sitter-mode 'globalized-minor-mode t)(defvar global-tree-sitter-mode nil "Non-nil if Global Tree-Sitter mode is enabled.\nSee the `global-tree-sitter-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-tree-sitter-mode'.")(autoload 'global-tree-sitter-mode "tree-sitter" "Toggle Tree-Sitter mode in all buffers.\nWith prefix ARG, enable Global Tree-Sitter mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTree-Sitter mode is enabled in all buffers where\n`turn-on-tree-sitter-mode' would do it.\n\nSee `tree-sitter-mode' for more information on Tree-Sitter mode.\n\n(fn &optional ARG)" t)(define-obsolete-function-alias 'tree-sitter-node-at-point 'tree-sitter-node-at-pos "2021-08-30")(autoload 'tree-sitter-node-at-pos "tree-sitter" "Return the smallest syntax node of type NODE-TYPE at POS.\nNODE-TYPE may be a symbol, corresponding to a named syntax node; a string,\ncorresponding to an anonymous node, or a keyword, holding a special value. For\nthe special value `:named', return the smallest named node at POS. For the\nspecial value `:anonymous', return the smallest anonymous node at POS. IF POS is\nnil, POS defaults to the point. Unless IGNORE-INVALID-TYPE is non-nil, signal an\nerror when a specified named NODE-TYPE does not exist in the current grammar.\nWhenever NODE-TYPE is non-nil (other than `:named'), it is possible for the\nfunction to return nil.\n\n(fn &optional NODE-TYPE POS IGNORE-INVALID-TYPE)")(autoload 'tree-sitter-debug-mode "tree-sitter-debug" "Toggle syntax tree debugging for the current buffer.\n\nThis mode displays the syntax tree in another buffer, and keeps it up-to-date.\n\nThis is a minor mode.  If called interactively, toggle the\n`Tree-Sitter-Debug mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `tree-sitter-debug-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'tree-sitter-debug-query "tree-sitter-debug" "Execute query PATTERNS against the current syntax tree and return captures.\n\nIf the optional arg MATCHES is non-nil, matches (from `tsc-query-matches') are\nreturned instead of captures (from `tsc-query-captures').\n\nIf the optional arg TAG-ASSIGNER is non-nil, it is passed to `tsc-make-query' to\nassign custom tags to capture names.\n\nThis function is primarily useful for debugging purpose. Other packages should\nbuild queries and cursors once, then reuse them.\n\n(fn PATTERNS &optional MATCHES TAG-ASSIGNER)")(autoload 'tree-sitter-save-excursion "tree-sitter-extras" "Save the current location within the syntax tree; execute BODY; restore it.\n\nIf the original location cannot be restored due to the syntax tree changing too\nmuch, this macro behaves like `save-excursion', unless\n`tree-sitter-save-excursion-try-hard' is non-nil, in which case it tries to get\nas close as possible to the original location.\n\nAfter the location is restored, the buffer text is scrolled so that point stays\nat roughly the same vertical screen position. If `pixel-scroll' is available and\n`tree-sitter-save-excursion-pixelwise' is non-nil, pixelwise scrolling is used\ninstead, to make this restoration exact.\n\n(fn &rest BODY)" nil t)(function-put 'tree-sitter-save-excursion 'lisp-indent-function 0)(autoload 'tree-sitter-hl-add-patterns "tree-sitter-hl" "Add custom syntax highlighting PATTERNS.\nIf LANG-SYMBOL is non-nil, it identifies the language that PATTERNS should be\napplied to. If LANG-SYMBOL is nil, PATTERNS are applied to the current buffer,\nand are prioritized over language-specific patterns. Either way, PATTERNS are\nprioritized over `tree-sitter-hl-default-patterns'.\n\nThis function should be used by minor modes and configuration code. Major modes\nshould set `tree-sitter-hl-default-patterns' instead.\n\n(fn LANG-SYMBOL PATTERNS)")(function-put 'tree-sitter-hl-add-patterns 'lisp-indent-function 1)(autoload 'tree-sitter-hl-mode "tree-sitter-hl" "Toggle syntax highlighting based on Tree-sitter's syntax tree.\n\nIf `tree-sitter-hl-default-patterns' is nil, turning on this mode does nothing,\nand does not interfere with `font-lock-mode'.\n\nEnabling this automatically enables `tree-sitter-mode' in the buffer.\n\nTo enable this automatically whenever `tree-sitter-mode' is enabled:\n\n (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)\n\nThis is a minor mode.  If called interactively, toggle the\n`Tree-Sitter-Hl mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `tree-sitter-hl-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'tree-sitter-require "tree-sitter-load" "Return the language object loaded and registered under the name LANG-SYMBOL.\nIf the language has not been loaded yet, load it with `tree-sitter-load'.\n\nFILE should be the base name (without extension) of the native shared library\nthat exports the language as the native symbol NATIVE-SYMBOL-NAME.\n\nIf FILE is nil, the base name is assumed to be LANG-SYMBOL's name.\n\nIf NATIVE-SYMBOL-NAME is nil, the name of the exported native symbol is assumed\nto be LANG-SYMBOL's name, prefixed with \"tree_sitter_\".\n\n(fn LANG-SYMBOL &optional FILE NATIVE-SYMBOL-NAME)")(autoload 'tree-sitter-query-builder "tree-sitter-query" "Provide means for developers to write and test tree-sitter queries.\n\nThe buffer on focus when the command is called is set as the target buffer." t)(autoload 'vimish-fold "vimish-fold" "Fold active region staring at BEG, ending at END.\n\n(fn BEG END)" t)(autoload 'vimish-fold-unfold "vimish-fold" "Delete all `vimish-fold--folded' overlays at point." t)(autoload 'vimish-fold-refold "vimish-fold" "Refold unfolded fold at point." t)(autoload 'vimish-fold-delete "vimish-fold" "Delete fold at point." t)(autoload 'vimish-fold-unfold-all "vimish-fold" "Unfold all folds in current buffer." t)(autoload 'vimish-fold-refold-all "vimish-fold" "Refold all closed folds in current buffer." t)(autoload 'vimish-fold-delete-all "vimish-fold" "Delete all folds in current buffer." t)(autoload 'vimish-fold-toggle "vimish-fold" "Toggle fold at point." t)(autoload 'vimish-fold-toggle-all "vimish-fold" "Toggle all folds in current buffer." t)(autoload 'vimish-fold-avy "vimish-fold" "Fold region of text between point and line selected with avy.\n\nThis feature needs `avy' package." t)(autoload 'vimish-fold-next-fold "vimish-fold" "Jump to next folded region in current buffer." t)(autoload 'vimish-fold-previous-fold "vimish-fold" "Jump to previous folded region in current buffer." t)(autoload 'vimish-fold-from-marks "vimish-fold" "Create folds from folding symbols.\n\nMark strings are controlled by `vimish-fold-marks' customize variable." t)(autoload 'vimish-fold-mode "vimish-fold" "Toggle `vimish-fold-mode' minor mode.\n\nWith a prefix argument ARG, enable `vimish-fold-mode' mode if ARG\nis positive, and disable it otherwise.  If called from Lisp,\nenable the mode if ARG is omitted or NIL, and toggle it if ARG is\n`toggle'.\n\nThis minor mode sets hooks so when you `find-file' it calls\n`vimish-fold--restore-folds' and when you kill a file it calls\n`vimish-fold--save-folds'.\n\nFor globalized version of this mode see `vimish-fold-global-mode'.\n\n(fn &optional ARG)" t)(put 'vimish-fold-global-mode 'globalized-minor-mode t)(defvar vimish-fold-global-mode nil "Non-nil if Vimish-Fold-Global mode is enabled.\nSee the `vimish-fold-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `vimish-fold-global-mode'.")(autoload 'vimish-fold-global-mode "vimish-fold" "Toggle Vimish-Fold mode in all buffers.\nWith prefix ARG, enable Vimish-Fold-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nVimish-Fold mode is enabled in all buffers where `vimish-fold-mode'\nwould do it.\n\nSee `vimish-fold-mode' for more information on Vimish-Fold mode.\n\n(fn &optional ARG)" t)(autoload 'doom-snippets-remove-compiled-snippets "doom-snippets" "Delete all .yas-compiled-snippets.el files." t)(autoload 'doom-snippets-initialize "doom-snippets" "Add `doom-snippets-dir' to `yas-snippet-dirs', replacing the default\nyasnippet directory.")(eval-after-load 'yasnippet (lambda nil (doom-snippets-initialize)))(autoload 'yas-minor-mode "yasnippet" "Toggle YASnippet mode.\n\nWhen YASnippet mode is enabled, `yas-expand', normally bound to\nthe TAB key, expands snippets of code depending on the major\nmode.\n\nWith no argument, this command toggles the mode.\npositive prefix argument turns on the mode.\nNegative prefix argument turns off the mode.\n\nKey bindings:\n\\{yas-minor-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the `yas\nminor mode' mode.  If the prefix argument is positive, enable the\nmode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `yas-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'yas-global-mode 'globalized-minor-mode t)(defvar yas-global-mode nil "Non-nil if Yas-Global mode is enabled.\nSee the `yas-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `yas-global-mode'.")(autoload 'yas-global-mode "yasnippet" "Toggle Yas minor mode in all buffers.\nWith prefix ARG, enable Yas-Global mode if ARG is positive; otherwise,\ndisable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nYas minor mode is enabled in all buffers where `yas-minor-mode-on'\nwould do it.\n\nSee `yas-minor-mode' for more information on Yas minor mode.\n\n(fn &optional ARG)" t)(autoload 'snippet-mode "yasnippet" "A mode for editing yasnippets" t nil)(autoload 'aya-create "auto-yasnippet" "Create a snippet from the text between BEG and END.\nWhen the bounds are not given, use either the current region or line.\n\nRemove `aya-marker' prefixes, write the corresponding snippet to\n`aya-current', with words prefixed by `aya-marker' as fields, and\nmirrors properly set up.\n\n(fn &optional BEG END)" t)(autoload 'aya-create-one-line "auto-yasnippet" "A simplistic `aya-create' to create only one mirror.\nYou can still have as many instances of this mirror as you want.\nIt's less flexible than `aya-create', but faster.\nIt uses a different marker, which is `aya-marker-one-line'.\nYou can use it to quickly generate one-liners such as\nmenu.add_item(spamspamspam, \"spamspamspam\")" t)(autoload 'aya-expand "auto-yasnippet" "Insert the last yasnippet created by `aya-create'.\n\nOptionally use PREFIX to set any field as `$0' for wrapping the\ncurrent region. (`$0' also sets the exit point after `aya-expand'\nwhen there's no active region.) When PREFIX is it defaults to 1.\n\nFor example let's say the second field in a snippet is where you\nwant to wrap the currently selected region.\n\nUse `M-2' \\[aya-expand].\n\nIf we use this text as a snippet:\n\n```~lang\n~code\n````'\n\nand assume the selected region as:\n\n`let somePrettyComplexCode = \"Hello World!\"'\n\nwe'd do `M-2' \\[aya-expand] which allows us to\nfill in `~lang' as `javascript' and wraps our\ncode into the code-fences like this.\n\n```javascript\nlet somePrettyComplexCode = \"Hello World!\"\n```\n\nHint: if you view the current snippet(s) in history with\n`aya-expand-from-history'. The snippets are shown with their\nfields numbered.\n\nIn our example the snippet looks like like this:\n\n\\`\\`\\`$1\x2936$2\x2936\\`\\`\\`\x2936\n\n(fn &optional PREFIX)" t)(autoload 'aya-expand-from-history "auto-yasnippet" "Select and insert a yasnippet from the `aya-history'.\nThe selected snippet will become `aya-current'\nand will be used for consecutive `aya-expand' commands.\n\nWhen PREFIX is given, the corresponding field number is\nmodified to make it the current point after expansion.\n\n(fn &optional PREFIX)" t)(autoload 'aya-delete-from-history "auto-yasnippet" "Select and delete one or more snippets from `aya-history'.\nIf the selected snippet is also `aya-current', it will be replaced\nby the next snippet in history, or blank if no other history items\nare available." t)(autoload 'aya-open-line "auto-yasnippet" "Call `open-line', unless there are abbrevs or snippets at point.\nIn that case expand them.  If there's a snippet expansion in progress,\nmove to the next field.  Call `open-line' if nothing else applies." t)(autoload 'aya-yank-snippet "auto-yasnippet" "Insert current snippet at point.\nTo save a snippet permanently, create an empty file and call this." t)(autoload 'aya-yank-snippet-from-history "auto-yasnippet" "Insert snippet from history at point." t)(autoload 'visual-fill-column-mode "visual-fill-column" "Wrap lines according to `fill-column' in `visual-line-mode'.\n\nThis is a minor mode.  If called interactively, toggle the\n`Visual-Fill-Column mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `visual-fill-column-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-visual-fill-column-mode 'globalized-minor-mode t)(defvar global-visual-fill-column-mode nil "Non-nil if Global Visual-Fill-Column mode is enabled.\nSee the `global-visual-fill-column-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-visual-fill-column-mode'.")(autoload 'global-visual-fill-column-mode "visual-fill-column" "Toggle Visual-Fill-Column mode in all buffers.\nWith prefix ARG, enable Global Visual-Fill-Column mode if ARG is\npositive; otherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nVisual-Fill-Column mode is enabled in all buffers where\n`turn-on-visual-fill-column-mode' would do it.\n\nSee `visual-fill-column-mode' for more information on\nVisual-Fill-Column mode.\n\n(fn &optional ARG)" t)(autoload 'visual-fill-column-split-window-sensibly "visual-fill-column" "Split WINDOW sensibly, unsetting its margins first.\nThis function unsets the window margins and calls\n`split-window-sensibly'.\n\nBy default, `split-window-sensibly' does not split a window in\ntwo side-by-side windows if it has wide margins, even if there is\nenough space for a vertical split.  This function is used as the\nvalue of `split-window-preferred-function' to allow\n`display-buffer' to split such windows.\n\n(fn &optional WINDOW)")(autoload 'fd-dired "fd-dired" "Run `fd' and go into Dired mode on a buffer of the output.\nThe command run (after changing into DIR) is essentially\n\n    fd . ARGS -ls\n\nexcept that the car of the variable `fd-dired-ls-option' specifies what to\nuse in place of \"-ls\" as the final argument.\n\n(fn DIR ARGS)" t)(autoload 'fd-name-dired "fd-dired" "Search DIR recursively for files matching the globbing pattern PATTERN,\nand run Dired on those files.\nPATTERN is a shell wildcard (not an Emacs regexp) and need not be quoted.\nThe default command run (after changing into DIR) is\n\n    fd . ARGS \\='PATTERN\\=' | fd-dired-ls-option\n\n(fn DIR PATTERN)" t)(autoload 'fd-grep-dired "fd-dired" "Find files in DIR that contain matches for REGEXP and start Dired on output.\nThe command run (after changing into DIR) is\n\n  fd . ARGS --exec rg --regexp REGEXP -0 -ls | fd-dired-ls-option\n\n(fn DIR REGEXP)" t)(autoload 'dired-rsync "dired-rsync" "Asynchronously copy files in dired to `DEST' using rsync.\n\n`DEST' can be a relative filename and will be processed by\n`expand-file-name' before being passed to the rsync command.\n\nThis function runs the copy asynchronously so Emacs won't block whilst\nthe copy is running.  It also handles both source and destinations on\nssh/scp tramp connections.\n\n(fn DEST)" t)(autoload 'dired-git-info-mode "dired-git-info" "Toggle git message info in current dired buffer.\n\nThis is a minor mode.  If called interactively, toggle the\n`Dired-Git-Info mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `dired-git-info-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'dired-git-info-auto-enable "dired-git-info" "Enable `dired-git-info-mode' if current dired buffer is in a git repo.\n\nAdd this function to `dired-after-readin-hook' to enable the mode\nautomatically inside git repos.")(autoload 'diredfl-mode "diredfl" "Enable additional font locking in `dired-mode'.\n\nThis is a minor mode.  If called interactively, toggle the\n`Diredfl mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `diredfl-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'diredfl-global-mode 'globalized-minor-mode t)(defvar diredfl-global-mode nil "Non-nil if Diredfl-Global mode is enabled.\nSee the `diredfl-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `diredfl-global-mode'.")(autoload 'diredfl-global-mode "diredfl" "Toggle Diredfl mode in all buffers.\nWith prefix ARG, enable Diredfl-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nDiredfl mode is enabled in all buffers where `(lambda nil (when\n(derived-mode-p 'dired-mode) (diredfl-mode)))' would do it.\n\nSee `diredfl-mode' for more information on Diredfl mode.\n\n(fn &optional ARG)" t)(autoload 'ibuffer-vc-generate-filter-groups-by-vc-root "ibuffer-vc" "Create a set of ibuffer filter groups based on the vc root dirs of buffers.")(autoload 'ibuffer-vc-set-filter-groups-by-vc-root "ibuffer-vc" "Set the current filter groups to filter by vc root dir." t)(autoload 'ibuffer-make-column-vc-status "ibuffer-vc")(autoload 'ibuffer-make-column-vc-relative-file "ibuffer-vc")(autoload 'ibuffer-make-column-vc-status-mini "ibuffer-vc")(autoload 'ibuffer-do-sort-by-vc-status "ibuffer-vc")(autoload 'ibuffer-make-column-project-name "ibuffer-projectile")(autoload 'ibuffer-do-sort-by-project-name "ibuffer-projectile")(autoload 'ibuffer-make-column-project-relative-file "ibuffer-projectile")(autoload 'ibuffer-projectile-generate-filter-groups "ibuffer-projectile" "Create a set of ibuffer filter groups based on the projectile root dirs of buffers.")(autoload 'ibuffer-projectile-set-filter-groups "ibuffer-projectile" "Set the current filter groups to filter by projectile root dir." t)(autoload 'projectile-version "projectile" "Get the Projectile version as string.\n\nIf called interactively or if SHOW-VERSION is non-nil, show the\nversion in the echo area and the messages buffer.\n\nThe returned string includes both, the version from package.el\nand the library version, if both a present and different.\n\nIf the version number could not be determined, signal an error,\nif called interactively, or if SHOW-VERSION is non-nil, otherwise\njust return nil.\n\n(fn &optional SHOW-VERSION)" t)(autoload 'projectile-invalidate-cache "projectile" "Remove the current project's files from `projectile-projects-cache'.\n\nWith a prefix argument PROMPT prompts for the name of the project whose cache\nto invalidate.\n\n(fn PROMPT)" t)(autoload 'projectile-purge-file-from-cache "projectile" "Purge FILE from the cache of the current project.\n\n(fn FILE)" t)(autoload 'projectile-purge-dir-from-cache "projectile" "Purge DIR from the cache of the current project.\n\n(fn DIR)" t)(autoload 'projectile-cache-current-file "projectile" "Add the currently visited file to the cache." t)(autoload 'projectile-discover-projects-in-directory "projectile" "Discover any projects in DIRECTORY and add them to the projectile cache.\n\nIf DEPTH is non-nil recursively descend exactly DEPTH levels below DIRECTORY and\ndiscover projects there.\n\n(fn DIRECTORY &optional DEPTH)" t)(autoload 'projectile-discover-projects-in-search-path "projectile" "Discover projects in `projectile-project-search-path'.\nInvoked automatically when `projectile-mode' is enabled." t)(autoload 'projectile-switch-to-buffer "projectile" "Switch to a project buffer." t)(autoload 'projectile-switch-to-buffer-other-window "projectile" "Switch to a project buffer and show it in another window." t)(autoload 'projectile-switch-to-buffer-other-frame "projectile" "Switch to a project buffer and show it in another frame." t)(autoload 'projectile-display-buffer "projectile" "Display a project buffer in another window without selecting it." t)(autoload 'projectile-project-buffers-other-buffer "projectile" "Switch to the most recently selected buffer project buffer.\nOnly buffers not visible in windows are returned." t)(autoload 'projectile-multi-occur "projectile" "Do a `multi-occur' in the project's buffers.\nWith a prefix argument, show NLINES of context.\n\n(fn &optional NLINES)" t)(autoload 'projectile-find-other-file "projectile" "Switch between files with the same name but different extensions.\nWith FLEX-MATCHING, match any file that contains the base name of current file.\nOther file extensions can be customized with the variable\n`projectile-other-file-alist'.\n\n(fn &optional FLEX-MATCHING)" t)(autoload 'projectile-find-other-file-other-window "projectile" "Switch between files with different extensions in other window.\nSwitch between files with the same name but different extensions in other\nwindow.  With FLEX-MATCHING, match any file that contains the base name of\ncurrent file.  Other file extensions can be customized with the variable\n`projectile-other-file-alist'.\n\n(fn &optional FLEX-MATCHING)" t)(autoload 'projectile-find-other-file-other-frame "projectile" "Switch between files with different extensions in other frame.\nSwitch between files with the same name but different extensions in other frame.\nWith FLEX-MATCHING, match any file that contains the base name of current\nfile.  Other file extensions can be customized with the variable\n`projectile-other-file-alist'.\n\n(fn &optional FLEX-MATCHING)" t)(autoload 'projectile-find-file-dwim "projectile" "Jump to a project's files using completion based on context.\n\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\nIf point is on a filename, Projectile first tries to search for that\nfile in project:\n\n- If it finds just a file, it switches to that file instantly.  This works\neven if the filename is incomplete, but there's only a single file in the\ncurrent project that matches the filename at point.  For example, if\nthere's only a single file named \"projectile/projectile.el\" but the\ncurrent filename is \"projectile/proj\" (incomplete),\n`projectile-find-file-dwim' still switches to \"projectile/projectile.el\"\nimmediately because this is the only filename that matches.\n\n- If it finds a list of files, the list is displayed for selecting.  A list\nof files is displayed when a filename appears more than one in the project\nor the filename at point is a prefix of more than two files in a project.\nFor example, if `projectile-find-file-dwim' is executed on a filepath like\n\"projectile/\", it lists the content of that directory.  If it is executed\non a partial filename like \"projectile/a\", a list of files with character\n\"a\" in that directory is presented.\n\n- If it finds nothing, display a list of all files in project for selecting.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-find-file-dwim-other-window "projectile" "Jump to a project's files using completion based on context in other window.\n\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\nIf point is on a filename, Projectile first tries to search for that\nfile in project:\n\n- If it finds just a file, it switches to that file instantly.  This works\neven if the filename is incomplete, but there's only a single file in the\ncurrent project that matches the filename at point.  For example, if\nthere's only a single file named \"projectile/projectile.el\" but the\ncurrent filename is \"projectile/proj\" (incomplete),\n`projectile-find-file-dwim-other-window' still switches to\n\"projectile/projectile.el\" immediately because this is the only filename\nthat matches.\n\n- If it finds a list of files, the list is displayed for selecting.  A list\nof files is displayed when a filename appears more than one in the project\nor the filename at point is a prefix of more than two files in a project.\nFor example, if `projectile-find-file-dwim-other-window' is executed on a\nfilepath like \"projectile/\", it lists the content of that directory.  If\nit is executed on a partial filename like \"projectile/a\", a list of files\nwith character \"a\" in that directory is presented.\n\n- If it finds nothing, display a list of all files in project for selecting.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-find-file-dwim-other-frame "projectile" "Jump to a project's files using completion based on context in other frame.\n\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\nIf point is on a filename, Projectile first tries to search for that\nfile in project:\n\n- If it finds just a file, it switches to that file instantly.  This works\neven if the filename is incomplete, but there's only a single file in the\ncurrent project that matches the filename at point.  For example, if\nthere's only a single file named \"projectile/projectile.el\" but the\ncurrent filename is \"projectile/proj\" (incomplete),\n`projectile-find-file-dwim-other-frame' still switches to\n\"projectile/projectile.el\" immediately because this is the only filename\nthat matches.\n\n- If it finds a list of files, the list is displayed for selecting.  A list\nof files is displayed when a filename appears more than one in the project\nor the filename at point is a prefix of more than two files in a project.\nFor example, if `projectile-find-file-dwim-other-frame' is executed on a\nfilepath like \"projectile/\", it lists the content of that directory.  If\nit is executed on a partial filename like \"projectile/a\", a list of files\nwith character \"a\" in that directory is presented.\n\n- If it finds nothing, display a list of all files in project for selecting.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-find-file "projectile" "Jump to a project's file using completion.\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-find-file-other-window "projectile" "Jump to a project's file using completion and show it in another window.\n\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-find-file-other-frame "projectile" "Jump to a project's file using completion and show it in another frame.\n\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-toggle-project-read-only "projectile" "Toggle project read only." t)(autoload 'projectile-add-dir-local-variable "projectile" "Run `add-dir-local-variable' with .dir-locals.el in root of project.\n\nParameters MODE VARIABLE VALUE are passed directly to `add-dir-local-variable'.\n\n(fn MODE VARIABLE VALUE)")(autoload 'projectile-delete-dir-local-variable "projectile" "Run `delete-dir-local-variable' with .dir-locals.el in root of project.\n\nParameters MODE VARIABLE VALUE are passed directly to\n`delete-dir-local-variable'.\n\n(fn MODE VARIABLE)")(autoload 'projectile-find-dir "projectile" "Jump to a project's directory using completion.\n\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-find-dir-other-window "projectile" "Jump to a project's directory in other window using completion.\n\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-find-dir-other-frame "projectile" "Jump to a project's directory in other frame using completion.\n\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-find-test-file "projectile" "Jump to a project's test file using completion.\n\nWith a prefix arg INVALIDATE-CACHE invalidates the cache first.\n\n(fn &optional INVALIDATE-CACHE)" t)(autoload 'projectile-find-related-file-other-window "projectile" "Open related file in other window." t)(autoload 'projectile-find-related-file-other-frame "projectile" "Open related file in other frame." t)(autoload 'projectile-find-related-file "projectile" "Open related file." t)(autoload 'projectile-related-files-fn-groups "projectile" "Generate a related-files-fn which relates as KIND for files in each of GROUPS.\n\n(fn KIND GROUPS)")(autoload 'projectile-related-files-fn-extensions "projectile" "Generate a related-files-fn which relates as KIND for files having EXTENSIONS.\n\n(fn KIND EXTENSIONS)")(autoload 'projectile-related-files-fn-test-with-prefix "projectile" "Generate a related-files-fn which relates tests and impl.\nUse files with EXTENSION based on TEST-PREFIX.\n\n(fn EXTENSION TEST-PREFIX)")(autoload 'projectile-related-files-fn-test-with-suffix "projectile" "Generate a related-files-fn which relates tests and impl.\nUse files with EXTENSION based on TEST-SUFFIX.\n\n(fn EXTENSION TEST-SUFFIX)")(autoload 'projectile-project-info "projectile" "Display info for current project." t)(autoload 'projectile-find-implementation-or-test-other-window "projectile" "Open matching implementation or test file in other window.\n\nSee the documentation of `projectile--find-matching-file' and\n`projectile--find-matching-test' for how implementation and test files\nare determined." t)(autoload 'projectile-find-implementation-or-test-other-frame "projectile" "Open matching implementation or test file in other frame.\n\nSee the documentation of `projectile--find-matching-file' and\n`projectile--find-matching-test' for how implementation and test files\nare determined." t)(autoload 'projectile-toggle-between-implementation-and-test "projectile" "Toggle between an implementation file and its test file.\n\n\nSee the documentation of `projectile--find-matching-file' and\n`projectile--find-matching-test' for how implementation and test files\nare determined." t)(autoload 'projectile-grep "projectile" "Perform rgrep in the project.\n\nWith a prefix ARG asks for files (globbing-aware) which to grep in.\nWith prefix ARG of `-' (such as `M--'), default the files (without prompt),\nto `projectile-grep-default-files'.\n\nWith REGEXP given, don't query the user for a regexp.\n\n(fn &optional REGEXP ARG)" t)(autoload 'projectile-ag "projectile" "Run an ag search with SEARCH-TERM in the project.\n\nWith an optional prefix argument ARG SEARCH-TERM is interpreted as a\nregular expression.\n\n(fn SEARCH-TERM &optional ARG)" t)(autoload 'projectile-ripgrep "projectile" "Run a ripgrep (rg) search with `SEARCH-TERM' at current project root.\n\nWith an optional prefix argument ARG SEARCH-TERM is interpreted as a\nregular expression.\n\nThis command depends on of the Emacs packages ripgrep or rg being\ninstalled to work.\n\n(fn SEARCH-TERM &optional ARG)" t)(autoload 'projectile-regenerate-tags "projectile" "Regenerate the project's [e|g]tags." t)(autoload 'projectile-find-tag "projectile" "Find tag in project." t)(autoload 'projectile-run-command-in-root "projectile" "Invoke `execute-extended-command' in the project's root." t)(autoload 'projectile-run-shell-command-in-root "projectile" "Invoke `shell-command' in the project's root.\n\n(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER)" t)(autoload 'projectile-run-async-shell-command-in-root "projectile" "Invoke `async-shell-command' in the project's root.\n\n(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER)" t)(autoload 'projectile-run-gdb "projectile" "Invoke `gdb' in the project's root." t)(autoload 'projectile-run-shell "projectile" "Invoke `shell' in the project's root.\n\nSwitch to the project specific shell buffer if it already exists.\n\nUse a prefix argument ARG to indicate creation of a new process instead.\n\n(fn &optional ARG)" t)(autoload 'projectile-run-eshell "projectile" "Invoke `eshell' in the project's root.\n\nSwitch to the project specific eshell buffer if it already exists.\n\nUse a prefix argument ARG to indicate creation of a new process instead.\n\n(fn &optional ARG)" t)(autoload 'projectile-run-ielm "projectile" "Invoke `ielm' in the project's root.\n\nSwitch to the project specific ielm buffer if it already exists.\n\nUse a prefix argument ARG to indicate creation of a new process instead.\n\n(fn &optional ARG)" t)(autoload 'projectile-run-term "projectile" "Invoke `term' in the project's root.\n\nSwitch to the project specific term buffer if it already exists.\n\nUse a prefix argument ARG to indicate creation of a new process instead.\n\n(fn &optional ARG)" t)(autoload 'projectile-run-vterm "projectile" "Invoke `vterm' in the project's root.\n\nSwitch to the project specific term buffer if it already exists.\n\nUse a prefix argument ARG to indicate creation of a new process instead.\n\n(fn &optional ARG)" t)(autoload 'projectile-run-vterm-other-window "projectile" "Invoke `vterm' in the project's root.\n\nSwitch to the project specific term buffer if it already exists.\n\nUse a prefix argument ARG to indicate creation of a new process instead.\n\n(fn &optional ARG)" t)(autoload 'projectile-replace "projectile" "Replace literal string in project using non-regexp `tags-query-replace'.\n\nWith a prefix argument ARG prompts you for a directory and file name patterns\non which to run the replacement.\n\n(fn &optional ARG)" t)(autoload 'projectile-replace-regexp "projectile" "Replace a regexp in the project using `tags-query-replace'.\n\nWith a prefix argument ARG prompts you for a directory on which\nto run the replacement.\n\n(fn &optional ARG)" t)(autoload 'projectile-kill-buffers "projectile" "Kill project buffers.\n\nThe buffer are killed according to the value of\n`projectile-kill-buffers-filter'." t)(autoload 'projectile-save-project-buffers "projectile" "Save all project buffers." t)(autoload 'projectile-dired "projectile" "Open `dired' at the root of the project." t)(autoload 'projectile-dired-other-window "projectile" "Open `dired'  at the root of the project in another window." t)(autoload 'projectile-dired-other-frame "projectile" "Open `dired' at the root of the project in another frame." t)(autoload 'projectile-vc "projectile" "Open `vc-dir' at the root of the project.\n\nFor git projects `magit-status-internal' is used if available.\nFor hg projects `monky-status' is used if available.\n\nIf PROJECT-ROOT is given, it is opened instead of the project\nroot directory of the current buffer file.  If interactively\ncalled with a prefix argument, the user is prompted for a project\ndirectory to open.\n\n(fn &optional PROJECT-ROOT)" t)(autoload 'projectile-recentf "projectile" "Show a list of recently visited files in a project." t)(autoload 'projectile-configure-project "projectile" "Run project configure command.\n\nNormally you'll be prompted for a compilation command, unless\nvariable `compilation-read-command'.  You can force the prompt\nwith a prefix ARG.\n\n(fn ARG)" t)(autoload 'projectile-compile-project "projectile" "Run project compilation command.\n\nNormally you'll be prompted for a compilation command, unless\nvariable `compilation-read-command'.  You can force the prompt\nwith a prefix ARG.  Per project default command can be set through\n`projectile-project-compilation-cmd'.\n\n(fn ARG)" t)(autoload 'projectile-test-project "projectile" "Run project test command.\n\nNormally you'll be prompted for a compilation command, unless\nvariable `compilation-read-command'.  You can force the prompt\nwith a prefix ARG.\n\n(fn ARG)" t)(autoload 'projectile-install-project "projectile" "Run project install command.\n\nNormally you'll be prompted for a compilation command, unless\nvariable `compilation-read-command'.  You can force the prompt\nwith a prefix ARG.\n\n(fn ARG)" t)(autoload 'projectile-package-project "projectile" "Run project package command.\n\nNormally you'll be prompted for a compilation command, unless\nvariable `compilation-read-command'.  You can force the prompt\nwith a prefix ARG.\n\n(fn ARG)" t)(autoload 'projectile-run-project "projectile" "Run project run command.\n\nNormally you'll be prompted for a compilation command, unless\nvariable `compilation-read-command'.  You can force the prompt\nwith a prefix ARG.\n\n(fn ARG)" t)(autoload 'projectile-repeat-last-command "projectile" "Run last projectile external command.\n\nExternal commands are: `projectile-configure-project',\n`projectile-compile-project', `projectile-test-project',\n`projectile-install-project', `projectile-package-project',\nand `projectile-run-project'.\n\nIf the prefix argument SHOW_PROMPT is non nil, the command can be edited.\n\n(fn SHOW-PROMPT)" t)(autoload 'projectile-switch-project "projectile" "Switch to a project we have visited before.\nInvokes the command referenced by `projectile-switch-project-action' on switch.\nWith a prefix ARG invokes `projectile-commander' instead of\n`projectile-switch-project-action.'\n\n(fn &optional ARG)" t)(autoload 'projectile-switch-open-project "projectile" "Switch to a project we have currently opened.\nInvokes the command referenced by `projectile-switch-project-action' on switch.\nWith a prefix ARG invokes `projectile-commander' instead of\n`projectile-switch-project-action.'\n\n(fn &optional ARG)" t)(autoload 'projectile-find-file-in-directory "projectile" "Jump to a file in a (maybe regular) DIRECTORY.\n\nThis command will first prompt for the directory the file is in.\n\n(fn &optional DIRECTORY)" t)(autoload 'projectile-find-file-in-known-projects "projectile" "Jump to a file in any of the known projects." t)(autoload 'projectile-cleanup-known-projects "projectile" "Remove known projects that don't exist anymore." t)(autoload 'projectile-clear-known-projects "projectile" "Clear both `projectile-known-projects' and `projectile-known-projects-file'." t)(autoload 'projectile-reset-known-projects "projectile" "Clear known projects and rediscover." t)(autoload 'projectile-remove-known-project "projectile" "Remove PROJECT from the list of known projects.\n\n(fn &optional PROJECT)" t)(autoload 'projectile-remove-current-project-from-known-projects "projectile" "Remove the current project from the list of known projects." t)(autoload 'projectile-add-known-project "projectile" "Add PROJECT-ROOT to the list of known projects.\n\n(fn PROJECT-ROOT)" t)(autoload 'projectile-ibuffer "projectile" "Open an IBuffer window showing all buffers in the current project.\n\nLet user choose another project when PROMPT-FOR-PROJECT is supplied.\n\n(fn PROMPT-FOR-PROJECT)" t)(autoload 'projectile-commander "projectile" "Execute a Projectile command with a single letter.\nThe user is prompted for a single character indicating the action to invoke.\nThe `?' character describes then\navailable actions.\n\nSee `def-projectile-commander-method' for defining new methods." t)(autoload 'projectile-browse-dirty-projects "projectile" "Browse dirty version controlled projects.\n\nWith a prefix argument, or if CACHED is non-nil, try to use the cached\ndirty project list.\n\n(fn &optional CACHED)" t)(autoload 'projectile-edit-dir-locals "projectile" "Edit or create a .dir-locals.el file of the project." t)(defvar projectile-mode nil "Non-nil if Projectile mode is enabled.\nSee the `projectile-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `projectile-mode'.")(autoload 'projectile-mode "projectile" "Minor mode to assist project management and navigation.\n\nWhen called interactively, toggle `projectile-mode'.  With prefix\nARG, enable `projectile-mode' if ARG is positive, otherwise disable\nit.\n\nWhen called from Lisp, enable `projectile-mode' if ARG is omitted,\nnil or positive.  If ARG is `toggle', toggle `projectile-mode'.\nOtherwise behave as if called interactively.\n\n\\{projectile-mode-map}\n\n(fn &optional ARG)" t)(define-obsolete-function-alias 'projectile-global-mode 'projectile-mode "1.0")(defconst vundo-ascii-symbols '((selected-node . 120) (node . 111) (horizontal-stem . 45) (vertical-stem . 124) (branch . 124) (last-branch . 96)) "ASCII symbols to draw vundo tree.")(defconst vundo-unicode-symbols '((selected-node . 9679) (node . 9675) (horizontal-stem . 9472) (vertical-stem . 9474) (branch . 9500) (last-branch . 9492)) "Unicode symbols to draw vundo tree.")(autoload 'vundo "vundo" "Display visual undo for the current buffer." t)(autoload 'vundo-diff-mark "vundo-diff" "Mark NODE for vundo diff.\nNODE defaults to the current node.\n\n(fn &optional NODE)" t)(autoload 'vundo-diff-unmark "vundo-diff" "Unmark the node marked for vundo diff." t)(autoload 'vundo-diff "vundo-diff" "Perform diff between marked and current buffer state.\nDisplays in a separate diff buffer with name based on\nthe original buffer name." t)(autoload 'undo-fu-session-save "undo-fu-session" "Save undo data." t)(autoload 'undo-fu-session-recover "undo-fu-session" "Recover undo data." t)(autoload 'undo-fu-session-compression-update "undo-fu-session" "Update existing undo session data after changing compression settings." t)(autoload 'undo-fu-session-mode "undo-fu-session" "Toggle saving the undo data in the current buffer (Undo-Fu Session Mode).\n\nThis is a minor mode.  If called interactively, toggle the\n`Undo-Fu-Session mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `undo-fu-session-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'undo-fu-session-global-mode 'globalized-minor-mode t)(defvar undo-fu-session-global-mode nil "Non-nil if Undo-Fu-Session-Global mode is enabled.\nSee the `undo-fu-session-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `undo-fu-session-global-mode'.")(autoload 'undo-fu-session-global-mode "undo-fu-session" "Toggle Undo-Fu-Session mode in all buffers.\nWith prefix ARG, enable Undo-Fu-Session-Global mode if ARG is\npositive; otherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nUndo-Fu-Session mode is enabled in all buffers where\n`undo-fu-session--mode-turn-on' would do it.\n\nSee `undo-fu-session-mode' for more information on Undo-Fu-Session\nmode.\n\n(fn &optional ARG)" t)(autoload 'undo-fu-disable-checkpoint "undo-fu" "Remove the undo-fu checkpoint, making all future actions unconstrained.\n\nThis command is needed when `undo-fu-ignore-keyboard-quit' is t,\nsince in this case `keyboard-quit' cannot be used\nto perform unconstrained undo/redo actions." t)(autoload 'undo-fu-only-redo-all "undo-fu" "Redo all actions until the initial undo step.\n\nwraps the `undo' function." t)(autoload 'undo-fu-only-redo "undo-fu" "Redo an action until the initial undo action.\n\nwraps the `undo' function.\n\nOptional argument ARG The number of steps to redo.\n\n(fn &optional ARG)" t)(autoload 'undo-fu-only-undo "undo-fu" "Undo the last action.\n\nwraps the `undo-only' function.\n\nOptional argument ARG the number of steps to undo.\n\n(fn &optional ARG)" t)(autoload 'gitattributes-mode "gitattributes-mode" "A major mode for editing .gitattributes files.\n\\{gitattributes-mode-map}\n\n(fn)" t)(dolist (pattern '("/\\.gitattributes\\'" "/info/attributes\\'" "/git/attributes\\'")) (add-to-list 'auto-mode-alist (cons pattern #'gitattributes-mode)))(autoload 'gitconfig-mode "gitconfig-mode" "A major mode for editing .gitconfig files.\n\n(fn)" t)(dolist (pattern '("/\\.gitconfig\\'" "/\\.git/config\\'" "/modules/.*/config\\'" "/git/config\\'" "/\\.gitmodules\\'" "/etc/gitconfig\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitconfig-mode)))(autoload 'gitignore-mode "gitignore-mode" "A major mode for editing .gitignore files.\n\n(fn)" t)(dolist (pattern (list "/\\.gitignore\\'" "/info/exclude\\'" "/git/ignore\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitignore-mode)))(autoload 'git-timemachine-toggle "git-timemachine" "Toggle git timemachine mode." t)(autoload 'git-timemachine "git-timemachine" "Enable git timemachine for file of current buffer." t)(autoload 'git-timemachine-switch-branch "git-timemachine" "Enable git timemachine for current buffer, switching to GIT-BRANCH.\n\n(fn GIT-BRANCH)" t)(autoload 'transient-insert-suffix "transient" "Insert a SUFFIX into PREFIX before LOC.\nPREFIX is a prefix command, a symbol.\nSUFFIX is a suffix command or a group specification (of\n  the same forms as expected by `transient-define-prefix').\nLOC is a command, a key vector, a key description (a string\n  as returned by `key-description'), or a coordination list\n  (whose last element may also be a command or key).\nRemove a conflicting binding unless optional KEEP-OTHER is\n  non-nil.\nSee info node `(transient)Modifying Existing Transients'.\n\n(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)")(function-put 'transient-insert-suffix 'lisp-indent-function 'defun)(autoload 'transient-append-suffix "transient" "Insert a SUFFIX into PREFIX after LOC.\nPREFIX is a prefix command, a symbol.\nSUFFIX is a suffix command or a group specification (of\n  the same forms as expected by `transient-define-prefix').\nLOC is a command, a key vector, a key description (a string\n  as returned by `key-description'), or a coordination list\n  (whose last element may also be a command or key).\nRemove a conflicting binding unless optional KEEP-OTHER is\n  non-nil.\nSee info node `(transient)Modifying Existing Transients'.\n\n(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)")(function-put 'transient-append-suffix 'lisp-indent-function 'defun)(autoload 'transient-replace-suffix "transient" "Replace the suffix at LOC in PREFIX with SUFFIX.\nPREFIX is a prefix command, a symbol.\nSUFFIX is a suffix command or a group specification (of\n  the same forms as expected by `transient-define-prefix').\nLOC is a command, a key vector, a key description (a string\n  as returned by `key-description'), or a coordination list\n  (whose last element may also be a command or key).\nSee info node `(transient)Modifying Existing Transients'.\n\n(fn PREFIX LOC SUFFIX)")(function-put 'transient-replace-suffix 'lisp-indent-function 'defun)(autoload 'transient-remove-suffix "transient" "Remove the suffix or group at LOC in PREFIX.\nPREFIX is a prefix command, a symbol.\nLOC is a command, a key vector, a key description (a string\n  as returned by `key-description'), or a coordination list\n  (whose last element may also be a command or key).\nSee info node `(transient)Modifying Existing Transients'.\n\n(fn PREFIX LOC)")(function-put 'transient-remove-suffix 'lisp-indent-function 'defun)(put 'git-commit-major-mode 'safe-local-variable (lambda (val) (memq val '(text-mode markdown-mode org-mode fundamental-mode git-commit-elisp-text-mode))))(autoload 'with-editor-export-editor "with-editor" "Teach subsequent commands to use current Emacs instance as editor.\n\nSet and export the environment variable ENVVAR, by default\n\"EDITOR\".  The value is automatically generated to teach\ncommands to use the current Emacs instance as \"the editor\".\n\nThis works in `shell-mode', `term-mode', `eshell-mode' and\n`vterm'.\n\n(fn &optional (ENVVAR \"EDITOR\"))" t)(autoload 'with-editor-export-git-editor "with-editor" "Like `with-editor-export-editor' but always set `$GIT_EDITOR'." t)(autoload 'with-editor-export-hg-editor "with-editor" "Like `with-editor-export-editor' but always set `$HG_EDITOR'." t)(defvar shell-command-with-editor-mode nil "Non-nil if Shell-Command-With-Editor mode is enabled.\nSee the `shell-command-with-editor-mode' command\nfor a description of this minor mode.")(autoload 'shell-command-with-editor-mode "with-editor" "Teach `shell-command' to use current Emacs instance as editor.\n\nTeach `shell-command', and all commands that ultimately call that\ncommand, to use the current Emacs instance as editor by executing\n\"EDITOR=CLIENT COMMAND&\" instead of just \"COMMAND&\".\n\nCLIENT is automatically generated; EDITOR=CLIENT instructs\nCOMMAND to use to the current Emacs instance as \"the editor\",\nassuming no other variable overrides the effect of \"$EDITOR\".\nCLIENT may be the path to an appropriate emacsclient executable\nwith arguments, or a script which also works over Tramp.\n\nAlternatively you can use the `with-editor-async-shell-command',\nwhich also allows the use of another variable instead of\n\"EDITOR\".\n\nThis is a global minor mode.  If called interactively, toggle the\n`Shell-Command-With-Editor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='shell-command-with-editor-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'with-editor-async-shell-command "with-editor" "Like `async-shell-command' but with `$EDITOR' set.\n\nExecute string \"ENVVAR=CLIENT COMMAND\" in an inferior shell;\ndisplay output, if any.  With a prefix argument prompt for an\nenvironment variable, otherwise the default \"EDITOR\" variable\nis used.  With a negative prefix argument additionally insert\nthe COMMAND's output at point.\n\nCLIENT is automatically generated; ENVVAR=CLIENT instructs\nCOMMAND to use to the current Emacs instance as \"the editor\",\nassuming it respects ENVVAR as an \"EDITOR\"-like variable.\nCLIENT may be the path to an appropriate emacsclient executable\nwith arguments, or a script which also works over Tramp.\n\nAlso see `async-shell-command' and `shell-command'.\n\n(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t)(autoload 'with-editor-shell-command "with-editor" "Like `shell-command' or `with-editor-async-shell-command'.\nIf COMMAND ends with \"&\" behave like the latter,\nelse like the former.\n\n(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t)(autoload 'browse-at-remote "browse-at-remote" "Browse the current file with `browse-url'." t)(autoload 'browse-at-remote-kill "browse-at-remote" "Add the URL of the current file to the kill ring.\n\nWorks like `browse-at-remote', but puts the address in the\nkill ring instead of opening it with `browse-url'." t)(defalias 'bar-browse 'browse-at-remote "Browse the current file with `browse-url'.")(defalias 'bar-to-clipboard 'browse-at-remote-kill "Add the URL of the current file to the kill ring.\n\nWorks like `browse-at-remote', but puts the address in the\nkill ring instead of opening it with `browse-url'.")(autoload 'flycheck-popup-tip-mode "flycheck-popup-tip" "A minor mode to show Flycheck error messages in a popup.\n\nThis is a minor mode.  If called interactively, toggle the\n`Flycheck-Popup-Tip mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `flycheck-popup-tip-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'spell-fu-buffer-session-localwords 'safe-local-variable #'spell-fu-list-of-strings-p)(autoload 'spell-fu-list-of-strings-p "spell-fu" "Return t when OBJ is a list of strings.\n\n(fn OBJ)")(autoload 'spell-fu-buffer-session-localwords-update "spell-fu" "Refresh after changing `spell-fu-buffer-session-localwords'.")(autoload 'spell-fu-mode "spell-fu" "Toggle variable `spell-fu-mode' in the current buffer.\n\nThis is a minor mode.  If called interactively, toggle the\n`Spell-Fu mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `spell-fu-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'spell-fu-global-mode 'globalized-minor-mode t)(defvar spell-fu-global-mode nil "Non-nil if Spell-Fu-Global mode is enabled.\nSee the `spell-fu-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `spell-fu-global-mode'.")(autoload 'spell-fu-global-mode "spell-fu" "Toggle Spell-Fu mode in all buffers.\nWith prefix ARG, enable Spell-Fu-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nSpell-Fu mode is enabled in all buffers where `spell-fu--mode-turn-on'\nwould do it.\n\nSee `spell-fu-mode' for more information on Spell-Fu mode.\n\n(fn &optional ARG)" t)(autoload 'writegood-reading-ease "writegood-mode" "Flesch-Kincaid reading ease test in the region bounded by START and END.\n\nScores roughly between 0 and 100.\n\n(fn &optional START END)" t)(autoload 'writegood-grade-level "writegood-mode" "Flesch-Kincaid grade level test. Converts reading ease score to a grade level (Score ~ years of school needed to read passage).\n\n(fn &optional START END)" t)(autoload 'writegood-mode "writegood-mode" "Colorize issues with the writing in the buffer.\n\nThis is a minor mode.  If called interactively, toggle the\n`Writegood mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `writegood-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defalias 'langtool-check #'langtool-check-buffer)(autoload 'langtool-check-buffer "langtool" "Check context current buffer and light up errors.\nOptional \\[universal-argument] read LANG name.\n\nYou can change the `langtool-default-language' to apply all session.\nRestrict to selection when region is activated.\n\n(fn &optional LANG)" t)(autoload 'langtool-switch-default-language "langtool" "Switch `langtool-default-language' to LANG.\n\n(fn LANG)" t)(autoload 'string-inflection-ruby-style-cycle "string-inflection" "foo_bar => FOO_BAR => FooBar => foo_bar" t)(autoload 'string-inflection-elixir-style-cycle "string-inflection" "foo_bar => FooBar => foo_bar" t)(autoload 'string-inflection-python-style-cycle "string-inflection" "foo_bar => FOO_BAR => FooBar => foo_bar" t)(autoload 'string-inflection-java-style-cycle "string-inflection" "fooBar => FOO_BAR => FooBar => fooBar" t)(autoload 'string-inflection-all-cycle "string-inflection" "foo_bar => FOO_BAR => FooBar => fooBar => foo-bar => Foo_Bar => foo_bar" t)(autoload 'string-inflection-toggle "string-inflection" "toggle foo_bar <=> FooBar" t)(autoload 'string-inflection-camelcase "string-inflection" "FooBar format" t)(autoload 'string-inflection-lower-camelcase "string-inflection" "fooBar format" t)(autoload 'string-inflection-underscore "string-inflection" "foo_bar format" t)(autoload 'string-inflection-capital-underscore "string-inflection" "Foo_Bar format" t)(autoload 'string-inflection-upcase "string-inflection" "FOO_BAR format" t)(autoload 'string-inflection-kebab-case "string-inflection" "foo-bar format" t)(autoload 'org-babel-execute-safely-maybe "ob-core" "Maybe `org-babel-execute-maybe'.\nThis function does nothing unless `org-babel-no-eval-on-ctrl-c-ctrl-c'\nis non-nil.")(autoload 'org-babel-execute-maybe "ob-core" "Execute src block or babel call at point." t)(autoload 'org-babel-view-src-block-info "ob-core" "Display information on the current source block.\nThis includes header arguments, language and name, and is largely\na window into the `org-babel-get-src-block-info' function." t)(autoload 'org-babel-expand-src-block-maybe "ob-core" "Conditionally expand a source block.\nDetect if this is context for an org-babel src-block and if so\nthen run `org-babel-expand-src-block'." t)(autoload 'org-babel-load-in-session-maybe "ob-core" "Conditionally load a source block in a session.\nDetect if this is context for an org-babel src-block and if so\nthen run `org-babel-load-in-session'." t)(autoload 'org-babel-pop-to-session-maybe "ob-core" "Conditionally pop to a session.\nDetect if this is context for an org-babel src-block and if so\nthen run `org-babel-switch-to-session'." t)(autoload 'org-babel-execute-src-block "ob-core" "Execute the current source code block and return the result.\nInsert the results of execution into the buffer.  Source code\nexecution and the collection and formatting of results can be\ncontrolled through a variety of header arguments.\n\nWith prefix argument ARG, force re-execution even if an existing\nresult cached in the buffer would otherwise have been returned.\n\nOptionally supply a value for INFO in the form returned by\n`org-babel-get-src-block-info'.\n\nOptionally supply a value for PARAMS which will be merged with\nthe header arguments specified at the front of the source code\nblock.\n\nEXECUTOR-TYPE is the type of the org element responsible for the\nexecution of the source block.  If not provided then informed\nguess will be made.\n\n(fn &optional ARG INFO PARAMS EXECUTOR-TYPE)" t)(autoload 'org-babel-expand-src-block "ob-core" "Expand the current source code block or block specified by INFO.\nINFO is the output of `org-babel-get-src-block-info'.\nPARAMS defines inherited header arguments.\n\nExpand according to the source code block's header\narguments and pop open the results in a preview buffer.\n\n(fn &optional ARG INFO PARAMS)" t)(autoload 'org-babel-check-src-block "ob-core" "Check for misspelled header arguments in the current code block." t)(autoload 'org-babel-insert-header-arg "ob-core" "Insert a header argument and its value.\nHEADER-ARG and VALUE, when provided, are the header argument name and\nits value.  When HEADER-ARG or VALUE are nil, offer interactive\ncompletion from lists of common args and values.\n\n(fn &optional HEADER-ARG VALUE)" t)(autoload 'org-babel-load-in-session "ob-core" "Load the body of the current source-code block.\nWhen optional argument INFO is non-nil, use source block defined in\nINFO, as returned by `org-babel-get-src-block-info'.\n\nEvaluate the header arguments for the source block before\nentering the session.  After loading the body this pops open the\nsession.\n\n(fn &optional ARG INFO)" t)(autoload 'org-babel-initiate-session "ob-core" "Initiate session for current code block or the block defined by INFO.\nIf called with a prefix argument ARG, then resolve any variable\nreferences in the header arguments and assign these variables in\nthe session.  Copy the body of the code block to the kill ring.\n\n(fn &optional ARG INFO)" t)(autoload 'org-babel-switch-to-session "ob-core" "Switch to the session of the current code block or block defined by INFO.\nUses `org-babel-initiate-session' to start the session.  If called\nwith a prefix argument ARG, then this is passed on to\n`org-babel-initiate-session'.\n\n(fn &optional ARG INFO)" t)(autoload 'org-babel-switch-to-session-with-code "ob-core" "Switch to code buffer and display session.\nPrefix argument ARG is passed to `org-babel-switch-to-session'.\n\n(fn &optional ARG INFO)" t)(autoload 'org-babel-do-in-edit-buffer "ob-core" "Evaluate BODY in edit buffer if there is a code block at point.\nReturn t if a code block was found at point, nil otherwise.\n\n(fn &rest BODY)" nil t)(autoload 'org-babel-open-src-block-result "ob-core" "Open results of source block at point.\n\nIf `point' is on a source block then open the results of the source\ncode block, otherwise return nil.  With optional prefix argument\nRE-RUN the source-code block is evaluated even if results already\nexist.\n\n(fn &optional RE-RUN)" t)(autoload 'org-babel-map-src-blocks "ob-core" "Evaluate BODY forms on each source-block in FILE.\nIf FILE is nil evaluate BODY forms on source blocks in current\nbuffer.  During evaluation of BODY the following local variables\nare set relative to the currently matched code block.\n\nfull-block ------- string holding the entirety of the code block\nbeg-block -------- point at the beginning of the code block\nend-block -------- point at the end of the matched code block\nlang ------------- string holding the language of the code block\nbeg-lang --------- point at the beginning of the lang\nend-lang --------- point at the end of the lang\nswitches --------- string holding the switches\nbeg-switches ----- point at the beginning of the switches\nend-switches ----- point at the end of the switches\nheader-args ------ string holding the header-args\nbeg-header-args -- point at the beginning of the header-args\nend-header-args -- point at the end of the header-args\nbody ------------- string holding the body of the code block\nbeg-body --------- point at the beginning of the body\nend-body --------- point at the end of the body\n\n(fn FILE &rest BODY)" nil t)(function-put 'org-babel-map-src-blocks 'lisp-indent-function 1)(autoload 'org-babel-map-inline-src-blocks "ob-core" "Evaluate BODY forms on each inline source block in FILE.\nIf FILE is nil evaluate BODY forms on source blocks in current\nbuffer.\n\n(fn FILE &rest BODY)" nil t)(function-put 'org-babel-map-inline-src-blocks 'lisp-indent-function 1)(autoload 'org-babel-map-call-lines "ob-core" "Evaluate BODY forms on each call line in FILE.\nIf FILE is nil evaluate BODY forms on source blocks in current\nbuffer.\n\n(fn FILE &rest BODY)" nil t)(function-put 'org-babel-map-call-lines 'lisp-indent-function 1)(autoload 'org-babel-map-executables "ob-core" "Evaluate BODY forms on each active Babel code in FILE.\nIf FILE is nil evaluate BODY forms on source blocks in current\nbuffer.\n\n(fn FILE &rest BODY)" nil t)(function-put 'org-babel-map-executables 'lisp-indent-function 1)(autoload 'org-babel-execute-buffer "ob-core" "Execute source code blocks in a buffer.\nPrefix argument ARG is passed to `org-babel-execute-src-block'.\nCall `org-babel-execute-src-block' on every source block in\nthe current buffer.\n\n(fn &optional ARG)" t)(autoload 'org-babel-execute-subtree "ob-core" "Execute source code blocks in a subtree.\nCall `org-babel-execute-src-block' on every source block in\nthe current subtree, passing over the prefix argument ARG.\n\n(fn &optional ARG)" t)(autoload 'org-babel-sha1-hash "ob-core" "Generate a sha1 hash based on the value of INFO.\nCONTEXT specifies the context of evaluation.  It can be `:eval',\n`:export', `:tangle'.  A nil value means `:eval'.\n\n(fn &optional INFO CONTEXT)" t)(autoload 'org-babel-hide-result-toggle-maybe "ob-core" "Toggle visibility of result at point." t)(autoload 'org-babel-goto-src-block-head "ob-core" "Go to the beginning of the current code block." t)(autoload 'org-babel-goto-named-src-block "ob-core" "Go to a source-code block with NAME.\n\n(fn NAME)" t)(autoload 'org-babel-goto-named-result "ob-core" "Go to a result with NAME.\n\n(fn NAME)" t)(autoload 'org-babel-next-src-block "ob-core" "Jump to the next source block.\nWith optional prefix argument ARG, jump forward ARG many source blocks.\n\n(fn &optional ARG)" t)(autoload 'org-babel-previous-src-block "ob-core" "Jump to the previous source block.\nWith optional prefix argument ARG, jump backward ARG many source blocks.\n\n(fn &optional ARG)" t)(autoload 'org-babel-mark-block "ob-core" "Mark current source block." t)(autoload 'org-babel-lob-execute-maybe "ob-lob" "Execute a Library of Babel source block, if appropriate.\nDetect if this is context for a Library Of Babel source block and\nif so then run the appropriate source block from the Library." t)(autoload 'org-babel-lob-get-info "ob-lob" "Return internal representation for Library of Babel function call.\n\nConsider DATUM, when provided, or element at point otherwise.\n\nWhen optional argument NO-EVAL is non-nil, Babel does not resolve\nremote variable references; a process which could likely result\nin the execution of other code blocks, and do not evaluate Lisp\nvalues in parameters.\n\nReturn nil when not on an appropriate location.  Otherwise return\na list compatible with `org-babel-get-src-block-info', which\nsee.\n\n(fn &optional DATUM NO-EVAL)")(autoload 'org-babel-tangle-file "ob-tangle" "Extract the bodies of source code blocks in FILE.\nSource code blocks are extracted with `org-babel-tangle'.\n\nOptional argument TARGET-FILE can be used to specify a default\nexport file for all source blocks.\n\nOptional argument LANG-RE can be used to limit the exported\nsource code blocks by languages matching a regular expression.\n\nReturn list of the tangled file names.\n\n(fn FILE &optional TARGET-FILE LANG-RE)" t)(autoload 'org-babel-tangle "ob-tangle" "Write code blocks to source-specific files.\nExtract the bodies of all source code blocks from the current\nfile into their own source-specific files.  Return the list of files.\nWith one universal prefix argument, only tangle the block at point.\nWhen two universal prefix arguments, only tangle blocks for the\ntangle file of the block at point.\nOptional argument TARGET-FILE can be used to specify a default\nexport file for all source blocks.  Optional argument LANG-RE can\nbe used to limit the exported source code blocks by languages\nmatching a regular expression.\n\n(fn &optional ARG TARGET-FILE LANG-RE)" t)(autoload 'org-cite-insert "oc" "Insert a citation at point.\nInsertion is done according to the processor set in `org-cite-insert-processor'.\nARG is the prefix argument received when calling interactively the function.\n\n(fn ARG)" t)(autoload 'org-next-link "ol" "Move forward to the next link.\nIf the link is in hidden text, expose it.  When SEARCH-BACKWARD\nis non-nil, move backward.\n\n(fn &optional SEARCH-BACKWARD)" t)(autoload 'org-previous-link "ol" "Move backward to the previous link.\nIf the link is in hidden text, expose it." t)(autoload 'org-toggle-link-display "ol" "Toggle the literal or descriptive display of links in current buffer." t)(autoload 'org-store-link "ol" "Store a link to the current location.\n\\<org-mode-map>\nThis link is added to `org-stored-links' and can later be inserted\ninto an Org buffer with `org-insert-link' (`\\[org-insert-link]').\nWhen optional argument INTERACTIVE? is nil, the link is not stored in\n`org-stored-links', but returned as a string.\n\nFor some link types, a `\\[universal-argument]' prefix ARG is interpreted.  A single\n`\\[universal-argument]' negates `org-link-context-for-files' for file links or\n`org-gnus-prefer-web-links' for links to Usenet articles.\n\nA `\\[universal-argument] \\[universal-argument]' prefix ARG forces skipping storing functions that are not\npart of Org core.\n\nA `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix ARG forces storing a link for each line in the\nactive region.\n\nAssume the function is called interactively if INTERACTIVE? is\nnon-nil.\n\n(fn ARG &optional INTERACTIVE?)" t)(autoload 'org-insert-link "ol" "Insert a link.  At the prompt, enter the link.\n\nCompletion can be used to insert any of the link protocol prefixes in use.\n\nThe history can be used to select a link previously stored with\n`org-store-link'.  When the empty string is entered (i.e. if you just\npress `RET' at the prompt), the link defaults to the most recently\nstored link.  As `SPC' triggers completion in the minibuffer, you need to\nuse `M-SPC' or `C-q SPC' to force the insertion of a space character.\nCompletion candidates include link descriptions.\n\nIf there is a link under cursor then edit it.\n\nYou will also be prompted for a description, and if one is given, it will\nbe displayed in the buffer instead of the link.\n\nIf there is already a link at point, this command will allow you to edit\nlink and description parts.\n\nWith a `\\[universal-argument]' prefix, prompts for a file to link to.  The file name can be\nselected using completion.  The path to the file will be relative to the\ncurrent directory if the file is in the current directory or a subdirectory.\nOtherwise, the link will be the absolute path as completed in the minibuffer\n(i.e. normally ~/path/to/file).  You can configure this behavior using the\noption `org-link-file-path-type'.\n\nWith a `\\[universal-argument] \\[universal-argument]' prefix, enforce an absolute path even if the file is in\nthe current directory or below.\n\nA `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix negates `org-link-keep-stored-after-insertion'.\n\nIf the LINK-LOCATION parameter is non-nil, this value will be used as\nthe link location instead of reading one interactively.\n\nIf the DESCRIPTION parameter is non-nil, this value will be used\nas the default description.  If not, and the chosen link type has\na non-nil `:insert-description' parameter, that is used to\ngenerate a description as described in `org-link-parameters'\ndocstring.  Otherwise, if `org-link-make-description-function' is\nnon-nil, this function will be called with the link target, and\nthe result will be the default link description.  When called\nnon-interactively, don't allow to edit the default description.\n\n(fn &optional COMPLETE-FILE LINK-LOCATION DESCRIPTION)" t)(autoload 'org-insert-all-links "ol" "Insert all links in `org-stored-links'.\nWhen a universal prefix, do not delete the links from `org-stored-links'.\nWhen `ARG' is a number, insert the last N link(s).\n`PRE' and `POST' are optional arguments to define a string to\nprepend or to append.\n\n(fn ARG &optional PRE POST)" t)(autoload 'org-insert-last-stored-link "ol" "Insert the last link stored in `org-stored-links'.\n\n(fn ARG)" t)(autoload 'org-insert-link-global "ol" "Insert a link like Org mode does.\nThis command can be called in any mode to insert a link in Org syntax." t)(autoload 'org-update-radio-target-regexp "ol" "Find all radio targets in this file and update the regular expression.\nAlso refresh fontification if needed." t)(autoload 'org-bbdb-anniversaries "ol-bbdb" "Extract anniversaries from BBDB for display in the agenda.\nWhen called programmatically, this function expects the `date'\nvariable to be globally bound.")(autoload 'org-irc-store-link "ol-irc" "Dispatch to the appropriate function to store a link to an IRC session.")(autoload 'org-babel-do-load-languages "org" "Load the languages defined in `org-babel-load-languages'.\n\n(fn SYM VALUE)")(autoload 'org-babel-load-file "org" "Load Emacs Lisp source code blocks in the Org FILE.\nThis function exports the source code using `org-babel-tangle'\nand then loads the resulting file using `load-file'.  With\noptional prefix argument COMPILE, the tangled Emacs Lisp file is\nbyte-compiled before it is loaded.\n\n(fn FILE &optional COMPILE)" t)(autoload 'org-version "org" "Show the Org version.\nInteractively, or when MESSAGE is non-nil, show it in echo area.\nWith prefix argument, or when HERE is non-nil, insert it at point.\nIn non-interactive uses, a reduced version string is output unless\nFULL is given.\n\n(fn &optional HERE FULL MESSAGE)" t)(autoload 'org-load-modules-maybe "org" "Load all extensions listed in `org-modules'.\n\n(fn &optional FORCE)")(autoload 'org-clock-persistence-insinuate "org" "Set up hooks for clock persistence.")(autoload 'org-mode "org" "Outline-based notes management and organizer, alias\n\"Carsten's outline-mode for keeping track of everything.\"\n\nOrg mode develops organizational tasks around a NOTES file which\ncontains information about projects as plain text.  Org mode is\nimplemented on top of Outline mode, which is ideal to keep the content\nof large files well structured.  It supports ToDo items, deadlines and\ntime stamps, which magically appear in the diary listing of the Emacs\ncalendar.  Tables are easily created with a built-in table editor.\nPlain text URL-like links connect to websites, emails (VM), Usenet\nmessages (Gnus), BBDB entries, and any files related to the project.\nFor printing and sharing of notes, an Org file (or a part of it)\ncan be exported as a structured ASCII or HTML file.\n\nThe following commands are available:\n\n\\{org-mode-map}\n\n(fn)" t)(autoload 'org-run-like-in-org-mode "org" "Run a command, pretending that the current buffer is in Org mode.\nThis will temporarily bind local variables that are typically bound in\nOrg mode to the values they have in Org mode, and then interactively\ncall CMD.\n\n(fn CMD)")(autoload 'org-open-file "org" "Open the file at PATH.\nFirst, this expands any special file name abbreviations.  Then the\nconfiguration variable `org-file-apps' is checked if it contains an\nentry for this file type, and if yes, the corresponding command is launched.\n\nIf no application is found, Emacs simply visits the file.\n\nWith optional prefix argument IN-EMACS, Emacs will visit the file.\nWith a double \\[universal-argument] \\[universal-argument] prefix arg, Org tries to avoid opening in Emacs\nand to use an external application to visit the file.\n\nOptional LINE specifies a line to go to, optional SEARCH a string\nto search for.  If LINE or SEARCH is given, the file will be\nopened in Emacs, unless an entry from `org-file-apps' that makes\nuse of groups in a regexp matches.\n\nIf you want to change the way frames are used when following a\nlink, please customize `org-link-frame-setup'.\n\nIf the file does not exist, throw an error.\n\n(fn PATH &optional IN-EMACS LINE SEARCH)")(autoload 'org-open-at-point-global "org" "Follow a link or a timestamp like Org mode does.\nAlso follow links and emails as seen by `thing-at-point'.\nThis command can be called in any mode to follow an external\nlink or a timestamp that has Org mode syntax.  Its behavior\nis undefined when called on internal links like fuzzy links.\nRaise a user error when there is nothing to follow." t)(autoload 'org-offer-links-in-entry "org" "Offer links in the current entry and return the selected link.\nIf there is only one link, return it.\nIf NTH is an integer, return the NTH link found.\nIf ZERO is a string, check also this string for a link, and if\nthere is one, return it.\n\n(fn BUFFER MARKER &optional NTH ZERO)")(autoload 'org-switchb "org" "Switch between Org buffers.\n\nWith `\\[universal-argument]' prefix, restrict available buffers to files.\n\nWith `\\[universal-argument] \\[universal-argument]' prefix, restrict available buffers to agenda files.\n\n(fn &optional ARG)" t)(autoload 'org-cycle-agenda-files "org" "Cycle through the files in `org-agenda-files'.\nIf the current buffer visits an agenda file, find the next one in the list.\nIf the current buffer does not, find the first agenda file." t)(autoload 'org-submit-bug-report "org" "Submit a bug report on Org via mail.\n\nDon't hesitate to report any problems or inaccurate documentation.\n\nIf you don't have setup sending mail from (X)Emacs, please copy the\noutput buffer into your mail program, as it gives us important\ninformation about your Org version and configuration." t)(autoload 'org-reload "org" "Reload all Org Lisp files.\nWith prefix arg UNCOMPILED, load the uncompiled versions.\n\n(fn &optional UNCOMPILED)" t)(autoload 'org-customize "org" "Call the customize function with org as argument." t)(autoload 'org-toggle-sticky-agenda "org-agenda" "Toggle `org-agenda-sticky'.\n\n(fn &optional ARG)" t)(autoload 'org-agenda "org-agenda" "Dispatch agenda commands to collect entries to the agenda buffer.\nPrompts for a command to execute.  Any prefix arg will be passed\non to the selected command.  The default selections are:\n\na     Call `org-agenda-list' to display the agenda for current day or week.\nt     Call `org-todo-list' to display the global todo list.\nT     Call `org-todo-list' to display the global todo list, select only\n      entries with a specific TODO keyword (the user gets a prompt).\nm     Call `org-tags-view' to display headlines with tags matching\n      a condition  (the user is prompted for the condition).\nM     Like `m', but select only TODO entries, no ordinary headlines.\ne     Export views to associated files.\ns     Search entries for keywords.\nS     Search entries for keywords, only with TODO keywords.\n/     Multi occur across all agenda files and also files listed\n      in `org-agenda-text-search-extra-files'.\n<     Restrict agenda commands to buffer, subtree, or region.\n      Press several times to get the desired effect.\n>     Remove a previous restriction.\n#     List \"stuck\" projects.\n!     Configure what \"stuck\" means.\nC     Configure custom agenda commands.\n\nMore commands can be added by configuring the variable\n`org-agenda-custom-commands'.  In particular, specific tags and TODO keyword\nsearches can be pre-defined in this way.\n\nIf the current buffer is in Org mode and visiting a file, you can also\nfirst press `<' once to indicate that the agenda should be temporarily\n(until the next use of `\\[org-agenda]') restricted to the current file.\nPressing `<' twice means to restrict to the current subtree or region\n(if active).\n\n(fn &optional ARG KEYS RESTRICTION)" t)(autoload 'org-batch-agenda "org-agenda" "Run an agenda command in batch mode and send the result to STDOUT.\nIf CMD-KEY is a string of length 1, it is used as a key in\n`org-agenda-custom-commands' and triggers this command.  If it is a\nlonger string it is used as a tags/todo match string.\nParameters are alternating variable names and values that will be bound\nbefore running the agenda command.\n\n(fn CMD-KEY &rest PARAMETERS)" nil t)(autoload 'org-batch-agenda-csv "org-agenda" "Run an agenda command in batch mode and send the result to STDOUT.\nIf CMD-KEY is a string of length 1, it is used as a key in\n`org-agenda-custom-commands' and triggers this command.  If it is a\nlonger string it is used as a tags/todo match string.\nParameters are alternating variable names and values that will be bound\nbefore running the agenda command.\n\nThe output gives a line for each selected agenda item.  Each\nitem is a list of comma-separated values, like this:\n\ncategory,head,type,todo,tags,date,time,extra,priority-l,priority-n\n\ncategory     The category of the item\nhead         The headline, without TODO kwd, TAGS and PRIORITY\ntype         The type of the agenda entry, can be\n                todo               selected in TODO match\n                tagsmatch          selected in tags match\n                diary              imported from diary\n                deadline           a deadline on given date\n                scheduled          scheduled on given date\n                timestamp          entry has timestamp on given date\n                closed             entry was closed on given date\n                upcoming-deadline  warning about deadline\n                past-scheduled     forwarded scheduled item\n                block              entry has date block including g. date\ntodo         The todo keyword, if any\ntags         All tags including inherited ones, separated by colons\ndate         The relevant date, like 2007-2-14\ntime         The time, like 15:00-16:50\nextra        String with extra planning info\npriority-l   The priority letter if any was given\npriority-n   The computed numerical priority\nagenda-day   The day in the agenda where this is listed\n\n(fn CMD-KEY &rest PARAMETERS)" nil t)(autoload 'org-store-agenda-views "org-agenda" "Store agenda views.\n\n(fn &rest PARAMETERS)" t)(autoload 'org-batch-store-agenda-views "org-agenda" "Run all custom agenda commands that have a file argument.\n\n(fn &rest PARAMETERS)" nil t)(autoload 'org-agenda-list "org-agenda" "Produce a daily/weekly view from all files in variable `org-agenda-files'.\nThe view will be for the current day or week, but from the overview buffer\nyou will be able to go to other days/weeks.\n\nWith a numeric prefix argument in an interactive call, the agenda will\nspan ARG days.  Lisp programs should instead specify SPAN to change\nthe number of days.  SPAN defaults to `org-agenda-span'.\n\nSTART-DAY defaults to TODAY, or to the most recent match for the weekday\ngiven in `org-agenda-start-on-weekday'.\n\nWhen WITH-HOUR is non-nil, only include scheduled and deadline\nitems if they have an hour specification like [h]h:mm.\n\n(fn &optional ARG START-DAY SPAN WITH-HOUR)" t)(autoload 'org-search-view "org-agenda" "Show all entries that contain a phrase or words or regular expressions.\n\nWith optional prefix argument TODO-ONLY, only consider entries that are\nTODO entries.  The argument STRING can be used to pass a default search\nstring into this function.  If EDIT-AT is non-nil, it means that the\nuser should get a chance to edit this string, with cursor at position\nEDIT-AT.\n\nThe search string can be viewed either as a phrase that should be found as\nis, or it can be broken into a number of snippets, each of which must match\nin a Boolean way to select an entry.  The default depends on the variable\n`org-agenda-search-view-always-boolean'.\nEven if this is turned off (the default) you can always switch to\nBoolean search dynamically by preceding the first word with  \"+\" or \"-\".\n\nThe default is a direct search of the whole phrase, where each space in\nthe search string can expand to an arbitrary amount of whitespace,\nincluding newlines.\n\nIf using a Boolean search, the search string is split on whitespace and\neach snippet is searched separately, with logical AND to select an entry.\nWords prefixed with a minus must *not* occur in the entry.  Words without\na prefix or prefixed with a plus must occur in the entry.  Matching is\ncase-insensitive.  Words are enclosed by word delimiters (i.e. they must\nmatch whole words, not parts of a word) if\n`org-agenda-search-view-force-full-words' is set (default is nil).\n\nBoolean search snippets enclosed by curly braces are interpreted as\nregular expressions that must or (when preceded with \"-\") must not\nmatch in the entry.  Snippets enclosed into double quotes will be taken\nas a whole, to include whitespace.\n\n- If the search string starts with an asterisk, search only in headlines.\n- If (possibly after the leading star) the search string starts with an\n  exclamation mark, this also means to look at TODO entries only, an effect\n  that can also be achieved with a prefix argument.\n- If (possibly after star and exclamation mark) the search string starts\n  with a colon, this will mean that the (non-regexp) snippets of the\n  Boolean search must match as full words.\n\nThis command searches the agenda files, and in addition the files\nlisted in `org-agenda-text-search-extra-files' unless a restriction lock\nis active.\n\n(fn &optional TODO-ONLY STRING EDIT-AT)" t)(autoload 'org-todo-list "org-agenda" "Show all (not done) TODO entries from all agenda files in a single list.\nThe prefix arg can be used to select a specific TODO keyword and limit\nthe list to these.  When using `\\[universal-argument]', you will be prompted\nfor a keyword.  A numeric prefix directly selects the Nth keyword in\n`org-todo-keywords-1'.\n\n(fn &optional ARG)" t)(autoload 'org-tags-view "org-agenda" "Show all headlines for all `org-agenda-files' matching a TAGS criterion.\nThe prefix arg TODO-ONLY limits the search to TODO entries.\n\n(fn &optional TODO-ONLY MATCH)" t)(autoload 'org-agenda-list-stuck-projects "org-agenda" "Create agenda view for projects that are stuck.\nStuck projects are project that have no next actions.  For the definitions\nof what a project is and how to check if it stuck, customize the variable\n`org-stuck-projects'.\n\n(fn &rest IGNORE)" t)(autoload 'org-diary "org-agenda" "Return diary information from org files.\nThis function can be used in a \"sexp\" diary entry in the Emacs calendar.\nIt accesses org files and extracts information from those files to be\nlisted in the diary.  The function accepts arguments specifying what\nitems should be listed.  For a list of arguments allowed here, see the\nvariable `org-agenda-entry-types'.\n\nThe call in the diary file should look like this:\n\n   &%%(org-diary) ~/path/to/some/orgfile.org\n\nUse a separate line for each org file to check.  Or, if you omit the file name,\nall files listed in `org-agenda-files' will be checked automatically:\n\n   &%%(org-diary)\n\nIf you don't give any arguments (as in the example above), the default value\nof `org-agenda-entry-types' is used: (:deadline :scheduled :timestamp :sexp).\nSo the example above may also be written as\n\n   &%%(org-diary :deadline :timestamp :sexp :scheduled)\n\nThe function expects the lisp variables `entry' and `date' to be provided\nby the caller, because this is how the calendar works.  Don't use this\nfunction from a program - use `org-agenda-get-day-entries' instead.\n\n(fn &rest ARGS)")(autoload 'org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item "org-agenda" "Do we have a reason to ignore this TODO entry because it has a time stamp?\n\n(fn &optional END)")(autoload 'org-agenda-set-restriction-lock "org-agenda" "Set restriction lock for agenda to current subtree or file.\nWhen in a restricted subtree, remove it.\n\nThe restriction will span over the entire file if TYPE is `file',\nor if TYPE is (4), or if the cursor is before the first headline\nin the file.  Otherwise, only apply the restriction to the current\nsubtree.\n\n(fn &optional TYPE)" t)(autoload 'org-calendar-goto-agenda "org-agenda" "Compute the Org agenda for the calendar date displayed at the cursor.\nThis is a command that has to be installed in `calendar-mode-map'." t)(autoload 'org-agenda-to-appt "org-agenda" "Activate appointments found in `org-agenda-files'.\n\nWith a `\\[universal-argument]' prefix, refresh the list of appointments.\n\nIf FILTER is t, interactively prompt the user for a regular\nexpression, and filter out entries that don't match it.\n\nIf FILTER is a string, use this string as a regular expression\nfor filtering entries out.\n\nIf FILTER is a function, filter out entries against which\ncalling the function returns nil.  This function takes one\nargument: an entry from `org-agenda-get-day-entries'.\n\nFILTER can also be an alist with the car of each cell being\neither `headline' or `category'.  For example:\n\n   ((headline \"IMPORTANT\")\n    (category \"Work\"))\n\nwill only add headlines containing IMPORTANT or headlines\nbelonging to the \"Work\" category.\n\nARGS are symbols indicating what kind of entries to consider.\nBy default `org-agenda-to-appt' will use :deadline*, :scheduled*\n(i.e., deadlines and scheduled items with a hh:mm specification)\nand :timestamp entries.  See the docstring of `org-diary' for\ndetails and examples.\n\nIf an entry has a APPT_WARNTIME property, its value will be used\nto override `appt-message-warning-time'.\n\n(fn &optional REFRESH FILTER &rest ARGS)" t)(autoload 'org-add-archive-files "org-archive" "Splice the archive FILES into the list of files.\nThis implies visiting all these files and finding out what the\narchive file is.\n\n(fn FILES)")(autoload 'org-archive-subtree "org-archive" "Move the current subtree to the archive.\nThe archive can be a certain top-level heading in the current\nfile, or in a different file.  The tree will be moved to that\nlocation, the subtree heading be marked DONE, and the current\ntime will be added.\n\nWhen called with a single prefix argument FIND-DONE, find whole\ntrees without any open TODO items and archive them (after getting\nconfirmation from the user).  When called with a double prefix\nargument, find whole trees with timestamps before today and\narchive them (after getting confirmation from the user).  If the\ncursor is not at a headline when these commands are called, try\nall level 1 trees.  If the cursor is on a headline, only try the\ndirect children of this heading.\n\n(fn &optional FIND-DONE)" t)(autoload 'org-archive-to-archive-sibling "org-archive" "Archive the current heading by moving it under the archive sibling.\n\nThe archive sibling is a sibling of the heading with the heading name\n`org-archive-sibling-heading' and an `org-archive-tag' tag.  If this\nsibling does not exist, it will be created at the end of the subtree.\n\nArchiving time is retained in the ARCHIVE_TIME node property." t)(autoload 'org-toggle-archive-tag "org-archive" "Toggle the archive tag for the current headline.\nWith prefix argument FIND-DONE, check all children of current headline\nand offer tagging the children that do not contain any open TODO\nitems.\n\n(fn &optional FIND-DONE)" t)(autoload 'org-archive-subtree-default "org-archive" "Archive the current subtree with the default command.\nThis command is set with the variable `org-archive-default-command'." t)(autoload 'org-archive-subtree-default-with-confirmation "org-archive" "Archive the current subtree with the default command.\nThis command is set with the variable `org-archive-default-command'." t)(autoload 'org-attach "org-attach" "The dispatcher for attachment commands.\nShows a list of commands and prompts for another key to execute a command." t)(autoload 'org-attach-dir "org-attach" "Return the directory associated with the current outline node.\nFirst check for DIR property, then ID property.\n`org-attach-use-inheritance' determines whether inherited\nproperties also will be considered.\n\nIf an ID property is found the default mechanism using that ID\nwill be invoked to access the directory for the current entry.\nNote that this method returns the directory as declared by ID or\nDIR even if the directory doesn't exist in the filesystem.\n\nIf CREATE-IF-NOT-EXISTS-P is non-nil, `org-attach-dir-get-create'\nis run.  If NO-FS-CHECK is non-nil, the function returns the path\nto the attachment even if it has not yet been initialized in the\nfilesystem.\n\nIf no attachment directory can be derived, return nil.\n\n(fn &optional CREATE-IF-NOT-EXISTS-P NO-FS-CHECK)")(autoload 'org-attach-dired-to-subtree "org-attach" "Attach FILES marked or current file in `dired' to subtree in other window.\nTakes the method given in `org-attach-method' for the attach action.\nPrecondition: Point must be in a `dired' buffer.\nIdea taken from `gnus-dired-attach'.\n\n(fn FILES)" t)(autoload 'org-capture-string "org-capture" "Capture STRING with the template selected by KEYS.\n\n(fn STRING &optional KEYS)" t)(autoload 'org-capture "org-capture" "Capture something.\n\\<org-capture-mode-map>\nThis will let you select a template from `org-capture-templates', and\nthen file the newly captured information.  The text is immediately\ninserted at the target location, and an indirect buffer is shown where\nyou can edit it.  Pressing `\\[org-capture-finalize]' brings you back to the previous\nstate of Emacs, so that you can continue your work.\n\nWhen called interactively with a `\\[universal-argument]' prefix argument GOTO, don't\ncapture anything, just go to the file/headline where the selected\ntemplate stores its notes.\n\nWith a `\\[universal-argument] \\[universal-argument]' prefix argument, go to the last note stored.\n\nWhen called with a `C-0' (zero) prefix, insert a template at point.\n\nWhen called with a `C-1' (one) prefix, force prompting for a date when\na datetree entry is made.\n\nELisp programs can set KEYS to a string associated with a template\nin `org-capture-templates'.  In this case, interactive selection\nwill be bypassed.\n\nIf `org-capture-use-agenda-date' is non-nil, capturing from the\nagenda will use the date at point as the default date.  Then, a\n`C-1' prefix will tell the capture process to use the HH:MM time\nof the day at point (if any) or the current HH:MM time.\n\n(fn &optional GOTO KEYS)" t)(autoload 'org-capture-import-remember-templates "org-capture" "Set `org-capture-templates' to be similar to `org-remember-templates'." t)(autoload 'org-resolve-clocks "org-clock" "Resolve all currently open Org clocks.\nIf `only-dangling-p' is non-nil, only ask to resolve dangling\n(i.e., not currently open and valid) clocks.\n\n(fn &optional ONLY-DANGLING-P PROMPT-FN LAST-VALID)" t)(autoload 'org-clock-in "org-clock" "Start the clock on the current item.\n\nIf necessary, clock-out of the currently active clock.\n\nWith a `\\[universal-argument]' prefix argument SELECT, offer a list of recently clocked\ntasks to clock into.\n\nWhen SELECT is `\\[universal-argument] \\[universal-argument]', clock into the current task and mark it as\nthe default task, a special task that will always be offered in the\nclocking selection, associated with the letter `d'.\n\nWhen SELECT is `\\[universal-argument] \\[universal-argument] \\[universal-argument]', clock in by using the last clock-out\ntime as the start time.  See `org-clock-continuously' to make this\nthe default behavior.\n\n(fn &optional SELECT START-TIME)" t)(autoload 'org-clock-toggle-auto-clockout "org-clock" nil t)(autoload 'org-clock-in-last "org-clock" "Clock in the last closed clocked item.\nWhen already clocking in, send a warning.\nWith a universal prefix argument, select the task you want to\nclock in from the last clocked in tasks.\nWith two universal prefix arguments, start clocking using the\nlast clock-out time, if any.\nWith three universal prefix arguments, interactively prompt\nfor a todo state to switch to, overriding the existing value\n`org-clock-in-switch-to-state'.\n\n(fn &optional ARG)" t)(autoload 'org-clock-out "org-clock" "Stop the currently running clock.\nThrow an error if there is no running clock and FAIL-QUIETLY is nil.\nWith a universal prefix, prompt for a state to switch the clocked out task\nto, overriding the existing value of `org-clock-out-switch-to-state'.\n\n(fn &optional SWITCH-TO-STATE FAIL-QUIETLY AT-TIME)" t)(autoload 'org-clock-cancel "org-clock" "Cancel the running clock by removing the start timestamp." t)(autoload 'org-clock-goto "org-clock" "Go to the currently clocked-in entry, or to the most recently clocked one.\nWith prefix arg SELECT, offer recently clocked tasks for selection.\n\n(fn &optional SELECT)" t)(autoload 'org-clock-sum-today "org-clock" "Sum the times for each subtree for today.\n\n(fn &optional HEADLINE-FILTER)")(autoload 'org-clock-sum "org-clock" "Sum the times for each subtree.\nPuts the resulting times in minutes as a text property on each headline.\nTSTART and TEND can mark a time range to be considered.\nHEADLINE-FILTER is a zero-arg function that, if specified, is called for\neach headline in the time range with point at the headline.  Headlines for\nwhich HEADLINE-FILTER returns nil are excluded from the clock summation.\nPROPNAME lets you set a custom text property instead of :org-clock-minutes.\n\n(fn &optional TSTART TEND HEADLINE-FILTER PROPNAME)")(autoload 'org-clock-display "org-clock" "Show subtree times in the entire buffer.\n\nBy default, show the total time for the range defined in\n`org-clock-display-default-range'.  With `\\[universal-argument]' prefix, show\nthe total time for today instead.\n\nWith `\\[universal-argument] \\[universal-argument]' prefix, use a custom range, entered at prompt.\n\nWith `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix, display the total time in the\necho area.\n\nUse `\\[org-clock-remove-overlays]' to remove the subtree times.\n\n(fn &optional ARG)" t)(autoload 'org-clock-remove-overlays "org-clock" "Remove the occur highlights from the buffer.\nIf NOREMOVE is nil, remove this function from the\n`before-change-functions' in the current buffer.\n\n(fn &optional BEG END NOREMOVE)" t)(autoload 'org-clock-out-if-current "org-clock" "Clock out if the current entry contains the running clock.\nThis is used to stop the clock after a TODO entry is marked DONE,\nand is only done if the variable `org-clock-out-when-done' is not nil.")(autoload 'org-clock-get-clocktable "org-clock" "Get a formatted clocktable with parameters according to PROPS.\nThe table is created in a temporary buffer, fully formatted and\nfontified, and then returned.\n\n(fn &rest PROPS)")(autoload 'org-clock-report "org-clock" "Update or create a table containing a report about clocked time.\n\nIf point is inside an existing clocktable block, update it.\nOtherwise, insert a new one.\n\nThe new table inherits its properties from the variable\n`org-clock-clocktable-default-properties'.\n\nThe scope of the clocktable, when not specified in the previous\nvariable, is `subtree' of the current heading when the function is\ncalled from inside heading, and `file' elsewhere (before the first\nheading).\n\nWhen called with a prefix argument, move to the first clock table\nin the buffer and update it.\n\n(fn &optional ARG)" t)(eval-after-load 'org '(progn (org-dynamic-block-define "clocktable" #'org-clock-report)))(autoload 'org-clocktable-shift "org-clock" "Try to shift the :block date of the clocktable at point.\nPoint must be in the #+BEGIN: line of a clocktable, or this function\nwill throw an error.\nDIR is a direction, a symbol `left', `right', `up', or `down'.\nBoth `left' and `down' shift the block toward the past, `up' and `right'\npush it toward the future.\nN is the number of shift steps to take.  The size of the step depends on\nthe currently selected interval size.\n\n(fn DIR N)")(autoload 'org-dblock-write:clocktable "org-clock" "Write the standard clocktable.\n\n(fn PARAMS)")(autoload 'org-clock-update-time-maybe "org-clock" "If this is a CLOCK line, update it and return t.\nOtherwise, return nil." t)(autoload 'org-columns-remove-overlays "org-colview" "Remove all currently active column overlays." t)(autoload 'org-columns-get-format-and-top-level "org-colview")(autoload 'org-columns "org-colview" "Turn on column view on an Org mode file.\n\nColumn view applies to the whole buffer if point is before the first\nheadline.  Otherwise, it applies to the first ancestor setting\n\"COLUMNS\" property.  If there is none, it defaults to the current\nheadline.  With a `\\[universal-argument]' prefix argument, GLOBAL,\nturn on column view for the whole buffer unconditionally.\n\nWhen COLUMNS-FMT-STRING is non-nil, use it as the column format.\n\n(fn &optional GLOBAL COLUMNS-FMT-STRING)" t)(autoload 'org-columns-compute "org-colview" "Summarize the values of PROPERTY hierarchically.\nAlso update existing values for PROPERTY according to the first\ncolumn specification.\n\n(fn PROPERTY)" t)(autoload 'org-dblock-write:columnview "org-colview" "Write the column view table.\n\nPARAMS is a property list of parameters:\n\n`:id' (mandatory)\n\n    The ID property of the entry where the columns view should be\n    built.  When the symbol `local', call locally.  When `global'\n    call column view with the cursor at the beginning of the\n    buffer (usually this means that the whole buffer switches to\n    column view).  When \"file:path/to/file.org\", invoke column\n    view at the start of that file.  Otherwise, the ID is located\n    using `org-id-find'.\n\n`:exclude-tags'\n\n    List of tags to exclude from column view table.\n\n`:format'\n\n    When non-nil, specify the column view format to use.\n\n`:hlines'\n\n    When non-nil, insert a hline before each item.  When\n    a number, insert a hline before each level inferior or equal\n    to that number.\n\n`:indent'\n\n    When non-nil, indent each ITEM field according to its level.\n\n`:match'\n\n    When set to a string, use this as a tags/property match filter.\n\n`:maxlevel'\n\n    When set to a number, don't capture headlines below this level.\n\n`:skip-empty-rows'\n\n    When non-nil, skip rows where all specifiers other than ITEM\n    are empty.\n\n`:vlines'\n\n    When non-nil, make each column a column group to enforce\n    vertical lines.\n\n(fn PARAMS)")(autoload 'org-columns-insert-dblock "org-colview" "Create a dynamic block capturing a column view table." t)(eval-after-load 'org '(progn (org-dynamic-block-define "columnview" #'org-columns-insert-dblock)))(autoload 'org-agenda-columns "org-colview" "Turn on or update column view in the agenda." t)(autoload 'org-check-version "org-compat" "Try very hard to provide sensible version strings." nil t)(autoload 'org-encrypt-entry "org-crypt" "Encrypt the content of the current headline." t)(autoload 'org-decrypt-entry "org-crypt" "Decrypt the content of the current headline." t)(autoload 'org-encrypt-entries "org-crypt" "Encrypt all top-level entries in the current buffer." t)(autoload 'org-decrypt-entries "org-crypt" "Decrypt all entries in the current buffer." t)(autoload 'org-crypt-use-before-save-magic "org-crypt" "Add a hook to automatically encrypt entries before a file is saved to disk.")(autoload 'org-cycle "org-cycle" "TAB-action and visibility cycling for Org mode.\n\nThis is the command invoked in Org mode by the `TAB' key.  Its main\npurpose is outline visibility cycling, but it also invokes other actions\nin special contexts.\n\nWhen this function is called with a `\\[universal-argument]' prefix, rotate the entire\nbuffer through 3 states (global cycling)\n  1. OVERVIEW: Show only top-level headlines.\n  2. CONTENTS: Show all headlines of all levels, but no body text.\n  3. SHOW ALL: Show everything.\n\nWith a `\\[universal-argument] \\[universal-argument]' prefix argument, switch to the startup visibility,\ndetermined by the variable `org-startup-folded', and by any VISIBILITY\nproperties in the buffer.\n\nWith a `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix argument, show the entire buffer, including\nany drawers.\n\nWhen inside a table, re-align the table and move to the next field.\n\nWhen point is at the beginning of a headline, rotate the subtree started\nby this line through 3 different states (local cycling)\n  1. FOLDED:   Only the main headline is shown.\n  2. CHILDREN: The main headline and the direct children are shown.\n               From this state, you can move to one of the children\n               and zoom in further.\n  3. SUBTREE:  Show the entire subtree, including body text.\nIf there is no subtree, switch directly from CHILDREN to FOLDED.\n\nWhen point is at the beginning of an empty headline and the variable\n`org-cycle-level-after-item/entry-creation' is set, cycle the level\nof the headline by demoting and promoting it to likely levels.  This\nspeeds up creation document structure by pressing `TAB' once or several\ntimes right after creating a new headline.\n\nWhen there is a numeric prefix, go up to a heading with level ARG, do\na `show-subtree' and return to the previous cursor position.  If ARG\nis negative, go up that many levels.\n\nWhen point is not at the beginning of a headline, execute the global\nbinding for `TAB', which is re-indenting the line.  See the option\n`org-cycle-emulate-tab' for details.\n\nAs a special case, if point is at the very beginning of the buffer, if\nthere is no headline there, and if the variable `org-cycle-global-at-bob'\nis non-nil, this function acts as if called with prefix argument (`\\[universal-argument] TAB',\nsame as `S-TAB') also when called without prefix argument.\n\n(fn &optional ARG)" t)(autoload 'org-cycle-global "org-cycle" "Cycle the global visibility.  For details see `org-cycle'.\nWith `\\[universal-argument]' prefix ARG, switch to startup visibility.\nWith a numeric prefix, show all headlines up to that level.\n\n(fn &optional ARG)" t)(autoload 'org-datetree-find-date-create "org-datetree" "Find or create a day entry for date D.\nIf KEEP-RESTRICTION is non-nil, do not widen the buffer.\nWhen it is nil, the buffer will be widened to make sure an existing date\ntree can be found.  If it is the symbol `subtree-at-point', then the tree\nwill be built under the headline at point.\n\n(fn D &optional KEEP-RESTRICTION)")(autoload 'org-datetree-find-month-create "org-datetree" "Find or create a month entry for date D.\nCompared to `org-datetree-find-date-create' this function creates\nentries grouped by month instead of days.\nIf KEEP-RESTRICTION is non-nil, do not widen the buffer.\nWhen it is nil, the buffer will be widened to make sure an existing date\ntree can be found.  If it is the symbol `subtree-at-point', then the tree\nwill be built under the headline at point.\n\n(fn D &optional KEEP-RESTRICTION)")(autoload 'org-datetree-find-iso-week-create "org-datetree" "Find or create an ISO week entry for date D.\nCompared to `org-datetree-find-date-create' this function creates\nentries ordered by week instead of months.\nWhen it is nil, the buffer will be widened to make sure an existing date\ntree can be found.  If it is the symbol `subtree-at-point', then the tree\nwill be built under the headline at point.\n\n(fn D &optional KEEP-RESTRICTION)")(autoload 'org-duration-set-regexps "org-duration" "Set duration related regexps." t)(autoload 'org-duration-p "org-duration" "Non-nil when string S is a time duration.\n\n(fn S)")(autoload 'org-duration-to-minutes "org-duration" "Return number of minutes of DURATION string.\n\nWhen optional argument CANONICAL is non-nil, ignore\n`org-duration-units' and use standard time units value.\n\nA bare number is translated into minutes.  The empty string is\ntranslated into 0.0.\n\nReturn value as a float.  Raise an error if duration format is\nnot recognized.\n\n(fn DURATION &optional CANONICAL)")(autoload 'org-duration-from-minutes "org-duration" "Return duration string for a given number of MINUTES.\n\nFormat duration according to `org-duration-format' or FMT, when\nnon-nil.\n\nWhen optional argument CANONICAL is non-nil, ignore\n`org-duration-units' and use standard time units value.\n\nRaise an error if expected format is unknown.\n\n(fn MINUTES &optional FMT CANONICAL)")(autoload 'org-duration-h:mm-only-p "org-duration" "Non-nil when every duration in TIMES has \"H:MM\" or \"H:MM:SS\" format.\n\nTIMES is a list of duration strings.\n\nReturn nil if any duration is expressed with units, as defined in\n`org-duration-units'.  Otherwise, if any duration is expressed\nwith \"H:MM:SS\" format, return `h:mm:ss'.  Otherwise, return\n`h:mm'.\n\n(fn TIMES)")(autoload 'org-element-update-syntax "org-element" "Update parser internals." t)(autoload 'org-element-interpret-data "org-element" "Interpret DATA as Org syntax.\nDATA is a parse tree, an element, an object or a secondary string\nto interpret.  Return Org syntax as a string.\n\n(fn DATA)")(defvar org-element-use-cache t "Non-nil when Org parser should cache its results.")(autoload 'org-element-cache-reset "org-element" "Reset cache in current buffer.\nWhen optional argument ALL is non-nil, reset cache in all Org\nbuffers.\nWhen optional argument NO-PERSISTENCE is non-nil, do not try to update\nthe cache persistence in the buffer.\n\n(fn &optional ALL NO-PERSISTENCE)" t)(autoload 'org-element-cache-store-key "org-element" "Store KEY with VALUE associated with EPOM - point, marker, or element.\nThe key can be retrieved as long as the element (provided or at point)\ncontents is not modified.\nIf optional argument ROBUST is non-nil, the key will be retained even\nwhen the contents (children) of current element are modified.  Only\nnon-robust element modifications (affecting the element properties\nother then begin/end boundaries) will invalidate the key then.\n\n(fn EPOM KEY VALUE &optional ROBUST)")(autoload 'org-element-cache-get-key "org-element" "Get KEY associated with EPOM - point, marker, or element.\nReturn DEFAULT when KEY is not associated with EPOM.\nThe key can be retrieved as long as the element (provided or at point)\ncontents is not modified.\n\n(fn EPOM KEY &optional DEFAULT)")(autoload 'org-element-cache-refresh "org-element" "Refresh cache at position POS.\n\n(fn POS)")(autoload 'org-element-cache-map "org-element" "Map all elements in current buffer with FUNC according to GRANULARITY.\nCollect non-nil return values into result list.\n\nFUNC should accept a single argument - the element.\n\nFUNC can modify the buffer, but doing so may reduce performance.  If\nbuffer is modified, the mapping will continue from an element starting\nafter the last mapped element.  If the last mapped element is deleted,\nthe subsequent element will be skipped as it cannot be distinguished\ndeterministically from a changed element.  If FUNC is expected to\ndelete the element, it should directly set the value of\n`org-element-cache-map-continue-from' to force `org-element-cache-map'\ncontinue from the right point in buffer.\n\nIf some elements are not yet in cache, they will be added.\n\nGRANULARITY can be `headline', `headline+inlinetask'\n`greater-element', or `element'.  The default is\n`headline+inlinetask'.  `object' granularity is not supported.\n\nRESTRICT-ELEMENTS is a list of element types to be mapped over.\n\nNEXT-RE is a regexp used to search next candidate match when FUNC\nreturns non-nil and to search the first candidate match.  FAIL-RE is a\nregexp used to search next candidate match when FUNC returns nil.  The\nmapping will continue starting from headline at the RE match.\n\nFROM-POS and TO-POS are buffer positions.  When non-nil, they bound the\nmapped elements to elements starting at of after FROM-POS but before\nTO-POS.\n\nAFTER-ELEMENT, when non-nil, bounds the mapping to all the elements\nafter AFTER-ELEMENT (i.e. if AFTER-ELEMENT is a headline section, we\nmap all the elements starting from first element inside section, but\nnot including the section).\n\nLIMIT-COUNT limits mapping to that many first matches where FUNC\nreturns non-nil.\n\nNARROW controls whether current buffer narrowing should be preserved.\n\nThis function does a subset of what `org-element-map' does, but with\nmuch better performance.  Cached elements are supplied as the single\nargument of FUNC.  Changes to elements made in FUNC will also alter\nthe cache.\n\n(fn FUNC &key (GRANULARITY \\='headline+inlinetask) RESTRICT-ELEMENTS NEXT-RE FAIL-RE FROM-POS (TO-POS (point-max-marker)) AFTER-ELEMENT LIMIT-COUNT NARROW)")(autoload 'org-element-at-point "org-element" "Determine closest element around point or EPOM.\n\nWhen EPOM is an element, return it immediately.\nOtherwise, determine element at EPOM marker or position.\n\nOnly check cached element when CACHED-ONLY is non-nil and return nil\nunconditionally when element at EPOM is not in cache.\n\nReturn value is a list like (TYPE PROPS) where TYPE is the type\nof the element and PROPS a plist of properties associated to the\nelement.\n\nPossible types are defined in `org-element-all-elements'.\nProperties depend on element or object type, but always include\n`:begin', `:end', and `:post-blank' properties.\n\nAs a special case, if point is at the very beginning of the first\nitem in a list or sub-list, returned element will be that list\ninstead of the item.  Likewise, if point is at the beginning of\nthe first row of a table, returned element will be the table\ninstead of the first row.\n\nWhen point is at the end of the buffer, return the innermost\nelement ending there.\n\nThis function may modify the match data.\n\n(fn &optional EPOM CACHED-ONLY)")(defsubst org-element-at-point-no-context (&optional pom) "Quickly find element at point or POM.\n\nIt is a faster version of `org-element-at-point' that is not\nguaranteed to return cached element.  `:parent' element may be\ndeferred and slow to retrieve." (or (org-element-at-point pom 'cached-only) (org-element-with-disabled-cache (org-element-at-point pom))))(autoload 'org-element-context "org-element" "Return smallest element or object around point.\n\nReturn value is a list like (TYPE PROPS) where TYPE is the type\nof the element or object and PROPS a plist of properties\nassociated to it.\n\nPossible types are defined in `org-element-all-elements' and\n`org-element-all-objects'.  Properties depend on element or\nobject type, but always include `:begin', `:end', `:parent' and\n`:post-blank'.\n\nAs a special case, if point is right after an object and not at\nthe beginning of any other object, return that object.\n\nOptional argument ELEMENT, when non-nil, is the closest element\ncontaining point, as returned by `org-element-at-point'.\nProviding it allows for quicker computation.\n\nThis function may modify match data.\n\n(fn &optional ELEMENT)")(autoload 'org-feed-update-all "org-feed" "Get inbox items from all feeds in `org-feed-alist'." t)(autoload 'org-feed-update "org-feed" "Get inbox items from FEED.\nFEED can be a string with an association in `org-feed-alist', or\nit can be a list structured like an entry in `org-feed-alist'.\n\n(fn FEED &optional RETRIEVE-ONLY)" t)(autoload 'org-feed-goto-inbox "org-feed" "Go to the inbox that captures the feed named FEED.\n\n(fn FEED)" t)(autoload 'org-feed-show-raw-feed "org-feed" "Show the raw feed buffer of a feed.\n\n(fn FEED)" t)(autoload 'org-footnote-action "org-footnote" "Do the right thing for footnotes.\n\nWhen at a footnote reference, jump to the definition.\n\nWhen at a definition, jump to the references if they exist, offer\nto create them otherwise.\n\nWhen neither at definition or reference, create a new footnote,\ninteractively if possible.\n\nWith prefix arg SPECIAL, or when no footnote can be created,\noffer additional commands in a menu.\n\n(fn &optional SPECIAL)" t)(autoload 'org-goto-location "org-goto" "Let the user select a location in current buffer.\nThis function uses a recursive edit.  It returns the selected\nposition or nil.\n\n(fn &optional BUF HELP)")(autoload 'org-goto "org-goto" "Look up a different location in the current file, keeping current visibility.\n\nWhen you want look-up or go to a different location in a\ndocument, the fastest way is often to fold the entire buffer and\nthen dive into the tree.  This method has the disadvantage, that\nthe previous location will be folded, which may not be what you\nwant.\n\nThis command works around this by showing a copy of the current\nbuffer in an indirect buffer, in overview mode.  You can dive\ninto the tree in that copy, use `org-occur' and incremental search\nto find a location.  When pressing RET or `Q', the command\nreturns to the original buffer in which the visibility is still\nunchanged.  After RET it will also jump to the location selected\nin the indirect buffer and expose the headline hierarchy above.\n\nWith a prefix argument, use the alternative interface: e.g., if\n`org-goto-interface' is `outline' use `outline-path-completion'.\n\n(fn &optional ALTERNATIVE-INTERFACE)" t)(autoload 'org-id-get-create "org-id" "Create an ID for the current entry and return it.\nIf the entry already has an ID, just return it.\nWith optional argument FORCE, force the creation of a new ID.\n\n(fn &optional FORCE)" t)(autoload 'org-id-copy "org-id" "Copy the ID of the entry at point to the kill ring.\nCreate an ID if necessary." t)(autoload 'org-id-get "org-id" "Get the ID property of the entry at EPOM.\nEPOM is an element, marker, or buffer position.\nIf EPOM is nil, refer to the entry at point.\nIf the entry does not have an ID, the function returns nil.\nHowever, when CREATE is non-nil, create an ID if none is present already.\nPREFIX will be passed through to `org-id-new'.\nIn any case, the ID of the entry is returned.\n\n(fn &optional EPOM CREATE PREFIX)")(autoload 'org-id-get-with-outline-path-completion "org-id" "Use `outline-path-completion' to retrieve the ID of an entry.\nTARGETS may be a setting for `org-refile-targets' to define\neligible headlines.  When omitted, all headlines in the current\nfile are eligible.  This function returns the ID of the entry.\nIf necessary, the ID is created.\n\n(fn &optional TARGETS)")(autoload 'org-id-get-with-outline-drilling "org-id" "Use an outline-cycling interface to retrieve the ID of an entry.\nThis only finds entries in the current buffer, using `org-goto-location'.\nIt returns the ID of the entry.  If necessary, the ID is created.")(autoload 'org-id-goto "org-id" "Switch to the buffer containing the entry with id ID.\nMove the cursor to that entry in that buffer.\n\n(fn ID)" t)(autoload 'org-id-find "org-id" "Return the location of the entry with the id ID.\nThe return value is a cons cell (file-name . position), or nil\nif there is no entry with that ID.\nWith optional argument MARKERP, return the position as a new marker.\n\n(fn ID &optional MARKERP)")(autoload 'org-id-new "org-id" "Create a new globally unique ID.\n\nAn ID consists of two parts separated by a colon:\n- a prefix\n- a unique part that will be created according to `org-id-method'.\n\nPREFIX can specify the prefix, the default is given by the variable\n`org-id-prefix'.  However, if PREFIX is the symbol `none', don't use any\nprefix even if `org-id-prefix' specifies one.\n\nSo a typical ID could look like \"Org:4nd91V40HI\".\n\n(fn &optional PREFIX)")(autoload 'org-id-update-id-locations "org-id" "Scan relevant files for IDs.\nStore the relation between files and corresponding IDs.\nThis will scan all agenda files, all associated archives, all open Org\nfiles, and all files currently mentioned in `org-id-locations'.\nWhen FILES is given, scan also these files.\nIf SILENT is non-nil, messages are suppressed.\n\n(fn &optional FILES SILENT)" t)(autoload 'org-id-find-id-file "org-id" "Query the id database for the file in which ID is located.\n\n(fn ID)")(autoload 'org-id-store-link "org-id" "Store a link to the current entry, using its ID.\n\nIf before first heading store first title-keyword as description\nor filename if no title." t)(autoload 'org-indent-mode "org-indent" "When active, indent text according to outline structure.\n\nInternally this works by adding `line-prefix' and `wrap-prefix'\nproperties, after each buffer modification, on the modified zone.\n\nThe process is synchronous.  Though, initial indentation of\nbuffer, which can take a few seconds on large buffers, is done\nduring idle time.\n\nThis is a minor mode.  If called interactively, toggle the\n`Org-Indent mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `org-indent-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-babel-describe-bindings "org-keys" "Describe all keybindings behind `org-babel-key-prefix'." t)(autoload 'org-lint-add-checker "org-lint" "Add a new checker for linter.\n\nNAME is a unique check identifier, as a non-nil symbol.  SUMMARY\nis a short description of the check, as a string.\n\nThe check is done calling the function FUN with one mandatory\nargument, the parse tree describing the current Org buffer.  Such\nfunction calls are wrapped within a `save-excursion' and point is\nalways at `point-min'.  Its return value has to be an\nalist (POSITION MESSAGE) where POSITION refer to the buffer\nposition of the error, as an integer, and MESSAGE is a one-line\nstring describing the error.\n\nOptional argument PROPS provides additional information about the\nchecker.  Currently, two properties are supported:\n\n  `:categories'\n\n     Categories relative to the check, as a list of symbol.  They\n     are used for filtering when calling `org-lint'.  Checkers\n     not explicitly associated to a category are collected in the\n     `default' one.\n\n  `:trust'\n\n    The trust level one can have in the check.  It is either\n    `low' or `high', depending on the heuristics implemented and\n    the nature of the check.  This has an indicative value only\n    and is displayed along reports.\n\n(fn NAME SUMMARY FUN &rest PROPS)")(function-put 'org-lint-add-checker 'lisp-indent-function 1)(autoload 'org-lint "org-lint" "Check current Org buffer for syntax mistakes.\n\nBy default, run all checkers.  With a `\\[universal-argument]' prefix ARG, select one\ncategory of checkers only.  With a `\\[universal-argument] \\[universal-argument]' prefix, run one precise\nchecker by its name.\n\nARG can also be a list of checker names, as symbols, to run.\n\n(fn &optional ARG)" t)(autoload 'org-list-checkbox-radio-mode "org-list" "When turned on, use list checkboxes as radio buttons.\n\nThis is a minor mode.  If called interactively, toggle the\n`Org-List-Checkbox-Radio mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `org-list-checkbox-radio-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-load-noerror-mustsuffix "org-macs" "Load FILE with optional arguments NOERROR and MUSTSUFFIX.\n\n(fn FILE)" nil t)(autoload 'org-mobile-push "org-mobile" "Push the current state of Org affairs to the target directory.\nThis will create the index file, copy all agenda files there, and also\ncreate all custom agenda views, for upload to the mobile phone." t)(autoload 'org-mobile-pull "org-mobile" "Pull the contents of `org-mobile-capture-file' and integrate them.\nApply all flagged actions, flag entries to be flagged and then call an\nagenda view showing the flagged items." t)(autoload 'org-num-default-format "org-num" "Default numbering display function.\nNUMBERING is a list of numbers.\n\n(fn NUMBERING)")(autoload 'org-num-mode "org-num" "Dynamic numbering of headlines in an Org buffer.\n\nThis is a minor mode.  If called interactively, toggle the\n`Org-Num mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `org-num-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-plot/gnuplot "org-plot" "Plot table using gnuplot.  Gnuplot options can be specified with PARAMS.\nIf not given options will be taken from the +PLOT\nline directly before or after the table.\n\n(fn &optional PARAMS)" t)(autoload 'org-refile-copy "org-refile" "Like `org-refile', but preserve the refiled subtree." t)(autoload 'org-refile-reverse "org-refile" "Refile while temporarily toggling `org-reverse-note-order'.\nSo if `org-refile' would append the entry as the last entry under\nthe target heading, `org-refile-reverse' will prepend it as the\nfirst entry, and vice-versa.\n\n(fn &optional ARG DEFAULT-BUFFER RFLOC MSG)" t)(autoload 'org-refile "org-refile" "Move the entry or entries at point to another heading.\n\nThe list of target headings is compiled using the information in\n`org-refile-targets', which see.\n\nAt the target location, the entry is filed as a subitem of the\ntarget heading.  Depending on `org-reverse-note-order', the new\nsubitem will either be the first or the last subitem.\n\nIf there is an active region, all entries in that region will be\nrefiled.  However, the region must fulfill the requirement that\nthe first heading sets the top-level of the moved text.\n\nWith a `\\[universal-argument]' ARG, the command will only visit the target location\nand not actually move anything.\n\nWith a prefix `\\[universal-argument] \\[universal-argument]', go to the location where the last\nrefiling operation has put the subtree.\n\nWith a numeric prefix argument of `2', refile to the running clock.\n\nWith a numeric prefix argument of `3', emulate `org-refile-keep'\nbeing set to t and copy to the target location, don't move it.\nBeware that keeping refiled entries may result in duplicated ID\nproperties.\n\nRFLOC can be a refile location obtained in a different way.  It\nshould be a list with the following 4 elements:\n\n1. Name - an identifier for the refile location, typically the\nheadline text\n2. File - the file the refile location is in\n3. nil - used for generating refile location candidates, not\nneeded when passing RFLOC\n4. Position - the position in the specified file of the\nheadline to refile under\n\nMSG is a string to replace \"Refile\" in the default prompt with\nanother verb.  E.g. `org-refile-copy' sets this parameter to \"Copy\".\n\nSee also `org-refile-use-outline-path'.\n\nIf you are using target caching (see `org-refile-use-cache'), you\nhave to clear the target cache in order to find new targets.\nThis can be done with a `0' prefix (`C-0 C-c C-w') or a triple\nprefix argument (`C-u C-u C-u C-c C-w').\n\n(fn &optional ARG DEFAULT-BUFFER RFLOC MSG)" t)(autoload 'org-table-header-line-mode "org-table" "Display the first row of the table at point in the header line.\n\nThis is a minor mode.  If called interactively, toggle the\n`Org-Table-Header-Line mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `org-table-header-line-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-table-create-with-table.el "org-table" "Use the table.el package to insert a new table.\nIf there is already a table at point, convert between Org tables\nand table.el tables." t)(autoload 'org-table-create-or-convert-from-region "org-table" "Convert region to table, or create an empty table.\nIf there is an active region, convert it to a table, using the function\n`org-table-convert-region'.  See the documentation of that function\nto learn how the prefix argument is interpreted to determine the field\nseparator.\nIf there is no such region, create an empty table with `org-table-create'.\n\n(fn ARG)" t)(autoload 'org-table-create "org-table" "Query for a size and insert a table skeleton.\nSIZE is a string Columns x Rows like for example \"3x2\".\n\n(fn &optional SIZE)" t)(autoload 'org-table-convert-region "org-table" "Convert region to a table.\n\nThe region goes from BEG0 to END0, but these borders will be moved\nslightly, to make sure a beginning of line in the first line is\nincluded.\n\nThrow an error when the region has more than\n`org-table-convert-region-max-lines' lines.\n\nSEPARATOR specifies the field separator in the lines.  It can have the\nfollowing values:\n\n(4)     Use the comma as a field separator\n(16)    Use a TAB as field separator\n(64)    Prompt for a regular expression as field separator\ninteger  When a number, use that many spaces, or a TAB, as field separator\nregexp   When a regular expression, use it to match the separator\nnil      When nil, the command tries to be smart and figure out the\n         separator in the following way:\n         - when each line contains a TAB, assume TAB-separated material\n         - when each line contains a comma, assume CSV material\n         - else, assume one or more SPACE characters as separator.\n\n(fn BEG0 END0 &optional SEPARATOR)" t)(autoload 'org-table-import "org-table" "Import FILE as a table.\n\nThe command tries to be smart and figure out the separator in the\nfollowing way:\n\n- when each line contains a TAB, assume TAB-separated material;\n- when each line contains a comma, assume CSV material;\n- else, assume one or more SPACE characters as separator.\n\nWhen non-nil, SEPARATOR specifies the field separator in the\nlines.  It can have the following values:\n\n- (4)     Use the comma as a field separator.\n- (16)    Use a TAB as field separator.\n- (64)    Prompt for a regular expression as field separator.\n- integer When a number, use that many spaces, or a TAB, as field separator.\n- regexp  When a regular expression, use it to match the separator.\n\n(fn FILE SEPARATOR)" t)(autoload 'org-table-begin "org-table" "Find the beginning of the table and return its position.\nWith a non-nil optional argument TABLE-TYPE, return the beginning\nof a table.el-type table.  This function assumes point is on\na table.\n\n(fn &optional TABLE-TYPE)")(autoload 'org-table-end "org-table" "Find the end of the table and return its position.\nWith a non-nil optional argument TABLE-TYPE, return the end of\na table.el-type table.  This function assumes point is on\na table.\n\n(fn &optional TABLE-TYPE)")(autoload 'org-table-next-field "org-table" "Go to the next field in the current table, creating new lines as needed.\nBefore doing so, re-align the table if necessary." t)(autoload 'org-table-previous-field "org-table" "Go to the previous field in the table.\nBefore doing so, re-align the table if necessary." t)(autoload 'org-table-next-row "org-table" "Go to the next row (same column) in the current table.\nBefore doing so, re-align the table if necessary." t)(autoload 'org-table-blank-field "org-table" "Blank the current table field or active region." t)(autoload 'org-table-field-info "org-table" "Show info about the current field, and highlight any reference at point.\n\n(fn ARG)" t)(autoload 'org-table-goto-column "org-table" "Move the cursor to the Nth column in the current table line.\nWith optional argument ON-DELIM, stop with point before the left delimiter\nof the field.\nIf there are less than N fields, just go to after the last delimiter.\nHowever, when FORCE is non-nil, create new columns if necessary.\n\n(fn N &optional ON-DELIM FORCE)" t)(autoload 'org-table-insert-column "org-table" "Insert a new column into the table." t)(autoload 'org-table-move-cell-up "org-table" "Move a single cell up in a table.\nSwap with anything in target cell." t)(autoload 'org-table-move-cell-down "org-table" "Move a single cell down in a table.\nSwap with anything in target cell." t)(autoload 'org-table-move-cell-left "org-table" "Move a single cell left in a table.\nSwap with anything in target cell." t)(autoload 'org-table-move-cell-right "org-table" "Move a single cell right in a table.\nSwap with anything in target cell." t)(autoload 'org-table-delete-column "org-table" "Delete a column from the table." t)(autoload 'org-table-move-column-right "org-table" "Move column to the right." t)(autoload 'org-table-move-column-left "org-table" "Move column to the left." t)(autoload 'org-table-move-column "org-table" "Move the current column to the right.  With arg LEFT, move to the left.\n\n(fn &optional LEFT)" t)(autoload 'org-table-move-row-down "org-table" "Move table row down." t)(autoload 'org-table-move-row-up "org-table" "Move table row up." t)(autoload 'org-table-move-row "org-table" "Move the current table line down.  With arg UP, move it up.\n\n(fn &optional UP)" t)(autoload 'org-table-insert-row "org-table" "Insert a new row above the current line into the table.\nWith prefix ARG, insert below the current line.\n\n(fn &optional ARG)" t)(autoload 'org-table-insert-hline "org-table" "Insert a horizontal-line below the current line into the table.\nWith prefix ABOVE, insert above the current line.\n\n(fn &optional ABOVE)" t)(autoload 'org-table-hline-and-move "org-table" "Insert a hline and move to the row below that line.\n\n(fn &optional SAME-COLUMN)" t)(autoload 'org-table-kill-row "org-table" "Delete the current row or horizontal line from the table." t)(autoload 'org-table-cut-region "org-table" "Copy region in table to the clipboard and blank all relevant fields.\nIf there is no active region, use just the field at point.\n\n(fn BEG END)" t)(autoload 'org-table-copy-down "org-table" "Copy the value of the current field one row below.\n\nIf the field at the cursor is empty, copy the content of the\nnearest non-empty field above.  With argument N, use the Nth\nnon-empty field.\n\nIf the current field is not empty, it is copied down to the next\nrow, and the cursor is moved with it.  Therefore, repeating this\ncommand causes the column to be filled row-by-row.\n\nIf the variable `org-table-copy-increment' is non-nil and the\nfield is a number, a timestamp, or is either prefixed or suffixed\nwith a number, it will be incremented while copying.  By default,\nincrement by the difference between the value in the current\nfield and the one in the field above, if any.  To increment using\na fixed integer, set `org-table-copy-increment' to a number.  In\nthe case of a timestamp, increment by days.\n\nHowever, when N is 0, do not increment the field at all.\n\n(fn N)" t)(autoload 'org-table-copy-region "org-table" "Copy rectangular region in table to clipboard.\nA special clipboard is used which can only be accessed with\n`org-table-paste-rectangle'.  Return the region copied, as a list\nof lists of fields.\n\n(fn BEG END &optional CUT)" t)(autoload 'org-table-paste-rectangle "org-table" "Paste a rectangular region into a table.\nThe upper right corner ends up in the current field.  All involved fields\nwill be overwritten.  If the rectangle does not fit into the present table,\nthe table is enlarged as needed.  The process ignores horizontal separator\nlines." t)(autoload 'org-table-edit-field "org-table" "Edit table field in a different window.\nThis is mainly useful for fields that contain hidden parts.\n\nWhen called with a `\\[universal-argument]' prefix, just make the full field\nvisible so that it can be edited in place.\n\nWhen called with a `\\[universal-argument] \\[universal-argument]' prefix, toggle `org-table-follow-field-mode'.\n\n(fn ARG)" t)(autoload 'org-table-get-stored-formulas "org-table" "Return an alist with the stored formulas directly after current table.\nBy default, only return active formulas, i.e., formulas located\non the first line after the table.  However, if optional argument\nLOCATION is a buffer position, consider the formulas there.\n\n(fn &optional NOERROR LOCATION)")(autoload 'org-table-maybe-eval-formula "org-table" "Check if the current field starts with \"=\" or \":=\".\nIf yes, store the formula and apply it.")(autoload 'org-table-rotate-recalc-marks "org-table" "Rotate the recalculation mark in the first column.\nIf in any row, the first field is not consistent with a mark,\ninsert a new column for the markers.\nWhen there is an active region, change all the lines in the region,\nafter prompting for the marking character.\nAfter each change, a message will be displayed indicating the meaning\nof the new mark.\n\n(fn &optional NEWCHAR)" t)(autoload 'org-table-maybe-recalculate-line "org-table" "Recompute the current line if marked for it, and if we haven't just done it." t)(autoload 'org-table-eval-formula "org-table" "Replace the table field value at the cursor by the result of a calculation.\n\nIn a table, this command replaces the value in the current field with the\nresult of a formula.  It also installs the formula as the \"current\" column\nformula, by storing it in a special line below the table.  When called\nwith a `\\[universal-argument]' prefix the formula is installed as a field formula.\n\nWhen called with a `\\[universal-argument] \\[universal-argument]' prefix, insert the active equation for the field\nback into the current field, so that it can be edited there.  This is useful\nin order to use \\<org-table-fedit-map>`\\[org-table-show-reference]' to check the referenced fields.\n\nWhen called, the command first prompts for a formula, which is read in\nthe minibuffer.  Previously entered formulas are available through the\nhistory list, and the last used formula is offered as a default.\nThese stored formulas are adapted correctly when moving, inserting, or\ndeleting columns with the corresponding commands.\n\nThe formula can be any algebraic expression understood by the Calc package.\nFor details, see the Org mode manual.\n\nThis function can also be called from Lisp programs and offers\nadditional arguments: EQUATION can be the formula to apply.  If this\nargument is given, the user will not be prompted.\n\nSUPPRESS-ALIGN is used to speed-up recursive calls by by-passing\nunnecessary aligns.\n\nSUPPRESS-CONST suppresses the interpretation of constants in the\nformula, assuming that this has been done already outside the\nfunction.\n\nSUPPRESS-STORE means the formula should not be stored, either\nbecause it is already stored, or because it is a modified\nequation that should not overwrite the stored one.\n\nSUPPRESS-ANALYSIS prevents analyzing the table and checking\nlocation of point.\n\n(fn &optional ARG EQUATION SUPPRESS-ALIGN SUPPRESS-CONST SUPPRESS-STORE SUPPRESS-ANALYSIS)" t)(autoload 'org-table-recalculate "org-table" "Recalculate the current table line by applying all stored formulas.\n\nWith prefix arg ALL, do this for all lines in the table.\n\nWhen called with a `\\[universal-argument] \\[universal-argument]' prefix, or if ALL is the symbol `iterate',\nrecompute the table until it no longer changes.\n\nIf NOALIGN is not nil, do not re-align the table after the computations\nare done.  This is typically used internally to save time, if it is\nknown that the table will be realigned a little later anyway.\n\n(fn &optional ALL NOALIGN)" t)(autoload 'org-table-iterate "org-table" "Recalculate the table until it does not change anymore.\nThe maximum number of iterations is 10, but you can choose a different value\nwith the prefix ARG.\n\n(fn &optional ARG)" t)(autoload 'org-table-recalculate-buffer-tables "org-table" "Recalculate all tables in the current buffer." t)(autoload 'org-table-iterate-buffer-tables "org-table" "Iterate all tables in the buffer, to converge inter-table dependencies." t)(autoload 'org-table-edit-formulas "org-table" "Edit the formulas of the current table in a separate buffer." t)(autoload 'org-table-toggle-coordinate-overlays "org-table" "Toggle the display of Row/Column numbers in tables." t)(autoload 'org-table-toggle-formula-debugger "org-table" "Toggle the formula debugger in tables." t)(autoload 'org-table-toggle-column-width "org-table" "Shrink or expand current column in an Org table.\n\nIf a width cookie specifies a width W for the column, the first\nW visible characters are displayed.  Otherwise, the column is\nshrunk to a single character.\n\nWhen point is before the first column or after the last one, ask\nfor the columns to shrink or expand, as a list of ranges.\nA column range can be one of the following patterns:\n\n  N    column N only\n  N-M  every column between N and M (both inclusive)\n  N-   every column between N (inclusive) and the last column\n  -M   every column between the first one and M (inclusive)\n  -    every column\n\nWhen optional argument ARG is a string, use it as white space\nseparated list of column ranges.\n\nWhen called with `\\[universal-argument]' prefix, call `org-table-shrink', i.e.,\nshrink columns with a width cookie and expand the others.\n\nWhen called with `\\[universal-argument] \\[universal-argument]' prefix, expand all columns.\n\n(fn &optional ARG)" t)(autoload 'org-table-shrink "org-table" "Shrink all columns with a width cookie in the table at point.\n\nColumns without a width cookie are expanded.\n\nOptional arguments BEGIN and END, when non-nil, specify the\nbeginning and end position of the current table.\n\n(fn &optional BEGIN END)" t)(autoload 'org-table-expand "org-table" "Expand all columns in the table at point.\nOptional arguments BEGIN and END, when non-nil, specify the\nbeginning and end position of the current table.\n\n(fn &optional BEGIN END)" t)(autoload 'org-table-map-tables "org-table" "Apply function F to the start of all tables in the buffer.\n\n(fn F &optional QUIETLY)")(autoload 'org-table-export "org-table" "Export table to a file, with configurable format.\nSuch a file can be imported into usual spreadsheet programs.\n\nFILE can be the output file name.  If not given, it will be taken\nfrom a TABLE_EXPORT_FILE property in the current entry or higher\nup in the hierarchy, or the user will be prompted for a file\nname.  FORMAT can be an export format, of the same kind as it\nused when `-mode' sends a table in a different format.\n\nThe command suggests a format depending on TABLE_EXPORT_FORMAT,\nwhether it is set locally or up in the hierarchy, then on the\nextension of the given file name, and finally on the variable\n`org-table-export-default-format'.\n\n(fn &optional FILE FORMAT)" t)(autoload 'org-table--align-field "org-table" "Format FIELD according to column WIDTH and alignment ALIGN.\nFIELD is a string.  WIDTH is a number.  ALIGN is either \"c\",\n\"l\" or\"r\".\n\n(fn FIELD WIDTH ALIGN)")(autoload 'org-table-justify-field-maybe "org-table" "Justify the current field, text to left, number to right.\nOptional argument NEW may specify text to replace the current field content.\n\n(fn &optional NEW)")(autoload 'org-table-sort-lines "org-table" "Sort table lines according to the column at point.\n\nThe position of point indicates the column to be used for\nsorting, and the range of lines is the range between the nearest\nhorizontal separator lines, or the entire table of no such lines\nexist.  If point is before the first column, you will be prompted\nfor the sorting column.  If there is an active region, the mark\nspecifies the first line and the sorting column, while point\nshould be in the last line to be included into the sorting.\n\nThe command then prompts for the sorting type which can be\nalphabetically, numerically, or by time (as given in a time stamp\nin the field, or as a HH:MM value).  Sorting in reverse order is\nalso possible.\n\nWith prefix argument WITH-CASE, alphabetic sorting will be case-sensitive\nif the locale allows for it.\n\nIf SORTING-TYPE is specified when this function is called from a Lisp\nprogram, no prompting will take place.  SORTING-TYPE must be a character,\nany of (?a ?A ?n ?N ?t ?T ?f ?F) where the capital letters indicate that\nsorting should be done in reverse order.\n\nIf the SORTING-TYPE is ?f or ?F, then GETKEY-FUNC specifies\na function to be called to extract the key.  It must return a value\nthat is compatible with COMPARE-FUNC, the function used to compare\nentries.\n\nA non-nil value for INTERACTIVE? is used to signal that this\nfunction is being called interactively.\n\n(fn &optional WITH-CASE SORTING-TYPE GETKEY-FUNC COMPARE-FUNC INTERACTIVE?)" t)(autoload 'org-table-wrap-region "org-table" "Wrap several fields in a column like a paragraph.\nThis is useful if you'd like to spread the contents of a field over several\nlines, in order to keep the table compact.\n\nIf there is an active region, and both point and mark are in the same column,\nthe text in the column is wrapped to minimum width for the given number of\nlines.  Generally, this makes the table more compact.  A prefix ARG may be\nused to change the number of desired lines.  For example, `C-2 \\[org-table-wrap-region]'\nformats the selected text to two lines.  If the region was longer than two\nlines, the remaining lines remain empty.  A negative prefix argument reduces\nthe current number of lines by that amount.  The wrapped text is pasted back\ninto the table.  If you formatted it to more lines than it was before, fields\nfurther down in the table get overwritten - so you might need to make space in\nthe table first.\n\nIf there is no region, the current field is split at the cursor position and\nthe text fragment to the right of the cursor is prepended to the field one\nline down.\n\nIf there is no region, but you specify a prefix ARG, the current field gets\nblank, and the content is appended to the field above.\n\n(fn ARG)" t)(autoload 'org-table-sum "org-table" "Sum numbers in region of current table column.\nThe result will be displayed in the echo area, and will be available\nas kill to be inserted with \\[yank].\n\nIf there is an active region, it is interpreted as a rectangle and all\nnumbers in that rectangle will be summed.  If there is no active\nregion and point is located in a table column, sum all numbers in that\ncolumn.\n\nIf at least one number looks like a time HH:MM or HH:MM:SS, all other\nnumbers are assumed to be times as well (in decimal hours) and the\nnumbers are added as such.\n\nIf NLAST is a number, only the NLAST fields will actually be summed.\n\n(fn &optional BEG END NLAST)" t)(autoload 'org-table-analyze "org-table" "Analyze table at point and store results.\n\nThis function sets up the following dynamically scoped variables:\n\n `org-table-column-name-regexp',\n `org-table-column-names',\n `org-table-current-begin-pos',\n `org-table-current-line-types',\n `org-table-current-ncol',\n `org-table-dlines',\n `org-table-hlines',\n `org-table-local-parameters',\n `org-table-named-field-locations'.")(autoload 'turn-on-orgtbl "org-table" "Unconditionally turn on `orgtbl-mode'.")(autoload 'orgtbl-mode "org-table" "The Org mode table editor as a minor mode for use in other modes.\n\nThis is a minor mode.  If called interactively, toggle the\n`OrgTbl mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `orgtbl-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar orgtbl-exp-regexp "^\\([-+]?[0-9][0-9.]*\\)[eE]\\([-+]?[0-9]+\\)$" "Regular expression matching exponentials as produced by calc.")(autoload 'org-table-to-lisp "org-table" "Convert the table at point to a Lisp structure.\n\nThe structure will be a list.  Each item is either the symbol `hline'\nfor a horizontal separator line, or a list of field values as strings.\nThe table is taken from the parameter TXT, or from the buffer at point.\n\n(fn &optional TXT)")(autoload 'orgtbl-to-generic "org-table" "Convert the `orgtbl-mode' TABLE to some other format.\n\nThis generic routine can be used for many standard cases.\n\nTABLE is a list, each entry either the symbol `hline' for\na horizontal separator line, or a list of fields for that\nline.  PARAMS is a property list of parameters that can\ninfluence the conversion.\n\nValid parameters are:\n\n:backend, :raw\n\n  Export backend used as a basis to transcode elements of the\n  table, when no specific parameter applies to it.  It is also\n  used to translate cells contents.  You can prevent this by\n  setting :raw property to a non-nil value.\n\n:splice\n\n  When non-nil, only convert rows, not the table itself.  This is\n  equivalent to setting to the empty string both :tstart\n  and :tend, which see.\n\n:skip\n\n  When set to an integer N, skip the first N lines of the table.\n  Horizontal separation lines do count for this parameter!\n\n:skipcols\n\n  List of columns that should be skipped.  If the table has\n  a column with calculation marks, that column is automatically\n  discarded beforehand.\n\n:hline\n\n  String to be inserted on horizontal separation lines.  May be\n  nil to ignore these lines altogether.\n\n:sep\n\n  Separator between two fields, as a string.\n\nEach in the following group may be either a string or a function\nof no arguments returning a string:\n\n:tstart, :tend\n\n  Strings to start and end the table.  Ignored when :splice is t.\n\n:lstart, :lend\n\n  Strings to start and end a new table line.\n\n:llstart, :llend\n\n  Strings to start and end the last table line.  Default,\n  respectively, to :lstart and :lend.\n\nEach in the following group may be a string or a function of one\nargument (either the cells in the current row, as a list of\nstrings, or the current cell) returning a string:\n\n:lfmt\n\n  Format string for an entire row, with enough %s to capture all\n  fields.  When non-nil, :lstart, :lend, and :sep are ignored.\n\n:llfmt\n\n  Format for the entire last line, defaults to :lfmt.\n\n:fmt\n\n  A format to be used to wrap the field, should contain %s for\n  the original field value.  For example, to wrap everything in\n  dollars, you could use :fmt \"$%s$\".  This may also be\n  a property list with column numbers and format strings, or\n  functions, e.g.,\n\n    (:fmt (2 \"$%s$\" 4 (lambda (c) (format \"$%s$\" c))))\n\n  The format is ignored for empty fields.  Use :raw t with non-nil\n  :backend option to force formatting empty fields.\n\n:hlstart :hllstart :hlend :hllend :hsep :hlfmt :hllfmt :hfmt\n\n Same as above, specific for the header lines in the table.\n All lines before the first hline are treated as header.  If\n any of these is not present, the data line value is used.\n\nThis may be either a string or a function of two arguments:\n\n:efmt\n\n  Use this format to print numbers with exponential.  The format\n  should have %s twice for inserting mantissa and exponent, for\n  example \"%s\\\\times10^{%s}\".  This may also be a property\n  list with column numbers and format strings or functions.\n  :fmt will still be applied after :efmt.\n\n(fn TABLE PARAMS)")(autoload 'orgtbl-to-tsv "org-table" "Convert the `orgtbl-mode' TABLE to TAB separated material.\n\n(fn TABLE PARAMS)")(autoload 'orgtbl-to-csv "org-table" "Convert the `orgtbl-mode' TABLE to CSV material.\nThis does take care of the proper quoting of fields with comma or quotes.\n\n(fn TABLE PARAMS)")(autoload 'orgtbl-to-latex "org-table" "Convert the `orgtbl-mode' TABLE to LaTeX.\n\nTABLE is a list, each entry either the symbol `hline' for\na horizontal separator line, or a list of fields for that line.\nPARAMS is a property list of parameters that can influence the\nconversion.  All parameters from `orgtbl-to-generic' are\nsupported.  It is also possible to use the following ones:\n\n:booktabs\n\n  When non-nil, use formal \"booktabs\" style.\n\n:environment\n\n  Specify environment to use, as a string.  If you use\n  \"longtable\", you may also want to specify :language property,\n  as a string, to get proper continuation strings.\n\n(fn TABLE PARAMS)")(autoload 'orgtbl-to-html "org-table" "Convert the `orgtbl-mode' TABLE to HTML.\n\nTABLE is a list, each entry either the symbol `hline' for\na horizontal separator line, or a list of fields for that line.\nPARAMS is a property list of parameters that can influence the\nconversion.  All parameters from `orgtbl-to-generic' are\nsupported.  It is also possible to use the following one:\n\n:attributes\n\n  Attributes and values, as a plist, which will be used in\n  <table> tag.\n\n(fn TABLE PARAMS)")(autoload 'orgtbl-to-texinfo "org-table" "Convert the `orgtbl-mode' TABLE to Texinfo.\n\nTABLE is a list, each entry either the symbol `hline' for\na horizontal separator line, or a list of fields for that line.\nPARAMS is a property list of parameters that can influence the\nconversion.  All parameters from `orgtbl-to-generic' are\nsupported.  It is also possible to use the following one:\n\n:columns\n\n  Column widths, as a string.  When providing column fractions,\n  \"@columnfractions\" command can be omitted.\n\n(fn TABLE PARAMS)")(autoload 'orgtbl-to-orgtbl "org-table" "Convert the `orgtbl-mode' TABLE into another orgtbl-mode table.\n\nTABLE is a list, each entry either the symbol `hline' for\na horizontal separator line, or a list of fields for that line.\nPARAMS is a property list of parameters that can influence the\nconversion.  All parameters from `orgtbl-to-generic' are\nsupported.\n\nUseful when slicing one table into many.  The :hline, :sep,\n:lstart, and :lend provide orgtbl framing.  :tstart and :tend can\nbe set to provide ORGTBL directives for the generated table.\n\n(fn TABLE PARAMS)")(autoload 'orgtbl-ascii-plot "org-table" "Draw an ASCII bar plot in a column.\n\nWith cursor in a column containing numerical values, this function\nwill draw a plot in a new column.\n\nASK, if given, is a numeric prefix to override the default 12\ncharacters width of the plot.  ASK may also be the `\\[universal-argument]' prefix,\nwhich will prompt for the width.\n\n(fn &optional ASK)" t)(autoload 'org-timer-start "org-timer" "Set the starting time for the relative timer to now.\nWhen called with prefix argument OFFSET, prompt the user for an offset time,\nwith the default taken from a timer stamp at point, if any.\nIf OFFSET is a string or an integer, it is directly taken to be the offset\nwithout user interaction.\nWhen called with a double prefix arg, all timer strings in the active\nregion will be shifted by a specific amount.  You will be prompted for\nthe amount, with the default to make the first timer string in\nthe region 0:00:00.\n\n(fn &optional OFFSET)" t)(autoload 'org-timer-pause-or-continue "org-timer" "Pause or continue the relative or countdown timer.\nWith prefix arg STOP, stop it entirely.\n\n(fn &optional STOP)" t)(autoload 'org-timer-stop "org-timer" "Stop the relative or countdown timer." t)(autoload 'org-timer "org-timer" "Insert a H:MM:SS string from the timer into the buffer.\nThe first time this command is used, the timer is started.\n\nWhen used with a `\\[universal-argument]' prefix RESTART, force\nrestarting the timer.\n\nWhen used with a `\\[universal-argument] \\[universal-argument]' prefix\nRESTART, change all the timer strings in the region by a fixed amount.\nThis can be used to re-calibrate a timer that was not started at the\ncorrect moment.\n\nIf NO-INSERT is non-nil, return the string instead of inserting it in\nthe buffer.\n\n(fn &optional RESTART NO-INSERT)" t)(autoload 'org-timer-change-times-in-region "org-timer" "Change all h:mm:ss time in region BEG..END by a DELTA.\n\n(fn BEG END DELTA)" t)(autoload 'org-timer-item "org-timer" "Insert a description-type item with the current timer value.\nPrefix argument ARG is passed to `org-timer'.\n\n(fn &optional ARG)" t)(autoload 'org-timer-set-timer "org-timer" "Prompt for a duration in minutes or hh:mm:ss and set a timer.\n\nIf `org-timer-default-timer' is not \"0\", suggest this value as\nthe default duration for the timer.  If a timer is already set,\nprompt the user if she wants to replace it.\n\nCalled with a numeric prefix argument OPT, use this numeric value as\nthe duration of the timer in minutes.\n\nCalled with a \\[universal-argument] prefix argument OPT, use\n`org-timer-default-timer' without prompting the user for a duration.\n\nWith two \\[universal-argument] prefix arguments OPT, use\n`org-timer-default-timer' without prompting the user for a duration\nand automatically replace any running timer.\n\nBy default, the timer duration will be set to the number of\nminutes in the Effort property, if any.  You can ignore this by\nusing three \\[universal-argument] prefix arguments.\n\n(fn &optional OPT)" t)(autoload 'org-export-get-backend "ox" "Return export backend named after NAME.\nNAME is a symbol.  Return nil if no such backend is found.\n\n(fn NAME)")(autoload 'org-export-derived-backend-p "ox" "Non-nil if BACKEND is derived from one of BACKENDS.\nBACKEND is an export backend, as returned by, e.g.,\n`org-export-create-backend', or a symbol referring to\na registered backend.  BACKENDS is constituted of symbols.\n\n(fn BACKEND &rest BACKENDS)")(autoload 'org-export-get-environment "ox" "Collect export options from the current buffer.\n\nOptional argument BACKEND is an export backend, as returned by\n`org-export-create-backend'.\n\nWhen optional argument SUBTREEP is non-nil, assume the export is\ndone against the current sub-tree.\n\nThird optional argument EXT-PLIST is a property list with\nexternal parameters overriding Org default settings, but still\ninferior to file-local settings.\n\n(fn &optional BACKEND SUBTREEP EXT-PLIST)")(autoload 'org-export-data "ox" "Convert DATA into current backend format.\n\nDATA is a parse tree, an element or an object or a secondary\nstring.  INFO is a plist holding export options.\n\nThe `:filter-parse-tree' filters are not applied.\n\nReturn a string.\n\n(fn DATA INFO)")(autoload 'org-export-as "ox" "Transcode current Org buffer into BACKEND code.\n\nBACKEND is either an export backend, as returned by, e.g.,\n`org-export-create-backend', or a symbol referring to\na registered backend.\n\nIf narrowing is active in the current buffer, only transcode its\nnarrowed part.\n\nIf a region is active, transcode that region.\n\nWhen optional argument SUBTREEP is non-nil, transcode the\nsub-tree at point, extracting information from the headline\nproperties first.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only return body\ncode, without surrounding template.\n\nOptional argument EXT-PLIST, when provided, is a property list\nwith external parameters overriding Org default settings, but\nstill inferior to file-local settings.\n\nReturn code as a string.\n\n(fn BACKEND &optional SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)")(autoload 'org-export-string-as "ox" "Transcode STRING into BACKEND code.\n\nBACKEND is either an export backend, as returned by, e.g.,\n`org-export-create-backend', or a symbol referring to\na registered backend.\n\nWhen optional argument BODY-ONLY is non-nil, only return body\ncode, without preamble nor postamble.\n\nOptional argument EXT-PLIST, when provided, is a property list\nwith external parameters overriding Org default settings, but\nstill inferior to file-local settings.\n\nReturn code as a string.\n\n(fn STRING BACKEND &optional BODY-ONLY EXT-PLIST)")(autoload 'org-export-replace-region-by "ox" "Replace the active region by its export to BACKEND.\nBACKEND is either an export backend, as returned by, e.g.,\n`org-export-create-backend', or a symbol referring to\na registered backend.\n\n(fn BACKEND)")(autoload 'org-export-insert-default-template "ox" "Insert all export keywords with default values at beginning of line.\n\nBACKEND is a symbol referring to the name of a registered export\nbackend, for which specific export options should be added to\nthe template, or `default' for default template.  When it is nil,\nthe user will be prompted for a category.\n\nIf SUBTREEP is non-nil, export configuration will be set up\nlocally for the subtree through node properties.\n\n(fn &optional BACKEND SUBTREEP)" t)(autoload 'org-export-raw-string "ox" "Return a raw object containing string S.\nA raw string is exported as-is, with no additional processing\nfrom the export backend.\n\n(fn S)")(autoload 'org-export-to-buffer "ox" "Call `org-export-as' with output to a specified buffer.\n\nBACKEND is either an export backend, as returned by, e.g.,\n`org-export-create-backend', or a symbol referring to\na registered backend.\n\nBUFFER is the name of the output buffer.  If it already exists,\nit will be erased first, otherwise, it will be created.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting buffer should then be accessible\nthrough the `org-export-stack' interface.  When ASYNC is nil, the\nbuffer is displayed if `org-export-show-temporary-export-buffer'\nis non-nil.\n\nOptional arguments SUBTREEP, VISIBLE-ONLY, BODY-ONLY and\nEXT-PLIST are similar to those used in `org-export-as', which\nsee.\n\nOptional argument POST-PROCESS is a function which should accept\nno argument.  It is always called within the current process,\nfrom BUFFER, with point at its beginning.  Export backends can\nuse it to set a major mode there, e.g.,\n\n  (defun org-latex-export-as-latex\n    (&optional async subtreep visible-only body-only ext-plist)\n    (interactive)\n    (org-export-to-buffer \\='latex \"*Org LATEX Export*\"\n      async subtreep visible-only body-only ext-plist\n      #\\='LaTeX-mode))\n\nWhen expressed as an anonymous function, using `lambda',\nPOST-PROCESS needs to be quoted.\n\nThis function returns BUFFER.\n\n(fn BACKEND BUFFER &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST POST-PROCESS)")(function-put 'org-export-to-buffer 'lisp-indent-function 2)(autoload 'org-export-to-file "ox" "Call `org-export-as' with output to a specified file.\n\nBACKEND is either an export backend, as returned by, e.g.,\n`org-export-create-backend', or a symbol referring to\na registered backend.  FILE is the name of the output file, as\na string.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting buffer will then be accessible\nthrough the `org-export-stack' interface.\n\nOptional arguments SUBTREEP, VISIBLE-ONLY, BODY-ONLY and\nEXT-PLIST are similar to those used in `org-export-as', which\nsee.\n\nOptional argument POST-PROCESS is called with FILE as its\nargument and happens asynchronously when ASYNC is non-nil.  It\nhas to return a file name, or nil.  Export backends can use this\nto send the output file through additional processing, e.g,\n\n  (defun org-latex-export-to-latex\n    (&optional async subtreep visible-only body-only ext-plist)\n    (interactive)\n    (let ((outfile (org-export-output-file-name \".tex\" subtreep)))\n      (org-export-to-file \\='latex outfile\n        async subtreep visible-only body-only ext-plist\n        #\\='org-latex-compile)))\n\nWhen expressed as an anonymous function, using `lambda',\nPOST-PROCESS needs to be quoted.\n\nThe function returns either a file name returned by POST-PROCESS,\nor FILE.\n\n(fn BACKEND FILE &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST POST-PROCESS)")(function-put 'org-export-to-file 'lisp-indent-function 2)(autoload 'org-export-dispatch "ox" "Export dispatcher for Org mode.\n\nIt provides an access to common export related tasks in a buffer.\nIts interface comes in two flavors: standard and expert.\n\nWhile both share the same set of bindings, only the former\ndisplays the valid keys associations in a dedicated buffer.\nScrolling (resp. line-wise motion) in this buffer is done with\nSPC and DEL (resp. C-n and C-p) keys.\n\nSet variable `org-export-dispatch-use-expert-ui' to switch to one\nflavor or the other.\n\nWhen ARG is `\\[universal-argument]', repeat the last export action, with the same\nset of options used back then, on the current buffer.\n\nWhen ARG is `\\[universal-argument] \\[universal-argument]', display the asynchronous export stack.\n\n(fn &optional ARG)" t)(autoload 'org-ascii-convert-region-to-ascii "ox-ascii" "Assume region has Org syntax, and convert it to plain ASCII." t)(autoload 'org-ascii-convert-region-to-utf8 "ox-ascii" "Assume region has Org syntax, and convert it to UTF-8." t)(autoload 'org-ascii-export-as-ascii "ox-ascii" "Export current buffer to a text buffer.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting buffer should be accessible\nthrough the `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, strip title and\ntable of contents from output.\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nExport is done in a buffer named \"*Org ASCII Export*\", which\nwill be displayed when `org-export-show-temporary-export-buffer'\nis non-nil.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-ascii-export-to-ascii "ox-ascii" "Export current buffer to a text file.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, strip title and\ntable of contents from output.\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn output file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-ascii-publish-to-ascii "ox-ascii" "Publish an Org file to ASCII.\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(autoload 'org-ascii-publish-to-latin1 "ox-ascii" "Publish an Org file to Latin-1.\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(autoload 'org-ascii-publish-to-utf8 "ox-ascii" "Publish an org file to UTF-8.\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(autoload 'org-beamer-mode "ox-beamer" "Support for editing Beamer oriented Org mode files.\n\nThis is a minor mode.  If called interactively, toggle the\n`Org-Beamer mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `org-beamer-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-beamer-export-as-latex "ox-beamer" "Export current buffer as a Beamer buffer.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting buffer should be accessible\nthrough the `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{document}\" and \"\\end{document}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nExport is done in a buffer named \"*Org BEAMER Export*\", which\nwill be displayed when `org-export-show-temporary-export-buffer'\nis non-nil.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-beamer-export-to-latex "ox-beamer" "Export current buffer as a Beamer presentation (tex).\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{document}\" and \"\\end{document}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn output file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-beamer-export-to-pdf "ox-beamer" "Export current buffer as a Beamer presentation (PDF).\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{document}\" and \"\\end{document}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn PDF file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-beamer-select-environment "ox-beamer" "Select the environment to be used by beamer for this entry.\nWhile this uses (for convenience) a tag selection interface, the\nresult of this command will be that the BEAMER_env *property* of\nthe entry is set.\n\nIn addition to this, the command will also set a tag as a visual\naid, but the tag does not have any semantic meaning." t)(autoload 'org-beamer-publish-to-latex "ox-beamer" "Publish an Org file to a Beamer presentation (LaTeX).\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(autoload 'org-beamer-publish-to-pdf "ox-beamer" "Publish an Org file to a Beamer presentation (PDF, via LaTeX).\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(put 'org-html-head-include-default-style 'safe-local-variable 'booleanp)(put 'org-html-head 'safe-local-variable 'stringp)(put 'org-html-head-extra 'safe-local-variable 'stringp)(autoload 'org-html-htmlize-generate-css "ox-html" "Create the CSS for all font definitions in the current Emacs session.\nUse this to create face definitions in your CSS style file that can then\nbe used by code snippets transformed by htmlize.\nThis command just produces a buffer that contains class definitions for all\nfaces used in the current Emacs session.  You can copy and paste the ones you\nneed into your CSS file.\n\nIf you then set `org-html-htmlize-output-type' to `css', calls\nto the function `org-html-htmlize-region-for-paste' will\nproduce code that uses these same face definitions." t)(autoload 'org-html-export-as-html "ox-html" "Export current buffer to an HTML buffer.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting buffer should be accessible\nthrough the `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"<body>\" and \"</body>\" tags.\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nExport is done in a buffer named \"*Org HTML Export*\", which\nwill be displayed when `org-export-show-temporary-export-buffer'\nis non-nil.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-html-convert-region-to-html "ox-html" "Assume the current region has Org syntax, and convert it to HTML.\nThis can be used in any buffer.  For example, you can write an\nitemized list in Org syntax in an HTML buffer and use this command\nto convert it." t)(autoload 'org-html-export-to-html "ox-html" "Export current buffer to a HTML file.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"<body>\" and \"</body>\" tags.\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn output file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-html-publish-to-html "ox-html" "Publish an org file to HTML.\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(autoload 'org-icalendar-export-to-ics "ox-icalendar" "Export current buffer to an iCalendar file.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"BEGIN:VCALENDAR\" and \"END:VCALENDAR\".\n\nReturn ICS file name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY)" t)(autoload 'org-icalendar-export-agenda-files "ox-icalendar" "Export all agenda files to iCalendar files.\nWhen optional argument ASYNC is non-nil, export happens in an\nexternal process.\n\n(fn &optional ASYNC)" t)(autoload 'org-icalendar-combine-agenda-files "ox-icalendar" "Combine all agenda files into a single iCalendar file.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nThe file is stored under the name chosen in\n`org-icalendar-combined-agenda-file'.\n\n(fn &optional ASYNC)" t)(autoload 'org-koma-letter-export-as-latex "ox-koma-letter" "Export current buffer as a KOMA Scrlttr2 letter.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting buffer should be accessible\nthrough the `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{letter}\" and \"\\end{letter}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nExport is done in a buffer named \"*Org KOMA-LETTER Export*\".  It\nwill be displayed if `org-export-show-temporary-export-buffer' is\nnon-nil.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-koma-letter-export-to-latex "ox-koma-letter" "Export current buffer as a KOMA Scrlttr2 letter (tex).\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{letter}\" and \"\\end{letter}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nWhen optional argument PUB-DIR is set, use it as the publishing\ndirectory.\n\nReturn output file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-koma-letter-export-to-pdf "ox-koma-letter" "Export current buffer as a KOMA Scrlttr2 letter (pdf).\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{letter}\" and \"\\end{letter}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn PDF file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-latex-make-preamble "ox-latex" "Return a formatted LaTeX preamble.\nINFO is a plist used as a communication channel.  Optional\nargument TEMPLATE, when non-nil, is the header template string,\nas expected by `org-splice-latex-header'.  When SNIPPET? is\nnon-nil, only includes packages relevant to image generation, as\nspecified in `org-latex-default-packages-alist' or\n`org-latex-packages-alist'.\n\n(fn INFO &optional TEMPLATE SNIPPET?)")(autoload 'org-latex-export-as-latex "ox-latex" "Export current buffer as a LaTeX buffer.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting buffer should be accessible\nthrough the `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{document}\" and \"\\end{document}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nExport is done in a buffer named \"*Org LATEX Export*\", which\nwill be displayed when `org-export-show-temporary-export-buffer'\nis non-nil.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-latex-convert-region-to-latex "ox-latex" "Assume the current region has Org syntax, and convert it to LaTeX.\nThis can be used in any buffer.  For example, you can write an\nitemized list in Org syntax in an LaTeX buffer and use this\ncommand to convert it." t)(autoload 'org-latex-export-to-latex "ox-latex" "Export current buffer to a LaTeX file.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{document}\" and \"\\end{document}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-latex-export-to-pdf "ox-latex" "Export current buffer to LaTeX then process through to PDF.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{document}\" and \"\\end{document}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn PDF file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-latex-publish-to-latex "ox-latex" "Publish an Org file to LaTeX.\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(autoload 'org-latex-publish-to-pdf "ox-latex" "Publish an Org file to PDF (via LaTeX).\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(autoload 'org-md-export-as-markdown "ox-md" "Export current buffer to a Markdown buffer.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting buffer should be accessible\nthrough the `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nExport is done in a buffer named \"*Org MD Export*\", which will\nbe displayed when `org-export-show-temporary-export-buffer' is\nnon-nil.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY)" t)(autoload 'org-md-convert-region-to-md "ox-md" "Assume the current region has Org syntax, and convert it to Markdown.\nThis can be used in any buffer.  For example, you can write an\nitemized list in Org syntax in a Markdown buffer and use\nthis command to convert it." t)(autoload 'org-md-export-to-markdown "ox-md" "Export current buffer to a Markdown file.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nReturn output file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY)" t)(autoload 'org-md-publish-to-md "ox-md" "Publish an org file to Markdown.\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(put 'org-odt-preferred-output-format 'safe-local-variable 'stringp)(autoload 'org-odt-export-as-odf "ox-odt" "Export LATEX-FRAG as OpenDocument formula file ODF-FILE.\nUse `org-create-math-formula' to convert LATEX-FRAG first to\nMathML.  When invoked as an interactive command, use\n`org-latex-regexps' to infer LATEX-FRAG from currently active\nregion.  If no LaTeX fragments are found, prompt for it.  Push\nMathML source to kill ring depending on the value of\n`org-export-copy-to-kill-ring'.\n\n(fn LATEX-FRAG &optional ODF-FILE)" t)(autoload 'org-odt-export-as-odf-and-open "ox-odt" "Export LaTeX fragment as OpenDocument formula and immediately open it.\nUse `org-odt-export-as-odf' to read LaTeX fragment and OpenDocument\nformula file." t)(autoload 'org-odt-export-to-odt "ox-odt" "Export current buffer to a ODT file.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn output file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY EXT-PLIST)" t)(autoload 'org-odt-convert "ox-odt" "Convert IN-FILE to format OUT-FMT using a command line converter.\nIN-FILE is the file to be converted.  If unspecified, it defaults\nto variable `buffer-file-name'.  OUT-FMT is the desired output\nformat.  Use `org-odt-convert-process' as the converter.  If OPEN\nis non-nil then the newly converted file is opened using\n`org-open-file'.\n\n(fn &optional IN-FILE OUT-FMT OPEN)" t)(autoload 'org-org-export-as-org "ox-org" "Export current buffer to an Org buffer.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting buffer should be accessible\nthrough the `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, strip document\nkeywords from output.\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nExport is done in a buffer named \"*Org ORG Export*\", which will\nbe displayed when `org-export-show-temporary-export-buffer' is\nnon-nil.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-org-export-to-org "ox-org" "Export current buffer to an Org file.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, strip document\nkeywords from output.\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn output file name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-org-publish-to-org "ox-org" "Publish an Org file to Org.\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(defalias 'org-publish-project 'org-publish)(autoload 'org-publish "ox-publish" "Publish PROJECT.\n\nPROJECT is either a project name, as a string, or a project\nalist (see `org-publish-project-alist' variable).\n\nWhen optional argument FORCE is non-nil, force publishing all\nfiles in PROJECT.  With a non-nil optional argument ASYNC,\npublishing will be done asynchronously, in another process.\n\n(fn PROJECT &optional FORCE ASYNC)" t)(autoload 'org-publish-all "ox-publish" "Publish all projects.\nWith prefix argument FORCE, remove all files in the timestamp\ndirectory and force publishing all projects.  With a non-nil\noptional argument ASYNC, publishing will be done asynchronously,\nin another process.\n\n(fn &optional FORCE ASYNC)" t)(autoload 'org-publish-current-file "ox-publish" "Publish the current file.\nWith prefix argument FORCE, force publish the file.  When\noptional argument ASYNC is non-nil, publishing will be done\nasynchronously, in another process.\n\n(fn &optional FORCE ASYNC)" t)(autoload 'org-publish-current-project "ox-publish" "Publish the project associated with the current file.\nWith a prefix argument, force publishing of all files in\nthe project.\n\n(fn &optional FORCE ASYNC)" t)(autoload 'org-texinfo-export-to-texinfo "ox-texinfo" "Export current buffer to a Texinfo file.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{document}\" and \"\\end{document}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn output file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-texinfo-export-to-info "ox-texinfo" "Export current buffer to Texinfo then process through to INFO.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"\\begin{document}\" and \"\\end{document}\".\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn INFO file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-texinfo-publish-to-texinfo "ox-texinfo" "Publish an org file to Texinfo.\n\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.\n\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR)")(autoload 'org-texinfo-convert-region-to-texinfo "ox-texinfo" "Assume the current region has Org syntax, and convert it to Texinfo.\nThis can be used in any buffer.  For example, you can write an\nitemized list in Org syntax in an Texinfo buffer and use this\ncommand to convert it." t)(defvar citar-org-roam-mode nil "Non-nil if citar-org-roam mode is enabled.\nSee the `citar-org-roam-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `citar-org-roam-mode'.")(autoload 'citar-org-roam-mode "citar-org-roam" "Toggle `citar-org-roam-mode'.\n\nThis is a global minor mode.  If called interactively, toggle the\n`citar-org-roam mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='citar-org-roam-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-roam-list-files "org-roam" "Return a list of all Org-roam files under `org-roam-directory'.\nSee `org-roam-file-p' for how each file is determined to be as\npart of Org-Roam.")(autoload 'org-roam-capture- "org-roam-capture" "Main entry point of `org-roam-capture' module.\nGOTO and KEYS correspond to `org-capture' arguments.\nINFO is a plist for filling up Org-roam's capture templates.\nNODE is an `org-roam-node' construct containing information about the node.\nPROPS is a plist containing additional Org-roam properties for each template.\nTEMPLATES is a list of org-roam templates.\n\n(fn &key GOTO KEYS NODE INFO PROPS TEMPLATES)")(autoload 'org-roam-capture "org-roam-capture" "Launches an `org-capture' process for a new or existing node.\nThis uses the templates defined at `org-roam-capture-templates'.\nArguments GOTO and KEYS see `org-capture'.\nFILTER-FN is a function to filter out nodes: it takes an `org-roam-node',\nand when nil is returned the node will be filtered out.\nThe TEMPLATES, if provided, override the list of capture templates (see\n`org-roam-capture-'.)\nThe INFO, if provided, is passed along to the underlying `org-roam-capture-'.\n\n(fn &optional GOTO KEYS &key FILTER-FN TEMPLATES INFO)" t)(autoload 'org-roam-dailies-capture-today "org-roam-dailies" "Create an entry in the daily-note for today.\nWhen GOTO is non-nil, go the note without creating an entry.\n\nELisp programs can set KEYS to a string associated with a template.\nIn this case, interactive selection will be bypassed.\n\n(fn &optional GOTO KEYS)" t)(autoload 'org-roam-dailies-goto-today "org-roam-dailies" "Find the daily-note for today, creating it if necessary.\n\nELisp programs can set KEYS to a string associated with a template.\nIn this case, interactive selection will be bypassed.\n\n(fn &optional KEYS)" t)(autoload 'org-roam-dailies-capture-tomorrow "org-roam-dailies" "Create an entry in the daily-note for tomorrow.\n\nWith numeric argument N, use the daily-note N days in the future.\n\nWith a `C-u' prefix or when GOTO is non-nil, go the note without\ncreating an entry.\n\nELisp programs can set KEYS to a string associated with a template.\nIn this case, interactive selection will be bypassed.\n\n(fn N &optional GOTO KEYS)" t)(autoload 'org-roam-dailies-goto-tomorrow "org-roam-dailies" "Find the daily-note for tomorrow, creating it if necessary.\n\nWith numeric argument N, use the daily-note N days in the\nfuture.\n\nELisp programs can set KEYS to a string associated with a template.\nIn this case, interactive selection will be bypassed.\n\n(fn N &optional KEYS)" t)(autoload 'org-roam-dailies-capture-yesterday "org-roam-dailies" "Create an entry in the daily-note for yesteday.\n\nWith numeric argument N, use the daily-note N days in the past.\n\nWhen GOTO is non-nil, go the note without creating an entry.\n\nELisp programs can set KEYS to a string associated with a template.\nIn this case, interactive selection will be bypassed.\n\n(fn N &optional GOTO KEYS)" t)(autoload 'org-roam-dailies-goto-yesterday "org-roam-dailies" "Find the daily-note for yesterday, creating it if necessary.\n\nWith numeric argument N, use the daily-note N days in the\nfuture.\n\nELisp programs can set KEYS to a string associated with a template.\nIn this case, interactive selection will be bypassed.\n\n(fn N &optional KEYS)" t)(autoload 'org-roam-dailies-capture-date "org-roam-dailies" "Create an entry in the daily-note for a date using the calendar.\nPrefer past dates, unless PREFER-FUTURE is non-nil.\nWith a `C-u' prefix or when GOTO is non-nil, go the note without\ncreating an entry.\n\nELisp programs can set KEYS to a string associated with a template.\nIn this case, interactive selection will be bypassed.\n\n(fn &optional GOTO PREFER-FUTURE KEYS)" t)(autoload 'org-roam-dailies-goto-date "org-roam-dailies" "Find the daily-note for a date using the calendar, creating it if necessary.\nPrefer past dates, unless PREFER-FUTURE is non-nil.\n\nELisp programs can set KEYS to a string associated with a template.\nIn this case, interactive selection will be bypassed.\n\n(fn &optional PREFER-FUTURE KEYS)" t)(autoload 'org-roam-dailies-find-directory "org-roam-dailies" "Find and open `org-roam-dailies-directory'." t)(autoload 'org-roam-db-sync "org-roam-db" "Synchronize the cache state with the current Org files on-disk.\nIf FORCE, force a rebuild of the cache from scratch.\n\n(fn &optional FORCE)" t)(defvar org-roam-db-autosync-mode nil "Non-nil if Org-Roam-Db-Autosync mode is enabled.\nSee the `org-roam-db-autosync-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `org-roam-db-autosync-mode'.")(autoload 'org-roam-db-autosync-mode "org-roam-db" "Global minor mode to keep your Org-roam session automatically synchronized.\n\nThrough the session this will continue to setup your\nbuffers (that are Org-roam file visiting), keep track of the\nrelated changes, maintain cache consistency and incrementally\nupdate the currently active database.\n\nIf you need to manually trigger resync of the currently active\ndatabase, see `org-roam-db-sync' command.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Org-Roam-Db-Autosync mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='org-roam-db-autosync-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-roam-db-autosync-enable "org-roam-db" "Activate `org-roam-db-autosync-mode'.")(autoload 'org-roam-graph "org-roam-graph" "Build and possibly display a graph for NODE.\nARG may be any of the following values:\n  - nil       show the graph.\n  - `\\[universal-argument]'     show the graph for NODE.\n  - `\\[universal-argument]' N   show the graph for NODE limiting nodes to N steps.\n\n(fn &optional ARG NODE)" t)(autoload 'org-roam-update-org-id-locations "org-roam-id" "Scan Org-roam files to update `org-id' related state.\nThis is like `org-id-update-id-locations', but will automatically\nuse the currently bound `org-directory' and `org-roam-directory'\nalong with DIRECTORIES (if any), where the lookup for files in\nthese directories will be always recursive.\n\nNote: Org-roam doesn't have hard dependency on\n`org-id-locations-file' to lookup IDs for nodes that are stored\nin the database, but it still tries to properly integrates with\n`org-id'. This allows the user to cross-reference IDs outside of\nthe current `org-roam-directory', and also link with \"id:\"\nlinks to headings/files within the current `org-roam-directory'\nthat are excluded from identification in Org-roam as\n`org-roam-node's, e.g. with \"ROAM_EXCLUDE\" property.\n\n(fn &rest DIRECTORIES)" t)(autoload 'org-roam-migrate-wizard "org-roam-migrate" "Migrate all notes from to be compatible with Org-roam v2.\n1. Convert all notes from v1 format to v2.\n2. Rebuild the cache.\n3. Replace all file links with ID links." t)(autoload 'org-roam-buffer-display-dedicated "org-roam-mode" "Launch NODE dedicated Org-roam buffer.\nUnlike the persistent `org-roam-buffer', the contents of this\nbuffer won't be automatically changed and will be held in place.\n\nIn interactive calls prompt to select NODE, unless called with\n`universal-argument', in which case NODE will be set to\n`org-roam-node-at-point'.\n\n(fn NODE)" t)(autoload 'org-roam-node-find "org-roam-node" "Find and open an Org-roam node by its title or alias.\nINITIAL-INPUT is the initial input for the prompt.\nFILTER-FN is a function to filter out nodes: it takes an `org-roam-node',\nand when nil is returned the node will be filtered out.\nIf OTHER-WINDOW, visit the NODE in another window.\nThe TEMPLATES, if provided, override the list of capture templates (see\n`org-roam-capture-'.)\n\n(fn &optional OTHER-WINDOW INITIAL-INPUT FILTER-FN PRED &key TEMPLATES)" t)(autoload 'org-roam-node-random "org-roam-node" "Find and open a random Org-roam node.\nWith prefix argument OTHER-WINDOW, visit the node in another\nwindow instead.\nFILTER-FN is a function to filter out nodes: it takes an `org-roam-node',\nand when nil is returned the node will be filtered out.\n\n(fn &optional OTHER-WINDOW FILTER-FN)" t)(autoload 'org-roam-node-insert "org-roam-node" "Find an Org-roam node and insert (where the point is) an \"id:\" link to it.\nFILTER-FN is a function to filter out nodes: it takes an `org-roam-node',\nand when nil is returned the node will be filtered out.\nThe TEMPLATES, if provided, override the list of capture templates (see\n`org-roam-capture-'.)\nThe INFO, if provided, is passed to the underlying `org-roam-capture-'.\n\n(fn &optional FILTER-FN &key TEMPLATES INFO)" t)(autoload 'org-roam-refile "org-roam-node" "Refile node at point to an Org-roam node.\nIf region is active, then use it instead of the node at point." t)(autoload 'org-roam-extract-subtree "org-roam-node" "Convert current subtree at point to a node, and extract it into a new file." t)(autoload 'org-roam-ref-find "org-roam-node" "Find and open an Org-roam node that's dedicated to a specific ref.\nINITIAL-INPUT is the initial input to the prompt.\nFILTER-FN is a function to filter out nodes: it takes an `org-roam-node',\nand when nil is returned the node will be filtered out.\n\n(fn &optional INITIAL-INPUT FILTER-FN)" t)(autoload 'org-roam-version "org-roam-utils" "Return `org-roam' version.\nInteractively, or when MESSAGE is non-nil, show in the echo area.\n\n(fn &optional MESSAGE)" t)(autoload 'org-roam-diagnostics "org-roam-utils" "Collect and print info for `org-roam' issues." t)(autoload 'emacsql-show-last-sql "emacsql" "Display the compiled SQL of the s-expression SQL expression before point.\nA prefix argument causes the SQL to be printed into the current buffer.\n\n(fn &optional PREFIX)" t)(defvar cl-struct-citar-indicator-tags)(cl-defsubst citar-indicator-p (cl-x) (declare (side-effect-free error-free) (pure t)) (and (memq (type-of cl-x) cl-struct-citar-indicator-tags) t))(eval-and-compile (define-symbol-prop 'citar-indicator 'cl-deftype-satisfies 'citar-indicator-p))(cl-defsubst citar-indicator-tag (cl-x) "Access slot \"tag\" of `citar-indicator' struct CL-X.\nThe string to include as hidden candidate text, and to then determine whether a\ncandidate predicate function will return non-nil." (declare (side-effect-free t)) (progn (or (citar-indicator-p cl-x) (signal 'wrong-type-argument (list 'citar-indicator cl-x))) (aref cl-x 1)))(cl-defsubst citar-indicator-symbol (cl-x) "Access slot \"symbol\" of `citar-indicator' struct CL-X.\nThe symbol string to use in the UI when predicate function returns non-nil." (declare (side-effect-free t)) (progn (or (citar-indicator-p cl-x) (signal 'wrong-type-argument (list 'citar-indicator cl-x))) (aref cl-x 2)))(cl-defsubst citar-indicator-padding (cl-x) "Access slot \"padding\" of `citar-indicator' struct CL-X.\nString to add to the right side of the indicator, for proper padding and such." (declare (side-effect-free t)) (progn (or (citar-indicator-p cl-x) (signal 'wrong-type-argument (list 'citar-indicator cl-x))) (aref cl-x 3)))(cl-defsubst citar-indicator-emptysymbol (cl-x) "Access slot \"emptysymbol\" of `citar-indicator' struct CL-X.\nThe symbol to use in the UI when predicate function returns nil. Can be useful\nin some cases when using icons." (declare (side-effect-free t)) (progn (or (citar-indicator-p cl-x) (signal 'wrong-type-argument (list 'citar-indicator cl-x))) (aref cl-x 4)))(cl-defsubst citar-indicator-function (cl-x) "Access slot \"function\" of `citar-indicator' struct CL-X.\nA predicate function that takes a single CITEKEY argument." (declare (side-effect-free t)) (progn (or (citar-indicator-p cl-x) (signal 'wrong-type-argument (list 'citar-indicator cl-x))) (aref cl-x 5)))(cl-defsubst citar-indicator-compiledfunction (cl-x) "Access slot \"compiledfunction\" of `citar-indicator' struct CL-X.\nA compiled version of `function' used during processing." (declare (side-effect-free t)) (progn (or (citar-indicator-p cl-x) (signal 'wrong-type-argument (list 'citar-indicator cl-x))) (aref cl-x 6)))(cl-defsubst citar-indicator-create (&cl-defs (nil (cl-tag-slot) (tag nil :documentation "The string to include as hidden candidate text, and to then determine whether a\ncandidate predicate function will return non-nil.") (symbol nil :type string :documentation "The symbol string to use in the UI when predicate function returns non-nil.") (padding " " :type string :documentation "String to add to the right side of the indicator, for proper padding and such.") (emptysymbol " " :documentation "The symbol to use in the UI when predicate function returns nil. Can be useful\nin some cases when using icons.") (function nil :type function :documentation "A predicate function that takes a single CITEKEY argument.") (compiledfunction nil :type compiled-function :documentation "A compiled version of `function' used during processing.")) &key tag symbol padding emptysymbol function compiledfunction) "Constructor for objects of type `citar-indicator'." (declare (side-effect-free t)) (record 'citar-indicator tag symbol padding emptysymbol function compiledfunction))(autoload 'citar-insert-preset "citar" "Prompt for and insert a predefined search." t)(autoload 'citar-open "citar" "Open related resources (links, files, or notes) for CITEKEYS.\n\n(fn CITEKEYS)" t)(autoload 'citar-open-files "citar" "Open library file associated with CITEKEY-OR-CITEKEYS.\n\n(fn CITEKEY-OR-CITEKEYS)" t)(autoload 'citar-attach-files "citar" "Attach library file associated with CITEKEY-OR-CITEKEYS to outgoing MIME message.\n\n(fn CITEKEY-OR-CITEKEYS)" t)(autoload 'citar-open-note "citar" "Open a single NOTE directly.\nThe note should be represented as a string returned by\n`citar-get-notes'. When called interactively, prompt for a note\nto open from a list of all notes.\n\n(fn NOTE)" t)(autoload 'citar-open-notes "citar" "Open notes associated with the CITEKEYS.\n\n(fn CITEKEYS)" t)(autoload 'citar-open-links "citar" "Open URL or DOI link associated with CITEKEY-OR-CITEKEYS in a browser.\n\n(fn CITEKEY-OR-CITEKEYS)" t)(autoload 'citar-open-entry "citar" "Open bibliographic entry associated with the CITEKEY.\n\n(fn CITEKEY)" t)(autoload 'citar-insert-bibtex "citar" "Insert bibliographic entry associated with the CITEKEYS.\n\n(fn CITEKEYS)" t)(autoload 'citar-export-local-bib-file "citar" "Create a new bibliography file from citations in current buffer.\n\nThe file is titled \"local-bib\", given the same extension as\nthe first entry in `citar-bibliography', and created in the same\ndirectory as current buffer." t)(autoload 'citar-insert-citation "citar" "Insert citation for the CITEKEYS.\n\nPrefix ARG is passed to the mode-specific insertion function. It\nshould invert the default behaviour for that mode with respect to\ncitation styles. See specific functions for more detail.\n\n(fn CITEKEYS &optional ARG)" t)(autoload 'citar-insert-reference "citar" "Insert formatted reference(s) associated with the CITEKEYS.\n\n(fn CITEKEYS)" t)(autoload 'citar-copy-reference "citar" "Copy formatted reference(s) associated with the CITEKEYS.\n\n(fn CITEKEYS)" t)(autoload 'citar-insert-keys "citar" "Insert CITEKEYS.\n\n(fn CITEKEYS)" t)(autoload 'citar-add-file-to-library "citar" "Add a file to the library for CITEKEY.\nThe FILE can be added from an open buffer, a file path, or a\nURL.\n\n(fn CITEKEY)" t)(autoload 'citar-run-default-action "citar" "Run the default action `citar-default-action' on CITEKEYS.\n\n(fn CITEKEYS)")(autoload 'citar-dwim "citar" "Run the default action on citation keys found at point." t)(autoload 'citar-capf "citar-capf" "Complete citation key at point for org, markdown, or latex.")(autoload 'citar-capf-setup "citar-capf" "Add `citar-capf' to `completion-at-point-functions'.")(autoload 'citar-citeproc-select-csl-style "citar-citeproc" "Select CSL style to be used with `citar-citeproc-format-reference'." t)(autoload 'citar-citeproc-format-reference "citar-citeproc" "Return formatted reference(s) for KEYS via `citeproc-el'.\nFormatting follows CSL style set in `citar-citeproc-csl-style'.\nWith prefix-argument, select CSL style.\nSTYLE is a CSL style as a path or a string.\n\n(fn KEYS &optional STYLE)")(autoload 'citar-latex-local-bib-files "citar-latex" "Local bibliographic for latex retrieved using reftex.")(autoload 'citar-latex-key-at-point "citar-latex" "Return citation key at point with its bounds.\n\nThe return value is (KEY . BOUNDS), where KEY is the citation key\nat point and BOUNDS is a pair of buffer positions.\n\nReturn nil if there is no key at point.")(autoload 'citar-latex-citation-at-point "citar-latex" "Find citation macro at point and extract keys.\n\nFind brace-delimited strings inside the bounds of the macro,\nsplits them at comma characters, and trims whitespace.\n\nReturn (KEYS . BOUNDS), where KEYS is a list of the found\ncitation keys and BOUNDS is a pair of buffer positions indicating\nthe start and end of the citation macro.")(autoload 'citar-latex-insert-citation "citar-latex" "Insert a citation consisting of KEYS.\n\nIf the command is inside a citation command keys are added to it. Otherwise\na new command is started.\n\nIf the optional COMMAND is provided use it (ignoring INVERT-PROMPT).\nOtherwise prompt for a citation command, depending on the value of\n`citar-latex-prompt-for-cite-style'. If INVERT-PROMPT is non-nil, invert\nwhether or not to prompt.\n\nThe availiable commands and how to provide them arguments are configured\nby `citar-latex-cite-commands'.\n\nIf `citar-latex-prompt-for-extra-arguments' is nil, every\ncommand is assumed to have a single argument into which keys are\ninserted.\n\n(fn KEYS &optional INVERT-PROMPT COMMAND)")(autoload 'citar-latex-insert-edit "citar-latex" "Prompt for keys and call `citar-latex-insert-citation.\nWith ARG non-nil, rebuild the cache before offering candidates.\n\n(fn &optional ARG)")(defalias 'citar-latex-list-keys #'reftex-all-used-citation-keys)(autoload 'citar-markdown-insert-keys "citar-markdown" "Insert semicolon-separated and @-prefixed KEYS in a markdown buffer.\n\n(fn KEYS)")(autoload 'citar-markdown-insert-citation "citar-markdown" "Insert a pandoc-style citation consisting of KEYS.\n\nIf the point is inside a citation, add new keys after the current\nkey.\n\nIf point is immediately after the opening [, add new keys\nto the beginning of the citation.\n\nIf INVERT-PROMPT is non-nil, invert the meaning of\n`citar-markdown-prompt-for-extra-arguments'.\n\n(fn KEYS &optional INVERT-PROMPT)")(autoload 'citar-markdown-insert-edit "citar-markdown" "Prompt for keys and call `citar-markdown-insert-citation.\nWith ARG non-nil, rebuild the cache before offering candidates.\n\n(fn &optional ARG)")(autoload 'citar-markdown-key-at-point "citar-markdown" "Return citation key at point (with its bounds) for pandoc markdown citations.\nReturns (KEY . BOUNDS), where KEY is the citation key at point\nand BOUNDS is a pair of buffer positions.  Citation keys are\nfound using `citar-markdown-citation-key-regexp'.  Returns nil if\nthere is no key at point." t)(autoload 'citar-markdown-citation-at-point "citar-markdown" "Return keys of citation at point.\nFind balanced expressions starting and ending with square\nbrackets and containing at least one citation key (matching\n`citar-markdown-citation-key-regexp').  Return (KEYS . BOUNDS),\nwhere KEYS is a list of the found citation keys and BOUNDS is a\npair of buffer positions indicating the start and end of the\ncitation.")(autoload 'citar-markdown-list-keys "citar-markdown" "Return a list of all keys from markdown citations in buffer.")(autoload 'citar-org-select-key "citar-org" "Return a list of keys when MULTIPLE, or else a key string.\n\n(fn &optional MULTIPLE)")(autoload 'citar-org-insert-citation "citar-org" "Insert KEYS in org-cite format, with STYLE.\n\n(fn KEYS &optional STYLE)")(autoload 'citar-org-insert-edit "citar-org" "Run `org-cite-insert' with citar insert processor.\nARG is used as the prefix argument.\n\n(fn &optional ARG)")(autoload 'citar-org-follow "citar-org" "Follow processor for org-cite.\n\n(fn DATUM ARG)")(autoload 'citar-org-select-style "citar-org" "Complete a citation style for org-cite with preview.\n\n(fn &optional ARG)")(autoload 'citar-org-local-bib-files "citar-org" "Return local bib file paths for org buffer.\n\n(fn &rest ARGS)")(autoload 'citar-org-roam-make-preamble "citar-org" "Add a preamble to org-roam note, with KEY.\n\n(fn KEY)")(autoload 'citar-org-format-note-default "citar-org" "Format a note from KEY and ENTRY.\n\n(fn KEY ENTRY)")(autoload 'citar-org-key-at-point "citar-org" "Return key at point for org-cite citation-reference or property.")(autoload 'citar-org-citation-at-point "citar-org" "Return org-cite citation keys at point as a list for `embark'.")(autoload 'citar-org-activate "citar-org" "Run all the activation functions in `citar-org-activation-functions'.\nArgument CITATION is an org-element holding the references.\n\n(fn CITATION)")(with-eval-after-load 'oc (org-cite-register-processor 'citar :insert (org-cite-make-insert-processor #'citar-org-select-key #'citar-org-select-style) :follow #'citar-org-follow :activate #'citar-org-activate))(defvar citar-embark-mode nil "Non-nil if citar-embark mode is enabled.\nSee the `citar-embark-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `citar-embark-mode'.")(autoload 'citar-embark-mode "citar-embark" "Toggle integration between Citar and Embark.\n\nThis is a global minor mode.  If called interactively, toggle the\n`citar-embark mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='citar-embark-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload '__FILE__ "load-relative" "Return the string name of file/buffer that is currently begin executed.\n\nThe first approach for getting this information is perhaps the\nmost pervasive and reliable.  But it the most low-level and not\npart of a public API, so it might change in future\nimplementations.  This method uses the name that is recorded by\nreadevalloop of `lread.c' as the car of variable\n`current-load-list'.\n\nFailing that, we use `load-file-name' which should work in some\nsubset of the same places that the first method works.  However\n`load-file-name' will be nil for code that is eval'd.  To cover\nthose cases, we try function `buffer-file-name' which is initially\ncorrect, for eval'd code, but will change and may be wrong if the\ncode sets or switches buffers after the initial execution.\n\nAs a last resort, you can pass in SYMBOL which should be some\nsymbol that has been previously defined if none of the above\nmethods work we will use the file-name value find via\n`symbol-file'.\n\n(fn &optional SYMBOL)")(autoload 'find-file-noselect-relative "load-relative" "Read relative FILENAME into a buffer and return the buffer.\nIf a buffer exists visiting FILENAME, return that one, but\nverify that the file has not changed since visited or saved.\nThe buffer is not selected, just returned to the caller.\nOptional second arg NOWARN non-nil means suppress any warning messages.\nOptional third arg RAWFILE non-nil means the file is read literally.\nOptional fourth arg WILDCARDS non-nil means do wildcard processing\nand visit all the matching files.  When wildcards are actually\nused and expanded, return a list of buffers that are visiting\nthe various files.\n\n(fn FILENAME &optional NOWARN RAWFILE WILDCARDS)")(autoload 'with-relative-file "load-relative" "Read the relative FILE into a temporary buffer and evaluate BODY\nin this buffer.\n\n(fn FILE &rest BODY)" nil t)(function-put 'with-relative-file 'lisp-indent-function 1)(autoload 'load-relative "load-relative" "Load an Emacs Lisp file relative to Emacs Lisp code that is in\nthe process of being loaded or eval'd.\n\nFILE-OR-LIST is either a string or a list of strings containing\nfiles that you want to loaded.  If SYMBOL is given, the location of\nof the file of where that was defined (as given by `symbol-file' is used\nif other methods of finding __FILE__ don't work.\n\n(fn FILE-OR-LIST &optional SYMBOL)")(autoload 'require-relative "load-relative" "Run `require' on an Emacs Lisp file relative to the Emacs Lisp code\nthat is in the process of being loaded or eval'd.  The symbol used in require\nis the base file name (without directory or file extension) treated as a\nsymbol.\n\nWARNING: it is best to to run this function before any\nbuffer-setting or buffer changing operations.\n\n(fn RELATIVE-FILE &optional OPT-FILE OPT-PREFIX)")(autoload 'require-relative-list "load-relative" "Run `require-relative' on each name in LIST which should be a list of\nstrings, each string being the relative name of file you want to run.\n\n(fn LIST &optional OPT-PREFIX)" nil t)(autoload 'provide-me "load-relative" "Call `provide' with the feature's symbol name made from\nsource-code's file basename sans extension.  For example if you\nwrite (provide-me) inside file ~/lisp/foo.el, this is the same as\nwriting: (provide \\='foo).\n\nWith a prefix, that prefix is prepended to the `provide' So in\nthe previous example, if you write (provide-me \"bar-\") this is the\nsame as writing (provide \\='bar-foo).\n\n(fn &optional PREFIX)" nil t)(defconst realgud--recursive-autoloads-file-name "realgud-recursive-autoloads.el" "Where to store autoloads for subdirectory contents.")(defconst realgud--recursive-autoloads-base-directory (file-name-directory (if load-in-progress "~/.config/emacs/.local/straight/build-29.2/realgud/realgud-autoloads.el" buffer-file-name)))(with-demoted-errors "Error in RealGUD's autoloads: %s" (load (expand-file-name realgud--recursive-autoloads-file-name realgud--recursive-autoloads-base-directory) t t))(autoload 'test-simple-start "test-simple" "\n\n(fn &optional TEST-START-MSG)" nil t)(autoload 'test-simple-clear "test-simple" "Initialize and reset everything to run tests.\nYou should run this before running any assertions.  Running more than once\nclears out information from the previous run.\n\n(fn &optional TEST-INFO TEST-START-MSG)" t)(autoload 'test-simple-run "test-simple" "Register command line to run tests non-interactively and bind key to run test.\nAfter calling this function, you can run test by key specified by `test-simple-runner-key'.\n\nIt is preferable to write at the first line of test files as a comment, e.g,\n;;;; (test-simple-run \"emacs -batch -L %s -l %s\" (file-name-directory (locate-library \"test-simple.elc\")) buffer-file-name)\n\nCalling this function interactively, COMMAND-LINE-FORMATS is set above.\n\n(fn &rest COMMAND-LINE-FORMATS)" t)(autoload 'envrc-mode "envrc" "A local minor mode in which env vars are set by direnv.\n\nThis is a minor mode.  If called interactively, toggle the `Envrc\nmode' mode.  If the prefix argument is positive, enable the mode,\nand if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `envrc-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'envrc-global-mode 'globalized-minor-mode t)(defvar envrc-global-mode nil "Non-nil if Envrc-Global mode is enabled.\nSee the `envrc-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `envrc-global-mode'.")(autoload 'envrc-global-mode "envrc" "Toggle Envrc mode in all buffers.\nWith prefix ARG, enable Envrc-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nEnvrc mode is enabled in all buffers where `(lambda nil (unless (or\n(minibufferp) (file-remote-p default-directory)) (envrc-mode 1)))'\nwould do it.\n\nSee `envrc-mode' for more information on Envrc mode.\n\n(fn &optional ARG)" t)(autoload 'envrc-file-mode "envrc" "Major mode for .envrc files as used by direnv.\n\\{envrc-file-mode-map}\n\n(fn)" t)(autoload 'inheritenv-apply "inheritenv" "Apply FUNC such that the environment it sees will match the current value.\nThis is useful if FUNC creates a temp buffer, because that will\nnot inherit any buffer-local values of variables `exec-path' and\n`process-environment'.\n\nThis function is designed for convenient use as an \"around\" advice.\n\nARGS is as for ORIG.\n\n(fn FUNC &rest ARGS)")(autoload 'eros-eval-last-sexp "eros" "Wrapper for `eval-last-sexp' that overlays results.\n\n(fn EVAL-LAST-SEXP-ARG-INTERNAL)" t)(autoload 'eros-eval-defun "eros" "Wrapper for `eval-defun' that overlays results.\n\n(fn EDEBUG-IT)" t)(defvar eros-mode nil "Non-nil if Eros mode is enabled.\nSee the `eros-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `eros-mode'.")(autoload 'eros-mode "eros" "Display Emacs Lisp evaluation results overlays.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Eros mode' mode.  If the prefix argument is positive, enable the\nmode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='eros-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'quickrun-set-default "quickrun" "Set `key' as default key in programing language `lang'.\n\n(fn LANG KEY)")(autoload 'quickrun-select-default "quickrun" "Update the default." t)(autoload 'quickrun-add-command "quickrun" "Not documented.\n\n(fn KEY ALIST &key DEFAULT MODE OVERRIDE)")(function-put 'quickrun-add-command 'lisp-indent-function 'defun)(autoload 'quickrun "quickrun" "Run commands quickly for current buffer.\n\nWith universal prefix argument(C-u), select command-key,\nWith double prefix argument(C-u C-u), run in compile-only-mode.\n\n(fn &rest PLIST)" t)(autoload 'quickrun-select "quickrun" "Run commands after selecting the backend." t)(autoload 'quickrun-with-arg "quickrun" "Run commands quickly for current buffer with arguments.\n\n(fn ARG)" t)(autoload 'quickrun-region "quickrun" "Run commands with specified region.\n\n(fn START END)" t)(autoload 'quickrun-replace-region "quickrun" "Run commands with specified region and replace.\n\n(fn START END)" t)(autoload 'quickrun-eval-print "quickrun" "Run commands with specified region and replace.\n\n(fn START END)" t)(autoload 'quickrun-compile-only "quickrun" "Exec only compilation." t)(autoload 'quickrun-compile-only-select "quickrun" "Run commands after selecting the backend." t)(autoload 'quickrun-shell "quickrun" "Run commands in shell for interactive programs." t)(autoload 'quickrun-autorun-mode "quickrun" "`quickrun' after saving buffer.\n\nThis is a minor mode.  If called interactively, toggle the\n`Quickrun-Autorun mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `quickrun-autorun-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'anything-quickrun "quickrun" "Run quickrun with `anything'." t)(autoload 'helm-quickrun "quickrun" "Run quickrun with `helm'." t)(autoload 'request-response-header "request" "Fetch the values of RESPONSE header field named FIELD-NAME.\n\nIt returns comma separated values when the header has multiple\nfield with the same name, as :RFC:`2616` specifies.\n\nExamples::\n\n  (request-response-header response\n                           \"content-type\") ; => \"text/html; charset=utf-8\"\n  (request-response-header response\n                           \"unknown-field\") ; => nil\n\n(fn RESPONSE FIELD-NAME)")(autoload 'request-response-headers "request" "Return RESPONSE headers as an alist.\nI would have chosen a function name that wasn't so suggestive that\n`headers` is a member of the `request-response` struct, but\nas there's already precedent with `request-response-header', I\nhew to consistency.\n\n(fn RESPONSE)")(autoload 'request "request" "Main entry requesting URL with property list SETTINGS as follow.\n\n==================== ========================================================\nKeyword argument      Explanation\n==================== ========================================================\nTYPE          (string)   type of request to make: POST/GET/PUT/DELETE\nPARAMS         (alist)   set \"?key=val\" part in URL\nDATA    (string/alist)   data to be sent to the server\nFILES          (alist)   files to be sent to the server (see below)\nPARSER        (symbol)   a function that reads current buffer and return data\nHEADERS        (alist)   additional headers to send with the request\nENCODING      (symbol)   encoding for request body (utf-8 by default)\nSUCCESS     (function)   called on success\nERROR       (function)   called on error\nCOMPLETE    (function)   called on both success and error\nTIMEOUT       (number)   timeout in second\nSTATUS-CODE    (alist)   map status code (int) to callback\nSYNC            (bool)   If non-nil, wait until request is done. Default is nil.\n==================== ========================================================\n\n\n* Callback functions\n\nCallback functions STATUS, ERROR, COMPLETE and `cdr\\='s in element of\nthe alist STATUS-CODE take same keyword arguments listed below.  For\nforward compatibility, these functions must ignore unused keyword\narguments (i.e., it\\='s better to use `&allow-other-keys\\=' [#]_).::\n\n    (CALLBACK                      ; SUCCESS/ERROR/COMPLETE/STATUS-CODE\n     :data          data           ; whatever PARSER function returns, or nil\n     :error-thrown  error-thrown   ; (ERROR-SYMBOL . DATA), or nil\n     :symbol-status symbol-status  ; success/error/timeout/abort/parse-error\n     :response      response       ; request-response object\n     ...)\n\n.. [#] `&allow-other-keys\\=' is a special \"markers\" available in macros\n   in the CL library for function definition such as `cl-defun\\=' and\n   `cl-function\\='.  Without this marker, you need to specify all arguments\n   to be passed.  This becomes problem when request.el adds new arguments\n   when calling callback functions.  If you use `&allow-other-keys\\='\n   (or manually ignore other arguments), your code is free from this\n   problem.  See info node `(cl) Argument Lists\\=' for more information.\n\nArguments data, error-thrown, symbol-status can be accessed by\n`request-response-data\\=', `request-response-error-thrown\\=',\n`request-response-symbol-status\\=' accessors, i.e.::\n\n    (request-response-data RESPONSE)  ; same as data\n\nResponse object holds other information which can be accessed by\nthe following accessors:\n`request-response-status-code\\=',\n`request-response-url\\=' and\n`request-response-settings\\='\n\n* STATUS-CODE callback\n\nSTATUS-CODE is an alist of the following format::\n\n    ((N-1 . CALLBACK-1)\n     (N-2 . CALLBACK-2)\n     ...)\n\nHere, N-1, N-2,... are integer status codes such as 200.\n\n\n* FILES\n\nFILES is an alist of the following format::\n\n    ((NAME-1 . FILE-1)\n     (NAME-2 . FILE-2)\n     ...)\n\nwhere FILE-N is a list of the form::\n\n    (FILENAME &key PATH BUFFER STRING MIME-TYPE)\n\nFILE-N can also be a string (path to the file) or a buffer object.\nIn that case, FILENAME is set to the file name or buffer name.\n\nExample FILES argument::\n\n    `((\"passwd\"   . \"/etc/passwd\")                ; filename = passwd\n      (\"scratch\"  . ,(get-buffer \"*scratch*\"))    ; filename = *scratch*\n      (\"passwd2\"  . (\"password.txt\" :file \"/etc/passwd\"))\n      (\"scratch2\" . (\"scratch.txt\"  :buffer ,(get-buffer \"*scratch*\")))\n      (\"data\"     . (\"data.csv\"     :data \"1,2,3\\n4,5,6\\n\")))\n\n.. note:: FILES is implemented only for curl backend for now.\n   As furl.el_ supports multipart POST, it should be possible to\n   support FILES in pure elisp by making furl.el_ another backend.\n   Contributions are welcome.\n\n   .. _furl.el: https://code.google.com/p/furl-el/\n\n\n* PARSER function\n\nPARSER function takes no argument and it is executed in the\nbuffer with HTTP response body.  The current position in the HTTP\nresponse buffer is at the beginning of the buffer.  As the HTTP\nheader is stripped off, the cursor is actually at the beginning\nof the response body.  So, for example, you can pass `json-read\\='\nto parse JSON object in the buffer.  To fetch whole response as a\nstring, pass `buffer-string\\='.\n\nWhen using `json-read\\=', it is useful to know that the returned\ntype can be modified by `json-object-type\\=', `json-array-type\\=',\n`json-key-type\\=', `json-false\\=' and `json-null\\='.  See docstring of\neach function for what it does.  For example, to convert JSON\nobjects to plist instead of alist, wrap `json-read\\=' by `lambda\\='\nlike this.::\n\n    (request\n     \"https://...\"\n     :parser (lambda ()\n               (let ((json-object-type \\='plist))\n                 (json-read)))\n     ...)\n\nThis is analogous to the `dataType\\=' argument of jQuery.ajax_.\nOnly this function can access to the process buffer, which\nis killed immediately after the execution of this function.\n\n* SYNC\n\nSynchronous request is functional, but *please* don\\='t use it\nother than testing or debugging.  Emacs users have better things\nto do rather than waiting for HTTP request.  If you want a better\nway to write callback chains, use `request-deferred\\='.\n\nIf you can\\='t avoid using it (e.g., you are inside of some hook\nwhich must return some value), make sure to set TIMEOUT to\nrelatively small value.\n\nDue to limitation of `url-retrieve-synchronously\\=', response slots\n`request-response-error-thrown\\=', `request-response-history\\=' and\n`request-response-url\\=' are unknown (always nil) when using\nsynchronous request with `url-retrieve\\=' backend.\n\n* Note\n\nAPI of `request\\=' is somewhat mixture of jQuery.ajax_ (Javascript)\nand requests.request_ (Python).\n\n.. _jQuery.ajax: https://api.jquery.com/jQuery.ajax/\n.. _requests.request: https://docs.python-requests.org\n\n(fn URL &rest SETTINGS &key (PARAMS nil) (DATA nil) (HEADERS nil) (ENCODING \\='utf-8) (ERROR nil) (SYNC nil) (RESPONSE (make-request-response)) &allow-other-keys)")(function-put 'request 'lisp-indent-function 'defun)(autoload 'request-untrampify-filename "request" "Return FILE as the local file name.\n\n(fn FILE)")(autoload 'request-abort "request" "Abort request for RESPONSE (the object returned by `request').\nNote that this function invoke ERROR and COMPLETE callbacks.\nCallbacks may not be called immediately but called later when\nassociated process is exited.\n\n(fn RESPONSE)")(defvar dumb-jump-mode-map (let ((map (make-sparse-keymap))) (define-key map (kbd "C-M-g") 'dumb-jump-go) (define-key map (kbd "C-M-p") 'dumb-jump-back) (define-key map (kbd "C-M-q") 'dumb-jump-quick-look) map))(autoload 'dumb-jump-back "dumb-jump" "Jump back to where the last jump was done." t)(autoload 'dumb-jump-quick-look "dumb-jump" "Run dumb-jump-go in quick look mode.  That is, show a tooltip of where it would jump instead." t)(autoload 'dumb-jump-go-other-window "dumb-jump" "Like 'dumb-jump-go' but use 'find-file-other-window' instead of 'find-file'." t)(autoload 'dumb-jump-go-current-window "dumb-jump" "Like dumb-jump-go but always use 'find-file'." t)(autoload 'dumb-jump-go-prefer-external "dumb-jump" "Like dumb-jump-go but prefer external matches from the current file." t)(autoload 'dumb-jump-go-prompt "dumb-jump" "Like dumb-jump-go but prompts for function instead of using under point" t)(autoload 'dumb-jump-go-prefer-external-other-window "dumb-jump" "Like dumb-jump-go-prefer-external but use 'find-file-other-window' instead of 'find-file'." t)(autoload 'dumb-jump-go "dumb-jump" "Go to the function/variable declaration for thing at point.\nWhen USE-TOOLTIP is t a tooltip jump preview will show instead.\nWhen PREFER-EXTERNAL is t it will sort external matches before\ncurrent file.\n\n(fn &optional USE-TOOLTIP PREFER-EXTERNAL PROMPT)" t)(defvar dumb-jump-mode nil "Non-nil if Dumb-Jump mode is enabled.\nSee the `dumb-jump-mode' command\nfor a description of this minor mode.")(autoload 'dumb-jump-mode "dumb-jump" "Minor mode for jumping to variable and function definitions\n\nThis is a global minor mode.  If called interactively, toggle the\n`Dumb-Jump mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='dumb-jump-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'dumb-jump-xref-activate "dumb-jump" "Function to activate xref backend.\nAdd this function to `xref-backend-functions' to dumb jump to be\nactiviated, whenever it finds a project. It is recommended to add\nit to the end, so that it only gets activated when no better\noption is found.")(autoload 'consult-lsp-diagnostics "consult-lsp" "Query LSP-mode diagnostics.\n\nWhen ARG is set through prefix, query all workspaces.\n\n(fn ARG)" t)(autoload 'consult-lsp-symbols "consult-lsp" "Query workspace symbols. When ARG is set through prefix, query all workspaces.\n\n(fn ARG)" t)(autoload 'consult-lsp-file-symbols "consult-lsp" "Search symbols defined in current file in a manner similar to `consult-line'.\n\nIf the prefix argument GROUP-RESULTS is specified, symbols are grouped by their\nkind; otherwise they are returned in the order that they appear in the file.\n\n(fn GROUP-RESULTS)" t)(autoload 'lsp-cpp-flycheck-clang-tidy-error-explainer "lsp-clangd" "Explain a clang-tidy ERROR by scraping documentation from llvm.org.\n\n(fn ERROR)")(autoload 'lsp-clojure-show-test-tree "lsp-clojure" "Show a test tree and focus on it if IGNORE-FOCUS? is nil.\n\n(fn IGNORE-FOCUS?)" t)(autoload 'lsp-clojure-show-project-tree "lsp-clojure" "Show a project tree with source-paths and dependencies.\nFocus on it if IGNORE-FOCUS? is nil.\n\n(fn IGNORE-FOCUS?)" t)(define-obsolete-variable-alias 'lsp-prefer-capf 'lsp-completion-provider "lsp-mode 7.0.1")(define-obsolete-variable-alias 'lsp-enable-completion-at-point 'lsp-completion-enable "lsp-mode 7.0.1")(autoload 'lsp-completion-at-point "lsp-completion" "Get lsp completions.")(autoload 'lsp-completion--enable "lsp-completion" "Enable LSP completion support.")(autoload 'lsp-completion-mode "lsp-completion" "Toggle LSP completion support.\n\nThis is a minor mode.  If called interactively, toggle the\n`Lsp-Completion mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `lsp-completion-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-auto-configure lsp-completion-enable) (lsp-completion--enable))))(define-obsolete-variable-alias 'lsp-diagnostic-package 'lsp-diagnostics-provider "lsp-mode 7.0.1")(define-obsolete-variable-alias 'lsp-flycheck-default-level 'lsp-diagnostics-flycheck-default-level "lsp-mode 7.0.1")(autoload 'lsp-diagnostics-lsp-checker-if-needed "lsp-diagnostics")(autoload 'lsp-diagnostics--enable "lsp-diagnostics" "Enable LSP checker support.")(autoload 'lsp-diagnostics-mode "lsp-diagnostics" "Toggle LSP diagnostics integration.\n\nThis is a minor mode.  If called interactively, toggle the\n`Lsp-Diagnostics mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `lsp-diagnostics-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(add-hook 'lsp-configure-hook (lambda nil (when lsp-auto-configure (lsp-diagnostics--enable))))(defvar lsp-dired-mode nil "Non-nil if Lsp-Dired mode is enabled.\nSee the `lsp-dired-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `lsp-dired-mode'.")(autoload 'lsp-dired-mode "lsp-dired" "Display `lsp-mode' icons for each file in a dired buffer.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Lsp-Dired mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='lsp-dired-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'lsp-fsharp--workspace-load "lsp-fsharp" "Load all of the provided PROJECTS.\n\n(fn PROJECTS)")(autoload 'lsp-headerline-breadcrumb-mode "lsp-headerline" "Toggle breadcrumb on headerline.\n\nThis is a minor mode.  If called interactively, toggle the\n`Lsp-Headerline-Breadcrumb mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `lsp-headerline-breadcrumb-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'lsp-breadcrumb-go-to-symbol "lsp-headerline" "Go to the symbol on breadcrumb at SYMBOL-POSITION.\n\n(fn SYMBOL-POSITION)" t)(autoload 'lsp-breadcrumb-narrow-to-symbol "lsp-headerline" "Narrow to the symbol range on breadcrumb at SYMBOL-POSITION.\n\n(fn SYMBOL-POSITION)" t)(autoload 'lsp-ido-workspace-symbol "lsp-ido" "`ido' for lsp workspace/symbol.\nWhen called with prefix ARG the default selection will be symbol at point.\n\n(fn ARG)" t)(autoload 'lsp-iedit-highlights "lsp-iedit" "Start an `iedit' operation on the documentHighlights at point.\nThis can be used as a primitive `lsp-rename' replacement if the\nlanguage server doesn't support renaming.\n\nSee also `lsp-enable-symbol-highlighting'." t)(autoload 'lsp-iedit-linked-ranges "lsp-iedit" "Start an `iedit' for `textDocument/linkedEditingRange'" t)(autoload 'lsp-evil-multiedit-highlights "lsp-iedit" "Start an `evil-multiedit' operation on the documentHighlights at point.\nThis can be used as a primitive `lsp-rename' replacement if the\nlanguage server doesn't support renaming.\n\nSee also `lsp-enable-symbol-highlighting'." t)(autoload 'lsp-evil-multiedit-linked-ranges "lsp-iedit" "Start an `evil-multiedit' for `textDocument/linkedEditingRange'" t)(autoload 'lsp-evil-state-highlights "lsp-iedit" "Start `iedit-mode'. for `textDocument/documentHighlight'" t)(autoload 'lsp-evil-state-linked-ranges "lsp-iedit" "Start `iedit-mode'. for `textDocument/linkedEditingRange'" t)(autoload 'lsp-lens--enable "lsp-lens" "Enable lens mode.")(autoload 'lsp-lens-show "lsp-lens" "Display lenses in the buffer." t)(autoload 'lsp-lens-hide "lsp-lens" "Delete all lenses." t)(autoload 'lsp-lens-mode "lsp-lens" "Toggle code-lens overlays.\n\nThis is a minor mode.  If called interactively, toggle the\n`Lsp-Lens mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `lsp-lens-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'lsp-avy-lens "lsp-lens" "Click lsp lens using `avy' package." t)(put 'lsp-enable-file-watchers 'safe-local-variable #'booleanp)(put 'lsp-file-watch-ignored-directories 'safe-local-variable 'lsp--string-listp)(put 'lsp-file-watch-ignored-files 'safe-local-variable 'lsp--string-listp)(put 'lsp-file-watch-threshold 'safe-local-variable (lambda (i) (or (numberp i) (not i))))(autoload 'lsp--string-listp "lsp-mode" "Return t if all elements of SEQUENCE are strings, else nil.\n\n(fn SEQUENCE)")(autoload 'lsp-load-vscode-workspace "lsp-mode" "Load vscode workspace from FILE\n\n(fn FILE)" t)(autoload 'lsp-save-vscode-workspace "lsp-mode" "Save vscode workspace to FILE\n\n(fn FILE)" t)(autoload 'lsp-install-server "lsp-mode" "Interactively install or re-install server.\nWhen prefix UPDATE? is t force installation even if the server is present.\n\n(fn UPDATE? &optional SERVER-ID)" t)(autoload 'lsp-uninstall-server "lsp-mode" "Delete a LSP server from `lsp-server-install-dir'.\n\n(fn DIR)" t)(autoload 'lsp-uninstall-servers "lsp-mode" "Uninstall all installed servers." t)(autoload 'lsp-update-server "lsp-mode" "Interactively update (reinstall) a server.\n\n(fn &optional SERVER-ID)" t)(autoload 'lsp-update-servers "lsp-mode" "Update (reinstall) all installed servers." t)(autoload 'lsp-ensure-server "lsp-mode" "Ensure server SERVER-ID\n\n(fn SERVER-ID)")(autoload 'lsp "lsp-mode" "Entry point for the server startup.\nWhen ARG is t the lsp mode will start new language server even if\nthere is language server which can handle current language. When\nARG is nil current file will be opened in multi folder language\nserver if there is such. When `lsp' is called with prefix\nargument ask the user to select which language server to start.\n\n(fn &optional ARG)" t)(autoload 'lsp-deferred "lsp-mode" "Entry point that defers server startup until buffer is visible.\n`lsp-deferred' will wait until the buffer is visible before invoking `lsp'.\nThis avoids overloading the server with many files when starting Emacs.")(autoload 'lsp-start-plain "lsp-mode" "Start `lsp-mode' using minimal configuration using the latest `melpa' version\nof the packages.\n\nIn case the major-mode that you are using for " t)(define-obsolete-variable-alias 'lsp-diagnostics-modeline-scope 'lsp-modeline-diagnostics-scope "lsp-mode 7.0.1")(autoload 'lsp-modeline-code-actions-mode "lsp-modeline" "Toggle code actions on modeline.\n\nThis is a minor mode.  If called interactively, toggle the\n`Lsp-Modeline-Code-Actions mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `lsp-modeline-code-actions-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(define-obsolete-function-alias 'lsp-diagnostics-modeline-mode 'lsp-modeline-diagnostics-mode "lsp-mode 7.0.1")(autoload 'lsp-modeline-diagnostics-mode "lsp-modeline" "Toggle diagnostics modeline.\n\nThis is a minor mode.  If called interactively, toggle the\n`Lsp-Modeline-Diagnostics mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `lsp-modeline-diagnostics-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'lsp-modeline-workspace-status-mode "lsp-modeline" "Toggle workspace status on modeline.\n\nThis is a minor mode.  If called interactively, toggle the\n`Lsp-Modeline-Workspace-Status mode' mode.  If the prefix\nargument is positive, enable the mode, and if it is zero or\nnegative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `lsp-modeline-workspace-status-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar-local semantic-token-modifier-cache (make-hash-table) "A cache of modifier values to the selected fonts.\nThis allows whole-bitmap lookup instead of checking each bit. The\nexpectation is that usage of modifiers will tend to cluster, so\nwe will not have the full range of possible usages, hence a\ntractable hash map.\n\nThis is set as buffer-local. It should probably be shared in a\ngiven workspace/language-server combination.\n\nThis cache should be flushed every time any modifier\nconfiguration changes.")(autoload 'lsp--semantic-tokens-initialize-buffer "lsp-semantic-tokens" "Initialize the buffer for semantic tokens.\nIS-RANGE-PROVIDER is non-nil when server supports range requests.")(autoload 'lsp--semantic-tokens-initialize-workspace "lsp-semantic-tokens" "Initialize semantic tokens for WORKSPACE.\n\n(fn WORKSPACE)")(autoload 'lsp-semantic-tokens--warn-about-deprecated-setting "lsp-semantic-tokens" "Warn about deprecated semantic highlighting variable.")(autoload 'lsp-semantic-tokens--enable "lsp-semantic-tokens" "Enable semantic tokens mode.")(autoload 'lsp-semantic-tokens-mode "lsp-semantic-tokens" "Toggle semantic-tokens support.\n\nThis is a minor mode.  If called interactively, toggle the\n`Lsp-Semantic-Tokens mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `lsp-semantic-tokens-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'spinner-create "spinner" "Create a spinner of the given TYPE.\nThe possible TYPEs are described in `spinner--type-to-frames'.\n\nFPS, if given, is the number of desired frames per second.\nDefault is `spinner-frames-per-second'.\n\nIf BUFFER-LOCAL is non-nil, the spinner will be automatically\ndeactivated if the buffer is killed.  If BUFFER-LOCAL is a\nbuffer, use that instead of current buffer.\n\nWhen started, in order to function properly, the spinner runs a\ntimer which periodically calls `force-mode-line-update' in the\ncurrent buffer.  If BUFFER-LOCAL was set at creation time, then\n`force-mode-line-update' is called in that buffer instead.  When\nthe spinner is stopped, the timer is deactivated.\n\nDELAY, if given, is the number of seconds to wait after starting\nthe spinner before actually displaying it. It is safe to cancel\nthe spinner before this time, in which case it won't display at\nall.\n\n(fn &optional TYPE BUFFER-LOCAL FPS DELAY)")(autoload 'spinner-start "spinner" "Start a mode-line spinner of given TYPE-OR-OBJECT.\nIf TYPE-OR-OBJECT is an object created with `make-spinner',\nsimply activate it.  This method is designed for minor modes, so\nthey can use the spinner as part of their lighter by doing:\n    \\='(:eval (spinner-print THE-SPINNER))\nTo stop this spinner, call `spinner-stop' on it.\n\nIf TYPE-OR-OBJECT is anything else, a buffer-local spinner is\ncreated with this type, and it is displayed in the\n`mode-line-process' of the buffer it was created it.  Both\nTYPE-OR-OBJECT and FPS are passed to `make-spinner' (which see).\nTo stop this spinner, call `spinner-stop' in the same buffer.\n\nEither way, the return value is a function which can be called\nanywhere to stop this spinner.  You can also call `spinner-stop'\nin the same buffer where the spinner was created.\n\nFPS, if given, is the number of desired frames per second.\nDefault is `spinner-frames-per-second'.\n\nDELAY, if given, is the number of seconds to wait until actually\ndisplaying the spinner. It is safe to cancel the spinner before\nthis time, in which case it won't display at all.\n\n(fn &optional TYPE-OR-OBJECT FPS DELAY)")(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files.\n\n(fn)" t)(autoload 'gfm-mode "markdown-mode" "Major mode for editing GitHub Flavored Markdown files.\n\n(fn)" t)(autoload 'markdown-view-mode "markdown-mode" "Major mode for viewing Markdown content.\n\n(fn)" t)(autoload 'gfm-view-mode "markdown-mode" "Major mode for viewing GitHub Flavored Markdown content.\n\n(fn)" t)(autoload 'markdown-live-preview-mode "markdown-mode" "Toggle native previewing on save for a specific markdown file.\n\nThis is a minor mode.  If called interactively, toggle the\n`Markdown-Live-Preview mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `markdown-live-preview-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar eldoc-minor-mode-string (purecopy " ElDoc") "String to display in mode line when ElDoc Mode is enabled; nil for none.")(autoload 'eldoc-mode "eldoc" "Toggle echo area display of Lisp objects at point (ElDoc mode).\n\nElDoc mode is a buffer-local minor mode.  When enabled, the echo\narea displays information about a function or variable in the\ntext where point is.  If point is on a documented variable, it\ndisplays the first line of that variable's doc string.  Otherwise\nit displays the argument list of the function called in the\nexpression point is on.\n\nThis is a minor mode.  If called interactively, toggle the `Eldoc\nmode' mode.  If the prefix argument is positive, enable the mode,\nand if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `eldoc-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-eldoc-mode 'globalized-minor-mode t)(defcustom global-eldoc-mode t "Non-nil if Global Eldoc mode is enabled.\nSee the `global-eldoc-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-eldoc-mode'." :set #'custom-set-minor-mode :initialize 'custom-initialize-delay :type 'boolean)(autoload 'global-eldoc-mode "eldoc" "Toggle Eldoc mode in all buffers.\nWith prefix ARG, enable Global Eldoc mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nEldoc mode is enabled in all buffers where `turn-on-eldoc-mode' would\ndo it.\n\nSee `eldoc-mode' for more information on Eldoc mode.\n\n(fn &optional ARG)" t)(autoload 'turn-on-eldoc-mode "eldoc" "Turn on `eldoc-mode' if the buffer has ElDoc support enabled.\nSee `eldoc-documentation-strategy' for more detail.")(autoload 'lsp-ui-mode "lsp-ui" "Toggle language server UI mode on or off.\n\x2018lsp-ui-mode\x2019 is a minor mode that contains a series of useful UI\nintegrations for \x2018lsp-mode\x2019.  With a prefix argument ARG, enable\nlanguage server UI mode if ARG is positive, and disable it\notherwise.  If called from Lisp, enable the mode if ARG is\nomitted or nil, and toggle it if ARG is \x2018toggle\x2019.\n\n(fn &optional ARG)" t)(defvar magit-todos-mode nil "Non-nil if Magit-Todos mode is enabled.\nSee the `magit-todos-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `magit-todos-mode'.")(autoload 'magit-todos-mode "magit-todos" "Show list of to-do items in Magit status buffer for tracked files in repo.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Magit-Todos mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='magit-todos-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'magit-todos-list "magit-todos" "Show to-do list of the current Git repository in a buffer.\nWith prefix, prompt for repository.  Use repository in DIRECTORY,\nor `default-directory' if nil.\n\n(fn &optional DIRECTORY)" t)(autoload 'magit-todos-list-internal "magit-todos" "Open buffer showing to-do list of repository at DIRECTORY.\n\n(fn DIRECTORY)")(autoload 'async-start-process "async" "Start the executable PROGRAM asynchronously named NAME.  See `async-start'.\nPROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the\nprocess object when done.  If FINISH-FUNC is nil, the future\nobject will return the process object when the program is\nfinished.  Set DEFAULT-DIRECTORY to change PROGRAM's current\nworking directory.\n\n(fn NAME PROGRAM FINISH-FUNC &rest PROGRAM-ARGS)")(autoload 'async-start "async" "Execute START-FUNC (often a lambda) in a subordinate Emacs process.\nWhen done, the return value is passed to FINISH-FUNC.  Example:\n\n    (async-start\n       ;; What to do in the child process\n       (lambda ()\n         (message \"This is a test\")\n         (sleep-for 3)\n         222)\n\n       ;; What to do when it finishes\n       (lambda (result)\n         (message \"Async process done, result should be 222: %s\"\n                  result)))\n\nIf you call `async-send' from a child process, the message will\nbe also passed to the FINISH-FUNC.  You can test RESULT to see if\nit is a message by using `async-message-p'.  If nil, it means\nthis is the final result.  Example of the FINISH-FUNC:\n\n    (lambda (result)\n      (if (async-message-p result)\n          (message \"Received a message from child process: %s\" result)\n        (message \"Async process done, result: %s\" result)))\n\nIf FINISH-FUNC is nil or missing, a future is returned that can\nbe inspected using `async-get', blocking until the value is\nready.  Example:\n\n    (let ((proc (async-start\n                   ;; What to do in the child process\n                   (lambda ()\n                     (message \"This is a test\")\n                     (sleep-for 3)\n                     222))))\n\n        (message \"I'm going to do some work here\") ;; ....\n\n        (message \"Waiting on async process, result should be 222: %s\"\n                 (async-get proc)))\n\nIf you don't want to use a callback, and you don't care about any\nreturn value from the child process, pass the `ignore' symbol as\nthe second argument (if you don't, and never call `async-get', it\nwill leave *emacs* process buffers hanging around):\n\n    (async-start\n     (lambda ()\n       (delete-file \"a remote file on a slow link\" nil))\n     \\='ignore)\n\nSpecial case:\nIf the output of START-FUNC is a string with properties\ne.g. (buffer-string) RESULT will be transformed in a list where the\ncar is the string itself (without props) and the cdr the rest of\nproperties, this allows using in FINISH-FUNC the string without\nproperties and then apply the properties in cdr to this string (if\nneeded).\nProperties handling special objects like markers are returned as\nlist to allow restoring them later.\nSee <https://github.com/jwiegley/emacs-async/issues/145> for more infos.\n\nNote: Even when FINISH-FUNC is present, a future is still\nreturned except that it yields no value (since the value is\npassed to FINISH-FUNC).  Call `async-get' on such a future always\nreturns nil.  It can still be useful, however, as an argument to\n`async-ready' or `async-wait'.\n\n(fn START-FUNC &optional FINISH-FUNC)")(autoload 'async-byte-recompile-directory "async-bytecomp" "Compile all *.el files in DIRECTORY asynchronously.\nAll *.elc files are systematically deleted before proceeding.\n\n(fn DIRECTORY &optional QUIET)")(defvar async-bytecomp-package-mode nil "Non-nil if Async-Bytecomp-Package mode is enabled.\nSee the `async-bytecomp-package-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `async-bytecomp-package-mode'.")(autoload 'async-bytecomp-package-mode "async-bytecomp" "Byte compile asynchronously packages installed with package.el.\n\nAsync compilation of packages can be controlled by\n`async-bytecomp-allowed-packages'.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Async-Bytecomp-Package mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='async-bytecomp-package-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'async-byte-compile-file "async-bytecomp" "Byte compile Lisp code FILE asynchronously.\n\nSame as `byte-compile-file' but asynchronous.\n\n(fn FILE)" t)(defvar dired-async-mode nil "Non-nil if Dired-Async mode is enabled.\nSee the `dired-async-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `dired-async-mode'.")(autoload 'dired-async-mode "dired-async" "Do dired actions asynchronously.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Dired-Async mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='dired-async-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'dired-async-do-copy "dired-async" "Run \x2018\ dired-do-copy\x2019 asynchronously.\n\n(fn &optional ARG)" t)(autoload 'dired-async-do-symlink "dired-async" "Run \x2018\ dired-do-symlink\x2019 asynchronously.\n\n(fn &optional ARG)" t)(autoload 'dired-async-do-hardlink "dired-async" "Run \x2018\ dired-do-hardlink\x2019 asynchronously.\n\n(fn &optional ARG)" t)(autoload 'dired-async-do-rename "dired-async" "Run \x2018\ dired-do-rename\x2019 asynchronously.\n\n(fn &optional ARG)" t)(autoload 'git-rebase-current-line "git-rebase" "Parse current line into a `git-rebase-action' instance.\nIf the current line isn't recognized as a rebase line, an\ninstance with all nil values is returned.")(autoload 'git-rebase-mode "git-rebase" "Major mode for editing of a Git rebase file.\n\nRebase files are generated when you run \"git rebase -i\" or run\n`magit-interactive-rebase'.  They describe how Git should perform\nthe rebase.  See the documentation for git-rebase (e.g., by\nrunning \"man git-rebase\" at the command line) for details.\n\n(fn)" t)(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")(defvar magit-define-global-key-bindings 'default "Which set of key bindings to add to the global keymap, if any.\n\nThis option controls which set of Magit key bindings, if any, may\nbe added to the global keymap, even before Magit is first used in\nthe current Emacs session.\n\nIf the value is nil, no bindings are added.\n\nIf `default', maybe add:\n\n    C-x g     `magit-status'\n    C-x M-g   `magit-dispatch'\n    C-c M-g   `magit-file-dispatch'\n\nIf `recommended', maybe add:\n\n    C-x g     `magit-status'\n    C-c g     `magit-dispatch'\n    C-c f     `magit-file-dispatch'\n\n    These bindings are strongly recommended, but we cannot use\n    them by default, because the \"C-c <LETTER>\" namespace is\n    strictly reserved for bindings added by the user.\n\nThe bindings in the chosen set may be added when\n`after-init-hook' is run.  Each binding is added if, and only\nif, at that time no other key is bound to the same command,\nand no other command is bound to the same key.  In other words\nwe try to avoid adding bindings that are unnecessary, as well\nas bindings that conflict with other bindings.\n\nAdding these bindings is delayed until `after-init-hook' is\nrun to allow users to set the variable anywhere in their init\nfile (without having to make sure to do so before `magit' is\nloaded or autoloaded) and to increase the likelihood that all\nthe potentially conflicting user bindings have already been\nadded.\n\nTo set this variable use either `setq' or the Custom interface.\nDo not use the function `customize-set-variable' because doing\nthat would cause Magit to be loaded immediately, when that form\nis evaluated (this differs from `custom-set-variables', which\ndoesn't load the libraries that define the customized variables).\n\nSetting this variable has no effect if `after-init-hook' has\nalready been run.")(defun magit-maybe-define-global-key-bindings (&optional force) "See variable `magit-define-global-key-bindings'." (when magit-define-global-key-bindings (let ((map (current-global-map))) (pcase-dolist (`(,key \, def) (cond ((eq magit-define-global-key-bindings 'recommended) '(("C-x g" . magit-status) ("C-c g" . magit-dispatch) ("C-c f" . magit-file-dispatch))) ('(("C-x g" . magit-status) ("C-x M-g" . magit-dispatch) ("C-c M-g" . magit-file-dispatch))))) (when (or force (not (or (lookup-key map (kbd key)) (where-is-internal def (make-sparse-keymap) t)))) (define-key map (kbd key) def))))))(if after-init-time (magit-maybe-define-global-key-bindings) (add-hook 'after-init-hook #'magit-maybe-define-global-key-bindings t))(autoload 'magit-dispatch "magit" nil t)(autoload 'magit-run "magit" nil t)(autoload 'magit-git-command "magit" "Execute COMMAND asynchronously; display output.\n\nInteractively, prompt for COMMAND in the minibuffer. \"git \" is\nused as initial input, but can be deleted to run another command.\n\nWith a prefix argument COMMAND is run in the top-level directory\nof the current working tree, otherwise in `default-directory'.\n\n(fn COMMAND)" t)(autoload 'magit-git-command-topdir "magit" "Execute COMMAND asynchronously; display output.\n\nInteractively, prompt for COMMAND in the minibuffer. \"git \" is\nused as initial input, but can be deleted to run another command.\n\nCOMMAND is run in the top-level directory of the current\nworking tree.\n\n(fn COMMAND)" t)(autoload 'magit-shell-command "magit" "Execute COMMAND asynchronously; display output.\n\nInteractively, prompt for COMMAND in the minibuffer.  With a\nprefix argument COMMAND is run in the top-level directory of\nthe current working tree, otherwise in `default-directory'.\n\n(fn COMMAND)" t)(autoload 'magit-shell-command-topdir "magit" "Execute COMMAND asynchronously; display output.\n\nInteractively, prompt for COMMAND in the minibuffer.  COMMAND\nis run in the top-level directory of the current working tree.\n\n(fn COMMAND)" t)(autoload 'magit-version "magit" "Return the version of Magit currently in use.\n\nIf optional argument PRINT-DEST is non-nil, also print the used\nversions of Magit, Transient, Git and Emacs to the output stream\nselected by that argument.  Interactively use the echo area, or\nwith a prefix argument use the current buffer.  Additionally put\nthe output in the kill ring.\n\n(fn &optional PRINT-DEST)" t)(autoload 'magit-stage-buffer-file "magit-apply" "Stage all changes to the file being visited in the current buffer." t)(autoload 'magit-stage-file "magit-apply" "Read one or more files and stage all changes in those files.\nWith prefix argument FORCE, offer ignored files for completion.\n\n(fn FILES &optional FORCE)" t)(autoload 'magit-stage-modified "magit-apply" "Stage all changes to files modified in the worktree.\nStage all new content of tracked files and remove tracked files\nthat no longer exist in the working tree from the index also.\nWith a prefix argument also stage previously untracked (but not\nignored) files.\n\n(fn &optional ALL)" t)(autoload 'magit-unstage-buffer-file "magit-apply" "Unstage all changes to the file being visited in the current buffer." t)(autoload 'magit-unstage-file "magit-apply" "Read one or more files and unstage all changes to those files.\n\n(fn FILES)" t)(autoload 'magit-unstage-all "magit-apply" "Remove all changes from the staging area." t)(put 'magit-auto-revert-mode 'globalized-minor-mode t)(defvar magit-auto-revert-mode (not (or global-auto-revert-mode noninteractive)) "Non-nil if Magit-Auto-Revert mode is enabled.\nSee the `magit-auto-revert-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `magit-auto-revert-mode'.")(autoload 'magit-auto-revert-mode "magit-autorevert" "Toggle Auto-Revert mode in all buffers.\nWith prefix ARG, enable Magit-Auto-Revert mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nAuto-Revert mode is enabled in all buffers where\n`magit-turn-on-auto-revert-mode-if-desired' would do it.\n\nSee `auto-revert-mode' for more information on Auto-Revert mode.\n\n(fn &optional ARG)" t)(autoload 'magit-emacs-Q-command "magit-base" "Show a shell command that runs an uncustomized Emacs with only Magit loaded.\nSee info node `(magit)Debugging Tools' for more information." t)(autoload 'Info-follow-nearest-node--magit-gitman "magit-base" "\n\n(fn FN &optional FORK)")(advice-add 'Info-follow-nearest-node :around #'Info-follow-nearest-node--magit-gitman)(advice-add 'org-man-export :around #'org-man-export--magit-gitman)(autoload 'org-man-export--magit-gitman "magit-base" "\n\n(fn FN LINK DESCRIPTION FORMAT)")(autoload 'magit-bisect "magit-bisect" nil t)(autoload 'magit-bisect-start "magit-bisect" "Start a bisect session.\n\nBisecting a bug means to find the commit that introduced it.\nThis command starts such a bisect session by asking for a known\ngood and a known bad commit.  To move the session forward use the\nother actions from the bisect transient command (\\<magit-status-mode-map>\\[magit-bisect]).\n\n(fn BAD GOOD ARGS)" t)(autoload 'magit-bisect-reset "magit-bisect" "After bisecting, cleanup bisection state and return to original `HEAD'." t)(autoload 'magit-bisect-good "magit-bisect" "While bisecting, mark the current commit as good.\nUse this after you have asserted that the commit does not contain\nthe bug in question." t)(autoload 'magit-bisect-bad "magit-bisect" "While bisecting, mark the current commit as bad.\nUse this after you have asserted that the commit does contain the\nbug in question." t)(autoload 'magit-bisect-mark "magit-bisect" "While bisecting, mark the current commit with a bisect term.\nDuring a bisect using alternate terms, commits can still be\nmarked with `magit-bisect-good' and `magit-bisect-bad', as those\ncommands map to the correct term (\"good\" to --term-old's value\nand \"bad\" to --term-new's).  However, in some cases, it can be\ndifficult to keep that mapping straight in your head; this\ncommand provides an interface that exposes the underlying terms." t)(autoload 'magit-bisect-skip "magit-bisect" "While bisecting, skip the current commit.\nUse this if for some reason the current commit is not a good one\nto test.  This command lets Git choose a different one." t)(autoload 'magit-bisect-run "magit-bisect" "Bisect automatically by running commands after each step.\n\nUnlike `git bisect run' this can be used before bisecting has\nbegun.  In that case it behaves like `git bisect start; git\nbisect run'.\n\n(fn CMDLINE &optional BAD GOOD ARGS)" t)(autoload 'magit-blame-echo "magit-blame" nil t)(autoload 'magit-blame-addition "magit-blame" nil t)(autoload 'magit-blame-removal "magit-blame" nil t)(autoload 'magit-blame-reverse "magit-blame" nil t)(autoload 'magit-blame "magit-blame" nil t)(autoload 'magit-branch "magit" nil t)(autoload 'magit-checkout "magit-branch" "Checkout REVISION, updating the index and the working tree.\nIf REVISION is a local branch, then that becomes the current\nbranch.  If it is something else, then `HEAD' becomes detached.\nCheckout fails if the working tree or the staging area contain\nchanges.\n\n(git checkout REVISION).\n\n(fn REVISION &optional ARGS)" t)(function-put 'magit-checkout 'interactive-only 'magit--checkout)(autoload 'magit-branch-create "magit-branch" "Create BRANCH at branch or revision START-POINT.\n\n(fn BRANCH START-POINT)" t)(function-put 'magit-branch-create 'interactive-only 'magit-call-git)(autoload 'magit-branch-and-checkout "magit-branch" "Create and checkout BRANCH at branch or revision START-POINT.\n\n(fn BRANCH START-POINT &optional ARGS)" t)(function-put 'magit-branch-and-checkout 'interactive-only 'magit-call-git)(autoload 'magit-branch-or-checkout "magit-branch" "Hybrid between `magit-checkout' and `magit-branch-and-checkout'.\n\nAsk the user for an existing branch or revision.  If the user\ninput actually can be resolved as a branch or revision, then\ncheck that out, just like `magit-checkout' would.\n\nOtherwise create and checkout a new branch using the input as\nits name.  Before doing so read the starting-point for the new\nbranch.  This is similar to what `magit-branch-and-checkout'\ndoes.\n\n(fn ARG &optional START-POINT)" t)(function-put 'magit-branch-or-checkout 'interactive-only 'magit-call-git)(autoload 'magit-branch-checkout "magit-branch" "Checkout an existing or new local branch.\n\nRead a branch name from the user offering all local branches and\na subset of remote branches as candidates.  Omit remote branches\nfor which a local branch by the same name exists from the list\nof candidates.  The user can also enter a completely new branch\nname.\n\n- If the user selects an existing local branch, then check that\n  out.\n\n- If the user selects a remote branch, then create and checkout\n  a new local branch with the same name.  Configure the selected\n  remote branch as push target.\n\n- If the user enters a new branch name, then create and check\n  that out, after also reading the starting-point from the user.\n\nIn the latter two cases the upstream is also set.  Whether it is\nset to the chosen START-POINT or something else depends on the\nvalue of `magit-branch-adjust-remote-upstream-alist', just like\nwhen using `magit-branch-and-checkout'.\n\n(fn BRANCH &optional START-POINT)" t)(function-put 'magit-branch-checkout 'interactive-only 'magit-call-git)(autoload 'magit-branch-orphan "magit-branch" "Create and checkout an orphan BRANCH with contents from revision START-POINT.\n\n(fn BRANCH START-POINT)" t)(autoload 'magit-branch-spinout "magit-branch" "Create new branch from the unpushed commits.\nLike `magit-branch-spinoff' but remain on the current branch.\nIf there are any uncommitted changes, then behave exactly like\n`magit-branch-spinoff'.\n\n(fn BRANCH &optional FROM)" t)(autoload 'magit-branch-spinoff "magit-branch" "Create new branch from the unpushed commits.\n\nCreate and checkout a new branch starting at and tracking the\ncurrent branch.  That branch in turn is reset to the last commit\nit shares with its upstream.  If the current branch has no\nupstream or no unpushed commits, then the new branch is created\nanyway and the previously current branch is not touched.\n\nThis is useful to create a feature branch after work has already\nbegan on the old branch (likely but not necessarily \"master\").\n\nIf the current branch is a member of the value of option\n`magit-branch-prefer-remote-upstream' (which see), then the\ncurrent branch will be used as the starting point as usual, but\nthe upstream of the starting-point may be used as the upstream\nof the new branch, instead of the starting-point itself.\n\nIf optional FROM is non-nil, then the source branch is reset\nto `FROM~', instead of to the last commit it shares with its\nupstream.  Interactively, FROM is only ever non-nil, if the\nregion selects some commits, and among those commits, FROM is\nthe commit that is the fewest commits ahead of the source\nbranch.\n\nThe commit at the other end of the selection actually does not\nmatter, all commits between FROM and `HEAD' are moved to the new\nbranch.  If FROM is not reachable from `HEAD' or is reachable\nfrom the source branch's upstream, then an error is raised.\n\n(fn BRANCH &optional FROM)" t)(autoload 'magit-branch-reset "magit-branch" "Reset a branch to the tip of another branch or any other commit.\n\nWhen the branch being reset is the current branch, then do a\nhard reset.  If there are any uncommitted changes, then the user\nhas to confirm the reset because those changes would be lost.\n\nThis is useful when you have started work on a feature branch but\nrealize it's all crap and want to start over.\n\nWhen resetting to another branch and a prefix argument is used,\nthen also set the target branch as the upstream of the branch\nthat is being reset.\n\n(fn BRANCH TO &optional SET-UPSTREAM)" t)(autoload 'magit-branch-delete "magit-branch" "Delete one or multiple branches.\n\nIf the region marks multiple branches, then offer to delete\nthose, otherwise prompt for a single branch to be deleted,\ndefaulting to the branch at point.\n\nRequire confirmation when deleting branches is dangerous in some\nway.  Option `magit-no-confirm' can be customized to not require\nconfirmation in certain cases.  See its docstring to learn why\nconfirmation is required by default in certain cases or if a\nprompt is confusing.\n\n(fn BRANCHES &optional FORCE)" t)(autoload 'magit-branch-rename "magit-branch" "Rename the branch named OLD to NEW.\n\nWith a prefix argument FORCE, rename even if a branch named NEW\nalready exists.\n\nIf `branch.OLD.pushRemote' is set, then unset it.  Depending on\nthe value of `magit-branch-rename-push-target' (which see) maybe\nset `branch.NEW.pushRemote' and maybe rename the push-target on\nthe remote.\n\n(fn OLD NEW &optional FORCE)" t)(autoload 'magit-branch-shelve "magit-branch" "Shelve a BRANCH.\nRename \"refs/heads/BRANCH\" to \"refs/shelved/BRANCH\",\nand also rename the respective reflog file.\n\n(fn BRANCH)" t)(autoload 'magit-branch-unshelve "magit-branch" "Unshelve a BRANCH\nRename \"refs/shelved/BRANCH\" to \"refs/heads/BRANCH\",\nand also rename the respective reflog file.\n\n(fn BRANCH)" t)(autoload 'magit-branch-configure "magit-branch" nil t)(autoload 'magit-bundle "magit-bundle" nil t)(autoload 'magit-bundle-import "magit-bundle" nil t)(autoload 'magit-bundle-create-tracked "magit-bundle" "Create and track a new bundle.\n\n(fn FILE TAG BRANCH REFS ARGS)" t)(autoload 'magit-bundle-update-tracked "magit-bundle" "Update a bundle that is being tracked using TAG.\n\n(fn TAG)" t)(autoload 'magit-bundle-verify "magit-bundle" "Check whether FILE is valid and applies to the current repository.\n\n(fn FILE)" t)(autoload 'magit-bundle-list-heads "magit-bundle" "List the refs in FILE.\n\n(fn FILE)" t)(autoload 'magit-clone "magit-clone" nil t)(autoload 'magit-clone-regular "magit-clone" "Create a clone of REPOSITORY in DIRECTORY.\nThen show the status buffer for the new repository.\n\n(fn REPOSITORY DIRECTORY ARGS)" t)(autoload 'magit-clone-shallow "magit-clone" "Create a shallow clone of REPOSITORY in DIRECTORY.\nThen show the status buffer for the new repository.\nWith a prefix argument read the DEPTH of the clone;\notherwise use 1.\n\n(fn REPOSITORY DIRECTORY ARGS DEPTH)" t)(autoload 'magit-clone-shallow-since "magit-clone" "Create a shallow clone of REPOSITORY in DIRECTORY.\nThen show the status buffer for the new repository.\nExclude commits before DATE, which is read from the\nuser.\n\n(fn REPOSITORY DIRECTORY ARGS DATE)" t)(autoload 'magit-clone-shallow-exclude "magit-clone" "Create a shallow clone of REPOSITORY in DIRECTORY.\nThen show the status buffer for the new repository.\nExclude commits reachable from EXCLUDE, which is a\nbranch or tag read from the user.\n\n(fn REPOSITORY DIRECTORY ARGS EXCLUDE)" t)(autoload 'magit-clone-bare "magit-clone" "Create a bare clone of REPOSITORY in DIRECTORY.\nThen show the status buffer for the new repository.\n\n(fn REPOSITORY DIRECTORY ARGS)" t)(autoload 'magit-clone-mirror "magit-clone" "Create a mirror of REPOSITORY in DIRECTORY.\nThen show the status buffer for the new repository.\n\n(fn REPOSITORY DIRECTORY ARGS)" t)(autoload 'magit-clone-sparse "magit-clone" "Clone REPOSITORY into DIRECTORY and create a sparse checkout.\n\n(fn REPOSITORY DIRECTORY ARGS)" t)(autoload 'magit-commit "magit-commit" nil t)(autoload 'magit-commit-create "magit-commit" "Create a new commit on `HEAD'.\nWith a prefix argument, amend to the commit at `HEAD' instead.\n\n(git commit [--amend] ARGS)\n\n(fn &optional ARGS)" t)(autoload 'magit-commit-amend "magit-commit" "Amend the last commit.\n\n(git commit --amend ARGS)\n\n(fn &optional ARGS)" t)(autoload 'magit-commit-extend "magit-commit" "Amend the last commit, without editing the message.\n\nWith a prefix argument keep the committer date, otherwise change\nit.  The option `magit-commit-extend-override-date' can be used\nto inverse the meaning of the prefix argument.\n\n(git commit --amend --no-edit)\n\n(fn &optional ARGS OVERRIDE-DATE)" t)(autoload 'magit-commit-reword "magit-commit" "Reword the last commit, ignoring staged changes.\n\nWith a prefix argument keep the committer date, otherwise change\nit.  The option `magit-commit-reword-override-date' can be used\nto inverse the meaning of the prefix argument.\n\nNon-interactively respect the optional OVERRIDE-DATE argument\nand ignore the option.\n\n(git commit --amend --only)\n\n(fn &optional ARGS OVERRIDE-DATE)" t)(autoload 'magit-commit-fixup "magit-commit" "Create a fixup commit.\n\nWith a prefix argument the target COMMIT has to be confirmed.\nOtherwise the commit at point may be used without confirmation\ndepending on the value of option `magit-commit-squash-confirm'.\n\n(fn &optional COMMIT ARGS)" t)(autoload 'magit-commit-squash "magit-commit" "Create a squash commit, without editing the squash message.\n\nWith a prefix argument the target COMMIT has to be confirmed.\nOtherwise the commit at point may be used without confirmation\ndepending on the value of option `magit-commit-squash-confirm'.\n\nIf you want to immediately add a message to the squash commit,\nthen use `magit-commit-augment' instead of this command.\n\n(fn &optional COMMIT ARGS)" t)(autoload 'magit-commit-augment "magit-commit" "Create a squash commit, editing the squash message.\n\nWith a prefix argument the target COMMIT has to be confirmed.\nOtherwise the commit at point may be used without confirmation\ndepending on the value of option `magit-commit-squash-confirm'.\n\n(fn &optional COMMIT ARGS)" t)(autoload 'magit-commit-instant-fixup "magit-commit" "Create a fixup commit targeting COMMIT and instantly rebase.\n\n(fn &optional COMMIT ARGS)" t)(autoload 'magit-commit-instant-squash "magit-commit" "Create a squash commit targeting COMMIT and instantly rebase.\n\n(fn &optional COMMIT ARGS)" t)(autoload 'magit-commit-reshelve "magit-commit" "Change the committer date and possibly the author date of `HEAD'.\n\nThe current time is used as the initial minibuffer input and the\noriginal author or committer date is available as the previous\nhistory element.\n\nBoth the author and the committer dates are changed, unless one\nof the following is true, in which case only the committer date\nis updated:\n- You are not the author of the commit that is being reshelved.\n- The command was invoked with a prefix argument.\n- Non-interactively if UPDATE-AUTHOR is nil.\n\n(fn DATE UPDATE-AUTHOR &optional ARGS)" t)(autoload 'magit-commit-absorb-modules "magit-commit" "Spread modified modules across recent commits.\n\n(fn PHASE COMMIT)" t)(autoload 'magit-commit-absorb "magit-commit" nil t)(autoload 'magit-commit-autofixup "magit-commit" nil t)(autoload 'magit-diff "magit-diff" nil t)(autoload 'magit-diff-refresh "magit-diff" nil t)(autoload 'magit-diff-dwim "magit-diff" "Show changes for the thing at point.\n\n(fn &optional ARGS FILES)" t)(autoload 'magit-diff-range "magit-diff" "Show differences between two commits.\n\nREV-OR-RANGE should be a range or a single revision.  If it is a\nrevision, then show changes in the working tree relative to that\nrevision.  If it is a range, but one side is omitted, then show\nchanges relative to `HEAD'.\n\nIf the region is active, use the revisions on the first and last\nline of the region as the two sides of the range.  With a prefix\nargument, instead of diffing the revisions, choose a revision to\nview changes along, starting at the common ancestor of both\nrevisions (i.e., use a \"...\" range).\n\n(fn REV-OR-RANGE &optional ARGS FILES)" t)(autoload 'magit-diff-working-tree "magit-diff" "Show changes between the current working tree and the `HEAD' commit.\nWith a prefix argument show changes between the working tree and\na commit read from the minibuffer.\n\n(fn &optional REV ARGS FILES)" t)(autoload 'magit-diff-staged "magit-diff" "Show changes between the index and the `HEAD' commit.\nWith a prefix argument show changes between the index and\na commit read from the minibuffer.\n\n(fn &optional REV ARGS FILES)" t)(autoload 'magit-diff-unstaged "magit-diff" "Show changes between the working tree and the index.\n\n(fn &optional ARGS FILES)" t)(autoload 'magit-diff-unmerged "magit-diff" "Show changes that are being merged.\n\n(fn &optional ARGS FILES)" t)(autoload 'magit-diff-while-committing "magit-diff" "While committing, show the changes that are about to be committed.\nWhile amending, invoking the command again toggles between\nshowing just the new changes or all the changes that will\nbe committed." t)(autoload 'magit-diff-buffer-file "magit-diff" "Show diff for the blob or file visited in the current buffer.\n\nWhen the buffer visits a blob, then show the respective commit.\nWhen the buffer visits a file, then show the differences between\n`HEAD' and the working tree.  In both cases limit the diff to\nthe file or blob." t)(autoload 'magit-diff-paths "magit-diff" "Show changes between any two files on disk.\n\n(fn A B)" t)(autoload 'magit-show-commit "magit-diff" "Visit the revision at point in another buffer.\nIf there is no revision at point or with a prefix argument prompt\nfor a revision.\n\n(fn REV &optional ARGS FILES MODULE)" t)(autoload 'magit-ediff "magit-ediff" nil)(autoload 'magit-ediff-resolve-all "magit-ediff" "Resolve all conflicts in the FILE at point using Ediff.\n\nIf there is no file at point or if it doesn't have any unmerged\nchanges, then prompt for a file.\n\nSee info node `(magit) Ediffing' for more information about this\nand alternative commands.\n\n(fn FILE)" t)(autoload 'magit-ediff-resolve-rest "magit-ediff" "Resolve outstanding conflicts in the FILE at point using Ediff.\n\nIf there is no file at point or if it doesn't have any unmerged\nchanges, then prompt for a file.\n\nSee info node `(magit) Ediffing' for more information about this\nand alternative commands.\n\n(fn FILE)" t)(autoload 'magit-ediff-stage "magit-ediff" "Stage and unstage changes to FILE using Ediff.\nFILE has to be relative to the top directory of the repository.\n\n(fn FILE)" t)(autoload 'magit-ediff-compare "magit-ediff" "Compare REVA:FILEA with REVB:FILEB using Ediff.\n\nFILEA and FILEB have to be relative to the top directory of the\nrepository.  If REVA or REVB is nil, then this stands for the\nworking tree state.\n\nIf the region is active, use the revisions on the first and last\nline of the region.  With a prefix argument, instead of diffing\nthe revisions, choose a revision to view changes along, starting\nat the common ancestor of both revisions (i.e., use a \"...\"\nrange).\n\n(fn REVA REVB FILEA FILEB)" t)(autoload 'magit-ediff-dwim "magit-ediff" "Compare, stage, or resolve using Ediff.\nThis command tries to guess what file, and what commit or range\nthe user wants to compare, stage, or resolve using Ediff.  It\nmight only be able to guess either the file, or range or commit,\nin which case the user is asked about the other.  It might not\nalways guess right, in which case the appropriate `magit-ediff-*'\ncommand has to be used explicitly.  If it cannot read the user's\nmind at all, then it asks the user for a command to run." t)(autoload 'magit-ediff-show-staged "magit-ediff" "Show staged changes using Ediff.\n\nThis only allows looking at the changes; to stage, unstage,\nand discard changes using Ediff, use `magit-ediff-stage'.\n\nFILE must be relative to the top directory of the repository.\n\n(fn FILE)" t)(autoload 'magit-ediff-show-unstaged "magit-ediff" "Show unstaged changes using Ediff.\n\nThis only allows looking at the changes; to stage, unstage,\nand discard changes using Ediff, use `magit-ediff-stage'.\n\nFILE must be relative to the top directory of the repository.\n\n(fn FILE)" t)(autoload 'magit-ediff-show-working-tree "magit-ediff" "Show changes between `HEAD' and working tree using Ediff.\nFILE must be relative to the top directory of the repository.\n\n(fn FILE)" t)(autoload 'magit-ediff-show-commit "magit-ediff" "Show changes introduced by COMMIT using Ediff.\n\n(fn COMMIT)" t)(autoload 'magit-ediff-show-stash "magit-ediff" "Show changes introduced by STASH using Ediff.\n`magit-ediff-show-stash-with-index' controls whether a\nthree-buffer Ediff is used in order to distinguish changes in the\nstash that were staged.\n\n(fn STASH)" t)(autoload 'magit-git-mergetool "magit-extras" nil t)(autoload 'magit-run-git-gui-blame "magit-extras" "Run `git gui blame' on the given FILENAME and COMMIT.\nInteractively run it for the current file and the `HEAD', with a\nprefix or when the current file cannot be determined let the user\nchoose.  When the current buffer is visiting FILENAME instruct\nblame to center around the line point is on.\n\n(fn COMMIT FILENAME &optional LINENUM)" t)(autoload 'magit-run-git-gui "magit-extras" "Run `git gui' for the current git repository." t)(autoload 'magit-run-gitk "magit-extras" "Run `gitk' in the current repository." t)(autoload 'magit-run-gitk-branches "magit-extras" "Run `gitk --branches' in the current repository." t)(autoload 'magit-run-gitk-all "magit-extras" "Run `gitk --all' in the current repository." t)(autoload 'ido-enter-magit-status "magit-extras" "Drop into `magit-status' from file switching.\n\nThis command does not work in Emacs 26.1.\nSee https://github.com/magit/magit/issues/3634\nand https://debbugs.gnu.org/cgi/bugreport.cgi?bug=31707.\n\nTo make this command available use something like:\n\n  (add-hook \\='ido-setup-hook\n            (lambda ()\n              (keymap-set ido-completion-map\n                          \"C-x g\" \\='ido-enter-magit-status)))\n\nStarting with Emacs 25.1 the Ido keymaps are defined just once\ninstead of every time Ido is invoked, so now you can modify it\nlike pretty much every other keymap:\n\n  (keymap-set ido-common-completion-map\n              \"C-x g\" \\='ido-enter-magit-status)" t)(autoload 'magit-project-status "magit-extras" "Run `magit-status' in the current project's root." t)(autoload 'magit-dired-jump "magit-extras" "Visit file at point using Dired.\nWith a prefix argument, visit in another window.  If there\nis no file at point, then instead visit `default-directory'.\n\n(fn &optional OTHER-WINDOW)" t)(autoload 'magit-dired-log "magit-extras" "Show log for all marked files, or the current file.\n\n(fn &optional FOLLOW)" t)(autoload 'magit-dired-am-apply-patches "magit-extras" "In Dired, apply the marked (or next ARG) files as patches.\nIf inside a repository, then apply in that.  Otherwise prompt\nfor a repository.\n\n(fn REPO &optional ARG)" t)(autoload 'magit-do-async-shell-command "magit-extras" "Open FILE with `dired-do-async-shell-command'.\nInteractively, open the file at point.\n\n(fn FILE)" t)(autoload 'magit-previous-line "magit-extras" "Like `previous-line' but with Magit-specific shift-selection.\n\nMagit's selection mechanism is based on the region but selects an\narea that is larger than the region.  This causes `previous-line'\nwhen invoked while holding the shift key to move up one line and\nthereby select two lines.  When invoked inside a hunk body this\ncommand does not move point on the first invocation and thereby\nit only selects a single line.  Which inconsistency you prefer\nis a matter of preference.\n\n(fn &optional ARG TRY-VSCROLL)" t)(function-put 'magit-previous-line 'interactive-only '"use `forward-line' with negative argument instead.")(autoload 'magit-next-line "magit-extras" "Like `next-line' but with Magit-specific shift-selection.\n\nMagit's selection mechanism is based on the region but selects\nan area that is larger than the region.  This causes `next-line'\nwhen invoked while holding the shift key to move down one line\nand thereby select two lines.  When invoked inside a hunk body\nthis command does not move point on the first invocation and\nthereby it only selects a single line.  Which inconsistency you\nprefer is a matter of preference.\n\n(fn &optional ARG TRY-VSCROLL)" t)(function-put 'magit-next-line 'interactive-only 'forward-line)(autoload 'magit-clean "magit-extras" "Remove untracked files from the working tree.\nWith a prefix argument also remove ignored files,\nwith two prefix arguments remove ignored files only.\n\n(git clean -f -d [-x|-X])\n\n(fn &optional ARG)" t)(autoload 'magit-generate-changelog "magit-extras" "Insert ChangeLog entries into the current buffer.\n\nThe entries are generated from the diff being committed.\nIf prefix argument, AMENDING, is non-nil, include changes\nin HEAD as well as staged changes in the diff to check.\n\n(fn &optional AMENDING)" t)(autoload 'magit-add-change-log-entry "magit-extras" "Find change log file and add date entry and item for current change.\nThis differs from `add-change-log-entry' (which see) in that\nit acts on the current hunk in a Magit buffer instead of on\na position in a file-visiting buffer.\n\n(fn &optional WHOAMI FILE-NAME OTHER-WINDOW)" t)(autoload 'magit-add-change-log-entry-other-window "magit-extras" "Find change log file in other window and add entry and item.\nThis differs from `add-change-log-entry-other-window' (which see)\nin that it acts on the current hunk in a Magit buffer instead of\non a position in a file-visiting buffer.\n\n(fn &optional WHOAMI FILE-NAME)" t)(autoload 'magit-edit-line-commit "magit-extras" "Edit the commit that added the current line.\n\nWith a prefix argument edit the commit that removes the line,\nif any.  The commit is determined using `git blame' and made\neditable using `git rebase --interactive' if it is reachable\nfrom `HEAD', or by checking out the commit (or a branch that\npoints at it) otherwise.\n\n(fn &optional TYPE)" t)(autoload 'magit-diff-edit-hunk-commit "magit-extras" "From a hunk, edit the respective commit and visit the file.\n\nFirst visit the file being modified by the hunk at the correct\nlocation using `magit-diff-visit-file'.  This actually visits a\nblob.  When point is on a diff header, not within an individual\nhunk, then this visits the blob the first hunk is about.\n\nThen invoke `magit-edit-line-commit', which uses an interactive\nrebase to make the commit editable, or if that is not possible\nbecause the commit is not reachable from `HEAD' by checking out\nthat commit directly.  This also causes the actual worktree file\nto be visited.\n\nNeither the blob nor the file buffer are killed when finishing\nthe rebase.  If that is undesirable, then it might be better to\nuse `magit-rebase-edit-commit' instead of this command.\n\n(fn FILE)" t)(autoload 'magit-reshelve-since "magit-extras" "Change the author and committer dates of the commits since REV.\n\nAsk the user for the first reachable commit whose dates should\nbe changed.  Then read the new date for that commit.  The initial\nminibuffer input and the previous history element offer good\nvalues.  The next commit will be created one minute later and so\non.\n\nThis command is only intended for interactive use and should only\nbe used on highly rearranged and unpublished history.\n\nIf KEYID is non-nil, then use that to sign all reshelved commits.\nInteractively use the value of the \"--gpg-sign\" option in the\nlist returned by `magit-rebase-arguments'.\n\n(fn REV KEYID)" t)(autoload 'magit-pop-revision-stack "magit-extras" "Insert a representation of a revision into the current buffer.\n\nPop a revision from the `magit-revision-stack' and insert it into\nthe current buffer according to `magit-pop-revision-stack-format'.\nRevisions can be put on the stack using `magit-copy-section-value'\nand `magit-copy-buffer-revision'.\n\nIf the stack is empty or with a prefix argument, instead read a\nrevision in the minibuffer.  By using the minibuffer history this\nallows selecting an item which was popped earlier or to insert an\narbitrary reference or revision without first pushing it onto the\nstack.\n\nWhen reading the revision from the minibuffer, then it might not\nbe possible to guess the correct repository.  When this command\nis called inside a repository (e.g., while composing a commit\nmessage), then that repository is used.  Otherwise (e.g., while\ncomposing an email) then the repository recorded for the top\nelement of the stack is used (even though we insert another\nrevision).  If not called inside a repository and with an empty\nstack, or with two prefix arguments, then read the repository in\nthe minibuffer too.\n\n(fn REV TOPLEVEL)" t)(autoload 'magit-copy-section-value "magit-extras" "Save the value of the current section for later use.\n\nSave the section value to the `kill-ring', and, provided that\nthe current section is a commit, branch, or tag section, push\nthe (referenced) revision to the `magit-revision-stack' for use\nwith `magit-pop-revision-stack'.\n\nWhen `magit-copy-revision-abbreviated' is non-nil, save the\nabbreviated revision to the `kill-ring' and the\n`magit-revision-stack'.\n\nWhen the current section is a branch or a tag, and a prefix\nargument is used, then save the revision at its tip to the\n`kill-ring' instead of the reference name.\n\nWhen the region is active, then save that to the `kill-ring',\nlike `kill-ring-save' would, instead of behaving as described\nabove.  If a prefix argument is used and the region is within\na hunk, then strip the diff marker column and keep only either\nthe added or removed lines, depending on the sign of the prefix\nargument.\n\n(fn ARG)" t)(autoload 'magit-copy-buffer-revision "magit-extras" "Save the revision of the current buffer for later use.\n\nSave the revision shown in the current buffer to the `kill-ring'\nand push it to the `magit-revision-stack'.\n\nThis command is mainly intended for use in `magit-revision-mode'\nbuffers, the only buffers where it is always unambiguous exactly\nwhich revision should be saved.\n\nMost other Magit buffers usually show more than one revision, in\nsome way or another, so this command has to select one of them,\nand that choice might not always be the one you think would have\nbeen the best pick.\n\nIn such buffers it is often more useful to save the value of\nthe current section instead, using `magit-copy-section-value'.\n\nWhen the region is active, then save that to the `kill-ring',\nlike `kill-ring-save' would, instead of behaving as described\nabove.\n\nWhen `magit-copy-revision-abbreviated' is non-nil, save the\nabbreviated revision to the `kill-ring' and the\n`magit-revision-stack'." t)(autoload 'magit-display-repository-buffer "magit-extras" "Display a Magit buffer belonging to the current Git repository.\nThe buffer is displayed using `magit-display-buffer', which see.\n\n(fn BUFFER)" t)(autoload 'magit-switch-to-repository-buffer "magit-extras" "Switch to a Magit buffer belonging to the current Git repository.\n\n(fn BUFFER)" t)(autoload 'magit-switch-to-repository-buffer-other-window "magit-extras" "Switch to a Magit buffer belonging to the current Git repository.\n\n(fn BUFFER)" t)(autoload 'magit-switch-to-repository-buffer-other-frame "magit-extras" "Switch to a Magit buffer belonging to the current Git repository.\n\n(fn BUFFER)" t)(autoload 'magit-abort-dwim "magit-extras" "Abort current operation.\nDepending on the context, this will abort a merge, a rebase, a\npatch application, a cherry-pick, a revert, or a bisect." t)(autoload 'magit-fetch "magit-fetch" nil t)(autoload 'magit-fetch-from-pushremote "magit-fetch" nil t)(autoload 'magit-fetch-from-upstream "magit-fetch" nil t)(autoload 'magit-fetch-other "magit-fetch" "Fetch from another repository.\n\n(fn REMOTE ARGS)" t)(autoload 'magit-fetch-branch "magit-fetch" "Fetch a BRANCH from a REMOTE.\n\n(fn REMOTE BRANCH ARGS)" t)(autoload 'magit-fetch-refspec "magit-fetch" "Fetch a REFSPEC from a REMOTE.\n\n(fn REMOTE REFSPEC ARGS)" t)(autoload 'magit-fetch-all "magit-fetch" "Fetch from all remotes.\n\n(fn ARGS)" t)(autoload 'magit-fetch-all-prune "magit-fetch" "Fetch from all remotes, and prune.\nPrune remote tracking branches for branches that have been\nremoved on the respective remote." t)(autoload 'magit-fetch-all-no-prune "magit-fetch" "Fetch from all remotes." t)(autoload 'magit-fetch-modules "magit-fetch" nil t)(autoload 'magit-find-file "magit-files" "View FILE from REV.\nSwitch to a buffer visiting blob REV:FILE, creating one if none\nalready exists.  If prior to calling this command the current\nbuffer and/or cursor position is about the same file, then go\nto the line and column corresponding to that location.\n\n(fn REV FILE)" t)(autoload 'magit-find-file-other-window "magit-files" "View FILE from REV, in another window.\nSwitch to a buffer visiting blob REV:FILE, creating one if none\nalready exists.  If prior to calling this command the current\nbuffer and/or cursor position is about the same file, then go to\nthe line and column corresponding to that location.\n\n(fn REV FILE)" t)(autoload 'magit-find-file-other-frame "magit-files" "View FILE from REV, in another frame.\nSwitch to a buffer visiting blob REV:FILE, creating one if none\nalready exists.  If prior to calling this command the current\nbuffer and/or cursor position is about the same file, then go to\nthe line and column corresponding to that location.\n\n(fn REV FILE)" t)(autoload 'magit-file-dispatch "magit" nil t)(autoload 'magit-blob-visit-file "magit-files" "View the file from the worktree corresponding to the current blob.\nWhen visiting a blob or the version from the index, then go to\nthe same location in the respective file in the working tree." t)(autoload 'magit-file-checkout "magit-files" "Checkout FILE from REV.\n\n(fn REV FILE)" t)(autoload 'magit-gitignore "magit-gitignore" nil t)(autoload 'magit-gitignore-in-topdir "magit-gitignore" "Add the Git ignore RULE to the top-level \".gitignore\" file.\nSince this file is tracked, it is shared with other clones of the\nrepository.  Also stage the file.\n\n(fn RULE)" t)(autoload 'magit-gitignore-in-subdir "magit-gitignore" "Add the Git ignore RULE to a \".gitignore\" file in DIRECTORY.\nPrompt the user for a directory and add the rule to the\n\".gitignore\" file in that directory.  Since such files are\ntracked, they are shared with other clones of the repository.\nAlso stage the file.\n\n(fn RULE DIRECTORY)" t)(autoload 'magit-gitignore-in-gitdir "magit-gitignore" "Add the Git ignore RULE to \"$GIT_DIR/info/exclude\".\nRules in that file only affects this clone of the repository.\n\n(fn RULE)" t)(autoload 'magit-gitignore-on-system "magit-gitignore" "Add the Git ignore RULE to the file specified by `core.excludesFile'.\nRules that are defined in that file affect all local repositories.\n\n(fn RULE)" t)(autoload 'magit-skip-worktree "magit-gitignore" "Call \"git update-index --skip-worktree -- FILE\".\n\n(fn FILE)" t)(autoload 'magit-no-skip-worktree "magit-gitignore" "Call \"git update-index --no-skip-worktree -- FILE\".\n\n(fn FILE)" t)(autoload 'magit-assume-unchanged "magit-gitignore" "Call \"git update-index --assume-unchanged -- FILE\".\n\n(fn FILE)" t)(autoload 'magit-no-assume-unchanged "magit-gitignore" "Call \"git update-index --no-assume-unchanged -- FILE\".\n\n(fn FILE)" t)(autoload 'magit-log "magit-log" nil t)(autoload 'magit-log-refresh "magit-log" nil t)(autoload 'magit-log-current "magit-log" "Show log for the current branch.\nWhen `HEAD' is detached or with a prefix argument show log for\none or more revs read from the minibuffer.\n\n(fn REVS &optional ARGS FILES)" t)(autoload 'magit-log-head "magit-log" "Show log for `HEAD'.\n\n(fn &optional ARGS FILES)" t)(autoload 'magit-log-related "magit-log" "Show log for the current branch, its upstream and its push target.\nWhen the upstream is a local branch, then also show its own\nupstream.  When `HEAD' is detached, then show log for that, the\npreviously checked out branch and its upstream and push-target.\n\n(fn REVS &optional ARGS FILES)" t)(autoload 'magit-log-other "magit-log" "Show log for one or more revs read from the minibuffer.\nThe user can input any revision or revisions separated by a\nspace, or even ranges, but only branches and tags, and a\nrepresentation of the commit at point, are available as\ncompletion candidates.\n\n(fn REVS &optional ARGS FILES)" t)(autoload 'magit-log-branches "magit-log" "Show log for all local branches and `HEAD'.\n\n(fn &optional ARGS FILES)" t)(autoload 'magit-log-matching-branches "magit-log" "Show log for all branches matching PATTERN and `HEAD'.\n\n(fn PATTERN &optional ARGS FILES)" t)(autoload 'magit-log-matching-tags "magit-log" "Show log for all tags matching PATTERN and `HEAD'.\n\n(fn PATTERN &optional ARGS FILES)" t)(autoload 'magit-log-all-branches "magit-log" "Show log for all local and remote branches and `HEAD'.\n\n(fn &optional ARGS FILES)" t)(autoload 'magit-log-all "magit-log" "Show log for all references and `HEAD'.\n\n(fn &optional ARGS FILES)" t)(autoload 'magit-log-buffer-file "magit-log" "Show log for the blob or file visited in the current buffer.\nWith a prefix argument or when `--follow' is an active log\nargument, then follow renames.  When the region is active,\nrestrict the log to the lines that the region touches.\n\n(fn &optional FOLLOW BEG END)" t)(autoload 'magit-log-trace-definition "magit-log" "Show log for the definition at point.\n\n(fn FILE FN REV)" t)(autoload 'magit-log-merged "magit-log" "Show log for the merge of COMMIT into BRANCH.\n\nMore precisely, find merge commit M that brought COMMIT into\nBRANCH, and show the log of the range \"M^1..M\". If COMMIT is\ndirectly on BRANCH, then show approximately\n`magit-log-merged-commit-count' surrounding commits instead.\n\nThis command requires git-when-merged, which is available from\nhttps://github.com/mhagger/git-when-merged.\n\n(fn COMMIT BRANCH &optional ARGS FILES)" t)(autoload 'magit-log-move-to-parent "magit-log" "Move to the Nth parent of the current commit.\n\n(fn &optional N)" t)(autoload 'magit-shortlog "magit-log" nil t)(autoload 'magit-shortlog-since "magit-log" "Show a history summary for commits since REV.\n\n(fn REV ARGS)" t)(autoload 'magit-shortlog-range "magit-log" "Show a history summary for commit or range REV-OR-RANGE.\n\n(fn REV-OR-RANGE ARGS)" t)(autoload 'magit-cherry "magit-log" "Show commits in a branch that are not merged in the upstream branch.\n\n(fn HEAD UPSTREAM)" t)(autoload 'magit-merge "magit" nil t)(autoload 'magit-merge-plain "magit-merge" "Merge commit REV into the current branch; using default message.\n\nUnless there are conflicts or a prefix argument is used create a\nmerge commit using a generic commit message and without letting\nthe user inspect the result.  With a prefix argument pretend the\nmerge failed to give the user the opportunity to inspect the\nmerge.\n\n(git merge --no-edit|--no-commit [ARGS] REV)\n\n(fn REV &optional ARGS NOCOMMIT)" t)(autoload 'magit-merge-editmsg "magit-merge" "Merge commit REV into the current branch; and edit message.\nPerform the merge and prepare a commit message but let the user\nedit it.\n\n(git merge --edit --no-ff [ARGS] REV)\n\n(fn REV &optional ARGS)" t)(autoload 'magit-merge-nocommit "magit-merge" "Merge commit REV into the current branch; pretending it failed.\nPretend the merge failed to give the user the opportunity to\ninspect the merge and change the commit message.\n\n(git merge --no-commit --no-ff [ARGS] REV)\n\n(fn REV &optional ARGS)" t)(autoload 'magit-merge-into "magit-merge" "Merge the current branch into BRANCH and remove the former.\n\nBefore merging, force push the source branch to its push-remote,\nprovided the respective remote branch already exists, ensuring\nthat the respective pull-request (if any) won't get stuck on some\nobsolete version of the commits that are being merged.  Finally\nif `forge-branch-pullreq' was used to create the merged branch,\nthen also remove the respective remote branch.\n\n(fn BRANCH &optional ARGS)" t)(autoload 'magit-merge-absorb "magit-merge" "Merge BRANCH into the current branch and remove the former.\n\nBefore merging, force push the source branch to its push-remote,\nprovided the respective remote branch already exists, ensuring\nthat the respective pull-request (if any) won't get stuck on some\nobsolete version of the commits that are being merged.  Finally\nif `forge-branch-pullreq' was used to create the merged branch,\nthen also remove the respective remote branch.\n\n(fn BRANCH &optional ARGS)" t)(autoload 'magit-merge-squash "magit-merge" "Squash commit REV into the current branch; don't create a commit.\n\n(git merge --squash REV)\n\n(fn REV)" t)(autoload 'magit-merge-preview "magit-merge" "Preview result of merging REV into the current branch.\n\n(fn REV)" t)(autoload 'magit-merge-abort "magit-merge" "Abort the current merge operation.\n\n(git merge --abort)" t)(autoload 'magit-info "magit-mode" "Visit the Magit manual." t)(autoload 'magit-notes "magit" nil t)(autoload 'magit-patch "magit-patch" nil t)(autoload 'magit-patch-create "magit-patch" nil t)(autoload 'magit-patch-apply "magit-patch" nil t)(autoload 'magit-patch-save "magit-patch" "Write current diff into patch FILE.\n\nWhat arguments are used to create the patch depends on the value\nof `magit-patch-save-arguments' and whether a prefix argument is\nused.\n\nIf the value is the symbol `buffer', then use the same arguments\nas the buffer.  With a prefix argument use no arguments.\n\nIf the value is a list beginning with the symbol `exclude', then\nuse the same arguments as the buffer except for those matched by\nentries in the cdr of the list.  The comparison is done using\n`string-prefix-p'.  With a prefix argument use the same arguments\nas the buffer.\n\nIf the value is a list of strings (including the empty list),\nthen use those arguments.  With a prefix argument use the same\narguments as the buffer.\n\nOf course the arguments that are required to actually show the\nsame differences as those shown in the buffer are always used.\n\n(fn FILE &optional ARG)" t)(autoload 'magit-request-pull "magit-patch" "Request upstream to pull from your public repository.\n\nURL is the url of your publicly accessible repository.\nSTART is a commit that already is in the upstream repository.\nEND is the last commit, usually a branch name, which upstream\nis asked to pull.  START has to be reachable from that commit.\n\n(fn URL START END)" t)(autoload 'magit-pull "magit-pull" nil t)(autoload 'magit-pull-from-pushremote "magit-pull" nil t)(autoload 'magit-pull-from-upstream "magit-pull" nil t)(autoload 'magit-pull-branch "magit-pull" "Pull from a branch read in the minibuffer.\n\n(fn SOURCE ARGS)" t)(autoload 'magit-push "magit-push" nil t)(autoload 'magit-push-current-to-pushremote "magit-push" nil t)(autoload 'magit-push-current-to-upstream "magit-push" nil t)(autoload 'magit-push-current "magit-push" "Push the current branch to a branch read in the minibuffer.\n\n(fn TARGET ARGS)" t)(autoload 'magit-push-other "magit-push" "Push an arbitrary branch or commit somewhere.\nBoth the source and the target are read in the minibuffer.\n\n(fn SOURCE TARGET ARGS)" t)(autoload 'magit-push-refspecs "magit-push" "Push one or multiple REFSPECS to a REMOTE.\nBoth the REMOTE and the REFSPECS are read in the minibuffer.  To\nuse multiple REFSPECS, separate them with commas.  Completion is\nonly available for the part before the colon, or when no colon\nis used.\n\n(fn REMOTE REFSPECS ARGS)" t)(autoload 'magit-push-matching "magit-push" "Push all matching branches to another repository.\nIf multiple remotes exist, then read one from the user.\nIf just one exists, use that without requiring confirmation.\n\n(fn REMOTE &optional ARGS)" t)(autoload 'magit-push-tags "magit-push" "Push all tags to another repository.\nIf only one remote exists, then push to that.  Otherwise prompt\nfor a remote, offering the remote configured for the current\nbranch as default.\n\n(fn REMOTE &optional ARGS)" t)(autoload 'magit-push-tag "magit-push" "Push a tag to another repository.\n\n(fn TAG REMOTE &optional ARGS)" t)(autoload 'magit-push-notes-ref "magit-push" "Push a notes ref to another repository.\n\n(fn REF REMOTE &optional ARGS)" t)(autoload 'magit-push-implicitly "magit-push" nil t)(autoload 'magit-push-to-remote "magit-push" nil t)(autoload 'magit-reflog-current "magit-reflog" "Display the reflog of the current branch.\nIf `HEAD' is detached, then show the reflog for that instead." t)(autoload 'magit-reflog-other "magit-reflog" "Display the reflog of a branch or another ref.\n\n(fn REF)" t)(autoload 'magit-reflog-head "magit-reflog" "Display the `HEAD' reflog." t)(autoload 'magit-show-refs "magit-refs" nil t)(autoload 'magit-show-refs-head "magit-refs" "List and compare references in a dedicated buffer.\nCompared with `HEAD'.\n\n(fn &optional ARGS)" t)(autoload 'magit-show-refs-current "magit-refs" "List and compare references in a dedicated buffer.\nCompare with the current branch or `HEAD' if it is detached.\n\n(fn &optional ARGS)" t)(autoload 'magit-show-refs-other "magit-refs" "List and compare references in a dedicated buffer.\nCompared with a branch read from the user.\n\n(fn &optional REF ARGS)" t)(autoload 'magit-remote "magit-remote" nil t)(autoload 'magit-remote-add "magit-remote" "Add a remote named REMOTE and fetch it.\n\n(fn REMOTE URL &optional ARGS)" t)(autoload 'magit-remote-rename "magit-remote" "Rename the remote named OLD to NEW.\n\n(fn OLD NEW)" t)(autoload 'magit-remote-remove "magit-remote" "Delete the remote named REMOTE.\n\n(fn REMOTE)" t)(autoload 'magit-remote-prune "magit-remote" "Remove stale remote-tracking branches for REMOTE.\n\n(fn REMOTE)" t)(autoload 'magit-remote-prune-refspecs "magit-remote" "Remove stale refspecs for REMOTE.\n\nA refspec is stale if there no longer exists at least one branch\non the remote that would be fetched due to that refspec.  A stale\nrefspec is problematic because its existence causes Git to refuse\nto fetch according to the remaining non-stale refspecs.\n\nIf only stale refspecs remain, then offer to either delete the\nremote or to replace the stale refspecs with the default refspec.\n\nAlso remove the remote-tracking branches that were created due to\nthe now stale refspecs.  Other stale branches are not removed.\n\n(fn REMOTE)" t)(autoload 'magit-remote-set-head "magit-remote" "Set the local representation of REMOTE's default branch.\nQuery REMOTE and set the symbolic-ref refs/remotes/<remote>/HEAD\naccordingly.  With a prefix argument query for the branch to be\nused, which allows you to select an incorrect value if you fancy\ndoing that.\n\n(fn REMOTE &optional BRANCH)" t)(autoload 'magit-remote-unset-head "magit-remote" "Unset the local representation of REMOTE's default branch.\nDelete the symbolic-ref \"refs/remotes/<remote>/HEAD\".\n\n(fn REMOTE)" t)(autoload 'magit-update-default-branch "magit-remote" nil t)(autoload 'magit-remote-unshallow "magit-remote" "Convert a shallow remote into a full one.\nIf only a single refspec is set and it does not contain a\nwildcard, then also offer to replace it with the standard\nrefspec.\n\n(fn REMOTE)" t)(autoload 'magit-remote-configure "magit-remote" nil t)(autoload 'magit-list-repositories "magit-repos" "Display a list of repositories.\n\nUse the option `magit-repository-directories' to control which\nrepositories are displayed." t)(autoload 'magit-reset "magit" nil t)(autoload 'magit-reset-mixed "magit-reset" "Reset the `HEAD' and index to COMMIT, but not the working tree.\n\n(git reset --mixed COMMIT)\n\n(fn COMMIT)" t)(autoload 'magit-reset-soft "magit-reset" "Reset the `HEAD' to COMMIT, but not the index and working tree.\n\n(git reset --soft REVISION)\n\n(fn COMMIT)" t)(autoload 'magit-reset-hard "magit-reset" "Reset the `HEAD', index, and working tree to COMMIT.\n\n(git reset --hard REVISION)\n\n(fn COMMIT)" t)(autoload 'magit-reset-keep "magit-reset" "Reset the `HEAD' and index to COMMIT, while keeping uncommitted changes.\n\n(git reset --keep REVISION)\n\n(fn COMMIT)" t)(autoload 'magit-reset-index "magit-reset" "Reset the index to COMMIT.\nKeep the `HEAD' and working tree as-is, so if COMMIT refers to the\nhead this effectively unstages all changes.\n\n(git reset COMMIT .)\n\n(fn COMMIT)" t)(autoload 'magit-reset-worktree "magit-reset" "Reset the worktree to COMMIT.\nKeep the `HEAD' and index as-is.\n\n(fn COMMIT)" t)(autoload 'magit-reset-quickly "magit-reset" "Reset the `HEAD' and index to COMMIT, and possibly the working tree.\nWith a prefix argument reset the working tree otherwise don't.\n\n(git reset --mixed|--hard COMMIT)\n\n(fn COMMIT &optional HARD)" t)(autoload 'magit-sequencer-continue "magit-sequence" "Resume the current cherry-pick or revert sequence." t)(autoload 'magit-sequencer-skip "magit-sequence" "Skip the stopped at commit during a cherry-pick or revert sequence." t)(autoload 'magit-sequencer-abort "magit-sequence" "Abort the current cherry-pick or revert sequence.\nThis discards all changes made since the sequence started." t)(autoload 'magit-cherry-pick "magit-sequence" nil t)(autoload 'magit-cherry-copy "magit-sequence" "Copy COMMITS from another branch onto the current branch.\nPrompt for a commit, defaulting to the commit at point.  If\nthe region selects multiple commits, then pick all of them,\nwithout prompting.\n\n(fn COMMITS &optional ARGS)" t)(autoload 'magit-cherry-apply "magit-sequence" "Apply the changes in COMMITS but do not commit them.\nPrompt for a commit, defaulting to the commit at point.  If\nthe region selects multiple commits, then apply all of them,\nwithout prompting.\n\n(fn COMMITS &optional ARGS)" t)(autoload 'magit-cherry-harvest "magit-sequence" "Move COMMITS from another BRANCH onto the current branch.\nRemove the COMMITS from BRANCH and stay on the current branch.\nIf a conflict occurs, then you have to fix that and finish the\nprocess manually.\n\n(fn COMMITS BRANCH &optional ARGS)" t)(autoload 'magit-cherry-donate "magit-sequence" "Move COMMITS from the current branch onto another existing BRANCH.\nRemove COMMITS from the current branch and stay on that branch.\nIf a conflict occurs, then you have to fix that and finish the\nprocess manually.  `HEAD' is allowed to be detached initially.\n\n(fn COMMITS BRANCH &optional ARGS)" t)(autoload 'magit-cherry-spinout "magit-sequence" "Move COMMITS from the current branch onto a new BRANCH.\nRemove COMMITS from the current branch and stay on that branch.\nIf a conflict occurs, then you have to fix that and finish the\nprocess manually.\n\n(fn COMMITS BRANCH START-POINT &optional ARGS)" t)(autoload 'magit-cherry-spinoff "magit-sequence" "Move COMMITS from the current branch onto a new BRANCH.\nRemove COMMITS from the current branch and checkout BRANCH.\nIf a conflict occurs, then you have to fix that and finish\nthe process manually.\n\n(fn COMMITS BRANCH START-POINT &optional ARGS)" t)(autoload 'magit-revert "magit-sequence" nil t)(autoload 'magit-revert-and-commit "magit-sequence" "Revert COMMIT by creating a new commit.\nPrompt for a commit, defaulting to the commit at point.  If\nthe region selects multiple commits, then revert all of them,\nwithout prompting.\n\n(fn COMMIT &optional ARGS)" t)(autoload 'magit-revert-no-commit "magit-sequence" "Revert COMMIT by applying it in reverse to the worktree.\nPrompt for a commit, defaulting to the commit at point.  If\nthe region selects multiple commits, then revert all of them,\nwithout prompting.\n\n(fn COMMIT &optional ARGS)" t)(autoload 'magit-am "magit-sequence" nil t)(autoload 'magit-am-apply-patches "magit-sequence" "Apply the patches FILES.\n\n(fn &optional FILES ARGS)" t)(autoload 'magit-am-apply-maildir "magit-sequence" "Apply the patches from MAILDIR.\n\n(fn &optional MAILDIR ARGS)" t)(autoload 'magit-am-continue "magit-sequence" "Resume the current patch applying sequence." t)(autoload 'magit-am-skip "magit-sequence" "Skip the stopped at patch during a patch applying sequence." t)(autoload 'magit-am-abort "magit-sequence" "Abort the current patch applying sequence.\nThis discards all changes made since the sequence started." t)(autoload 'magit-rebase "magit-sequence" nil t)(autoload 'magit-rebase-onto-pushremote "magit-sequence" nil t)(autoload 'magit-rebase-onto-upstream "magit-sequence" nil t)(autoload 'magit-rebase-branch "magit-sequence" "Rebase the current branch onto a branch read in the minibuffer.\nAll commits that are reachable from `HEAD' but not from the\nselected branch TARGET are being rebased.\n\n(fn TARGET ARGS)" t)(autoload 'magit-rebase-subset "magit-sequence" "Rebase a subset of the current branch's history onto a new base.\nRebase commits from START to `HEAD' onto NEWBASE.\nSTART has to be selected from a list of recent commits.\n\n(fn NEWBASE START ARGS)" t)(autoload 'magit-rebase-interactive "magit-sequence" "Start an interactive rebase sequence.\n\n(fn COMMIT ARGS)" t)(autoload 'magit-rebase-autosquash "magit-sequence" "Combine squash and fixup commits with their intended targets.\n\n(fn ARGS)" t)(autoload 'magit-rebase-edit-commit "magit-sequence" "Edit a single older commit using rebase.\n\n(fn COMMIT ARGS)" t)(autoload 'magit-rebase-reword-commit "magit-sequence" "Reword a single older commit using rebase.\n\n(fn COMMIT ARGS)" t)(autoload 'magit-rebase-remove-commit "magit-sequence" "Remove a single older commit using rebase.\n\n(fn COMMIT ARGS)" t)(autoload 'magit-rebase-continue "magit-sequence" "Restart the current rebasing operation.\nIn some cases this pops up a commit message buffer for you do\nedit.  With a prefix argument the old message is reused as-is.\n\n(fn &optional NOEDIT)" t)(autoload 'magit-rebase-skip "magit-sequence" "Skip the current commit and restart the current rebase operation." t)(autoload 'magit-rebase-edit "magit-sequence" "Edit the todo list of the current rebase operation." t)(autoload 'magit-rebase-abort "magit-sequence" "Abort the current rebase operation, restoring the original branch." t)(autoload 'magit-sparse-checkout "magit-sparse-checkout" nil t)(autoload 'magit-sparse-checkout-enable "magit-sparse-checkout" "Convert the working tree to a sparse checkout.\n\n(fn &optional ARGS)" t)(autoload 'magit-sparse-checkout-set "magit-sparse-checkout" "Restrict working tree to DIRECTORIES.\nTo extend rather than override the currently configured\ndirectories, call `magit-sparse-checkout-add' instead.\n\n(fn DIRECTORIES)" t)(autoload 'magit-sparse-checkout-add "magit-sparse-checkout" "Add DIRECTORIES to the working tree.\nTo override rather than extend the currently configured\ndirectories, call `magit-sparse-checkout-set' instead.\n\n(fn DIRECTORIES)" t)(autoload 'magit-sparse-checkout-reapply "magit-sparse-checkout" "Reapply the sparse checkout rules to the working tree.\nSome operations such as merging or rebasing may need to check out\nfiles that aren't included in the sparse checkout.  Call this\ncommand to reset to the sparse checkout state." t)(autoload 'magit-sparse-checkout-disable "magit-sparse-checkout" "Convert sparse checkout to full checkout.\nNote that disabling the sparse checkout does not clear the\nconfigured directories.  Call `magit-sparse-checkout-enable' to\nrestore the previous sparse checkout." t)(autoload 'magit-stash "magit-stash" nil t)(autoload 'magit-stash-both "magit-stash" "Create a stash of the index and working tree.\nUntracked files are included according to infix arguments.\nOne prefix argument is equivalent to `--include-untracked'\nwhile two prefix arguments are equivalent to `--all'.\n\n(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)(autoload 'magit-stash-index "magit-stash" "Create a stash of the index only.\nUnstaged and untracked changes are not stashed.  The stashed\nchanges are applied in reverse to both the index and the\nworktree.  This command can fail when the worktree is not clean.\nApplying the resulting stash has the inverse effect.\n\n(fn MESSAGE)" t)(autoload 'magit-stash-worktree "magit-stash" "Create a stash of unstaged changes in the working tree.\nUntracked files are included according to infix arguments.\nOne prefix argument is equivalent to `--include-untracked'\nwhile two prefix arguments are equivalent to `--all'.\n\n(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)(autoload 'magit-stash-keep-index "magit-stash" "Create a stash of the index and working tree, keeping index intact.\nUntracked files are included according to infix arguments.\nOne prefix argument is equivalent to `--include-untracked'\nwhile two prefix arguments are equivalent to `--all'.\n\n(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)(autoload 'magit-snapshot-both "magit-stash" "Create a snapshot of the index and working tree.\nUntracked files are included according to infix arguments.\nOne prefix argument is equivalent to `--include-untracked'\nwhile two prefix arguments are equivalent to `--all'.\n\n(fn &optional INCLUDE-UNTRACKED)" t)(autoload 'magit-snapshot-index "magit-stash" "Create a snapshot of the index only.\nUnstaged and untracked changes are not stashed." t)(autoload 'magit-snapshot-worktree "magit-stash" "Create a snapshot of unstaged changes in the working tree.\nUntracked files are included according to infix arguments.\nOne prefix argument is equivalent to `--include-untracked'\nwhile two prefix arguments are equivalent to `--all'.\n\n(fn &optional INCLUDE-UNTRACKED)" t)(autoload 'magit-stash-push "magit-stash" nil t)(autoload 'magit-stash-apply "magit-stash" "Apply a stash to the working tree.\n\nFirst try \"git stash apply --index\", which tries to preserve\nthe index stored in the stash, if any.  This may fail because\napplying the stash could result in conflicts and those have to\nbe stored in the index, making it impossible to also store the\nstash's index there as well.\n\nIf the above failed, then try \"git stash apply\".  This fails\n(with or without \"--index\") if there are any uncommitted\nchanges to files that are also modified in the stash.\n\nIf both of the above failed, then apply using \"git apply\".\nIf there are no conflicting files, use \"--3way\".  If there are\nconflicting files, then using \"--3way\" requires that those\nfiles are staged first, which may be undesirable, so prompt\nthe user whether to use \"--3way\" or \"--reject\".\n\n(fn STASH)" t)(autoload 'magit-stash-pop "magit-stash" "Apply a stash to the working tree, on success remove it from stash list.\n\nFirst try \"git stash pop --index\", which tries to preserve\nthe index stored in the stash, if any.  This may fail because\napplying the stash could result in conflicts and those have to\nbe stored in the index, making it impossible to also store the\nstash's index there as well.\n\nIf the above failed, then try \"git stash apply\".  This fails\n(with or without \"--index\") if there are any uncommitted\nchanges to files that are also modified in the stash.\n\nIf both of the above failed, then apply using \"git apply\".\nIf there are no conflicting files, use \"--3way\".  If there are\nconflicting files, then using \"--3way\" requires that those\nfiles are staged first, which may be undesirable, so prompt\nthe user whether to use \"--3way\" or \"--reject\".\n\n(fn STASH)" t)(autoload 'magit-stash-drop "magit-stash" "Remove a stash from the stash list.\nWhen the region is active offer to drop all contained stashes.\n\n(fn STASH)" t)(autoload 'magit-stash-clear "magit-stash" "Remove all stashes saved in REF's reflog by deleting REF.\n\n(fn REF)" t)(autoload 'magit-stash-branch "magit-stash" "Create and checkout a new BRANCH from an existing STASH.\nThe new branch starts at the commit that was current when the\nstash was created.  If the stash applies cleanly, then drop it.\n\n(fn STASH BRANCH)" t)(autoload 'magit-stash-branch-here "magit-stash" "Create and checkout a new BRANCH from an existing STASH.\nUse the current branch or `HEAD' as the starting-point of BRANCH.\nThen apply STASH, dropping it if it applies cleanly.\n\n(fn STASH BRANCH)" t)(autoload 'magit-stash-format-patch "magit-stash" "Create a patch from STASH\n\n(fn STASH)" t)(autoload 'magit-stash-list "magit-stash" "List all stashes in a buffer." t)(autoload 'magit-stash-show "magit-stash" "Show all diffs of a stash in a buffer.\n\n(fn STASH &optional ARGS FILES)" t)(autoload 'magit-init "magit-status" "Initialize a Git repository, then show its status.\n\nIf the directory is below an existing repository, then the user\nhas to confirm that a new one should be created inside.  If the\ndirectory is the root of the existing repository, then the user\nhas to confirm that it should be reinitialized.\n\nNon-interactively DIRECTORY is (re-)initialized unconditionally.\n\n(fn DIRECTORY)" t)(autoload 'magit-status "magit-status" "Show the status of the current Git repository in a buffer.\n\nIf the current directory isn't located within a Git repository,\nthen prompt for an existing repository or an arbitrary directory,\ndepending on option `magit-repository-directories', and show the\nstatus of the selected repository instead.\n\n* If that option specifies any existing repositories, then offer\n  those for completion and show the status buffer for the\n  selected one.\n\n* Otherwise read an arbitrary directory using regular file-name\n  completion.  If the selected directory is the top-level of an\n  existing working tree, then show the status buffer for that.\n\n* Otherwise offer to initialize the selected directory as a new\n  repository.  After creating the repository show its status\n  buffer.\n\nThese fallback behaviors can also be forced using one or more\nprefix arguments:\n\n* With two prefix arguments (or more precisely a numeric prefix\n  value of 16 or greater) read an arbitrary directory and act on\n  it as described above.  The same could be accomplished using\n  the command `magit-init'.\n\n* With a single prefix argument read an existing repository, or\n  if none can be found based on `magit-repository-directories',\n  then fall back to the same behavior as with two prefix\n  arguments.\n\n(fn &optional DIRECTORY CACHE)" t)(defalias 'magit #'magit-status "Begin using Magit.\n\nThis alias for `magit-status' exists for better discoverability.\n\nInstead of invoking this alias for `magit-status' using\n\"M-x magit RET\", you should bind a key to `magit-status'\nand read the info node `(magit)Getting Started', which\nalso contains other useful hints.")(autoload 'magit-status-here "magit-status" "Like `magit-status' but with non-nil `magit-status-goto-file-position'." t)(autoload 'magit-status-quick "magit-status" "Show the status of the current Git repository, maybe without refreshing.\n\nIf the status buffer of the current Git repository exists but\nisn't being displayed in the selected frame, then display it\nwithout refreshing it.\n\nIf the status buffer is being displayed in the selected frame,\nthen also refresh it.\n\nPrefix arguments have the same meaning as for `magit-status',\nand additionally cause the buffer to be refresh.\n\nTo use this function instead of `magit-status', add this to your\ninit file: (global-set-key (kbd \"C-x g\") \\='magit-status-quick)." t)(autoload 'magit-status-setup-buffer "magit-status" "\n\n(fn &optional DIRECTORY)")(autoload 'magit-submodule "magit-submodule" nil t)(autoload 'magit-submodule-add "magit-submodule" nil t)(autoload 'magit-submodule-read-name-for-path "magit-submodule" "\n\n(fn PATH &optional PREFER-SHORT)")(autoload 'magit-submodule-register "magit-submodule" nil t)(autoload 'magit-submodule-populate "magit-submodule" nil t)(autoload 'magit-submodule-update "magit-submodule" nil t)(autoload 'magit-submodule-synchronize "magit-submodule" nil t)(autoload 'magit-submodule-unpopulate "magit-submodule" nil t)(autoload 'magit-submodule-remove "magit-submodule" "Unregister MODULES and remove their working directories.\n\nFor safety reasons, do not remove the gitdirs and if a module has\nuncommitted changes, then do not remove it at all.  If a module's\ngitdir is located inside the working directory, then move it into\nthe gitdir of the superproject first.\n\nWith the \"--force\" argument offer to remove dirty working\ndirectories and with a prefix argument offer to delete gitdirs.\nBoth actions are very dangerous and have to be confirmed.  There\nare additional safety precautions in place, so you might be able\nto recover from making a mistake here, but don't count on it.\n\n(fn MODULES ARGS TRASH-GITDIRS)" t)(autoload 'magit-insert-modules "magit-submodule" "Insert submodule sections.\nHook `magit-module-sections-hook' controls which module sections\nare inserted, and option `magit-module-sections-nested' controls\nwhether they are wrapped in an additional section.")(autoload 'magit-insert-modules-overview "magit-submodule" "Insert sections for all modules.\nFor each section insert the path and the output of `git describe --tags',\nor, failing that, the abbreviated HEAD commit hash.")(autoload 'magit-insert-modules-unpulled-from-upstream "magit-submodule" "Insert sections for modules that haven't been pulled from the upstream.\nThese sections can be expanded to show the respective commits.")(autoload 'magit-insert-modules-unpulled-from-pushremote "magit-submodule" "Insert sections for modules that haven't been pulled from the push-remote.\nThese sections can be expanded to show the respective commits.")(autoload 'magit-insert-modules-unpushed-to-upstream "magit-submodule" "Insert sections for modules that haven't been pushed to the upstream.\nThese sections can be expanded to show the respective commits.")(autoload 'magit-insert-modules-unpushed-to-pushremote "magit-submodule" "Insert sections for modules that haven't been pushed to the push-remote.\nThese sections can be expanded to show the respective commits.")(autoload 'magit-list-submodules "magit-submodule" "Display a list of the current repository's populated submodules." t)(autoload 'magit-subtree "magit-subtree" nil t)(autoload 'magit-subtree-import "magit-subtree" nil t)(autoload 'magit-subtree-export "magit-subtree" nil t)(autoload 'magit-subtree-add "magit-subtree" "Add REF from REPOSITORY as a new subtree at PREFIX.\n\n(fn PREFIX REPOSITORY REF ARGS)" t)(autoload 'magit-subtree-add-commit "magit-subtree" "Add COMMIT as a new subtree at PREFIX.\n\n(fn PREFIX COMMIT ARGS)" t)(autoload 'magit-subtree-merge "magit-subtree" "Merge COMMIT into the PREFIX subtree.\n\n(fn PREFIX COMMIT ARGS)" t)(autoload 'magit-subtree-pull "magit-subtree" "Pull REF from REPOSITORY into the PREFIX subtree.\n\n(fn PREFIX REPOSITORY REF ARGS)" t)(autoload 'magit-subtree-push "magit-subtree" "Extract the history of the subtree PREFIX and push it to REF on REPOSITORY.\n\n(fn PREFIX REPOSITORY REF ARGS)" t)(autoload 'magit-subtree-split "magit-subtree" "Extract the history of the subtree PREFIX.\n\n(fn PREFIX COMMIT ARGS)" t)(autoload 'magit-tag "magit" nil t)(autoload 'magit-tag-create "magit-tag" "Create a new tag with the given NAME at REV.\nWith a prefix argument annotate the tag.\n\n(git tag [--annotate] NAME REV)\n\n(fn NAME REV &optional ARGS)" t)(autoload 'magit-tag-delete "magit-tag" "Delete one or more tags.\nIf the region marks multiple tags (and nothing else), then offer\nto delete those, otherwise prompt for a single tag to be deleted,\ndefaulting to the tag at point.\n\n(git tag -d TAGS)\n\n(fn TAGS)" t)(autoload 'magit-tag-prune "magit-tag" "Offer to delete tags missing locally from REMOTE, and vice versa.\n\n(fn TAGS REMOTE-TAGS REMOTE)" t)(autoload 'magit-tag-release "magit-tag" "Create a release tag for `HEAD'.\n\nAssume that release tags match `magit-release-tag-regexp'.\n\nIf `HEAD's message matches `magit-release-commit-regexp', then\nbase the tag on the version string specified by that.  Otherwise\nprompt for the name of the new tag using the highest existing\ntag as initial input and leaving it to the user to increment the\ndesired part of the version string.\n\nIf `--annotate' is enabled, then prompt for the message of the\nnew tag.  Base the proposed tag message on the message of the\nhighest tag, provided that that contains the corresponding\nversion string and substituting the new version string for that.\nOtherwise propose something like \"Foo-Bar 1.2.3\", given, for\nexample, a TAG \"v1.2.3\" and a repository located at something\nlike \"/path/to/foo-bar\".\n\n(fn TAG MSG &optional ARGS)" t)(defvar magit-wip-mode nil "Non-nil if Magit-Wip mode is enabled.\nSee the `magit-wip-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `magit-wip-mode'.")(autoload 'magit-wip-mode "magit-wip" "Save uncommitted changes to work-in-progress refs.\n\nWhenever appropriate (i.e., when dataloss would be a possibility\notherwise) this mode causes uncommitted changes to be committed\nto dedicated work-in-progress refs.\n\nFor historic reasons this mode is implemented on top of four\nother `magit-wip-*' modes, which can also be used individually,\nif you want finer control over when the wip refs are updated;\nbut that is discouraged.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Magit-Wip mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='magit-wip-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'magit-wip-after-save-mode 'globalized-minor-mode t)(defvar magit-wip-after-save-mode nil "Non-nil if Magit-Wip-After-Save mode is enabled.\nSee the `magit-wip-after-save-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `magit-wip-after-save-mode'.")(autoload 'magit-wip-after-save-mode "magit-wip" "Toggle Magit-Wip-After-Save-Local mode in all buffers.\nWith prefix ARG, enable Magit-Wip-After-Save mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nMagit-Wip-After-Save-Local mode is enabled in all buffers where\n`magit-wip-after-save-local-mode-turn-on' would do it.\n\nSee `magit-wip-after-save-local-mode' for more information on\nMagit-Wip-After-Save-Local mode.\n\n(fn &optional ARG)" t)(defvar magit-wip-after-apply-mode nil "Non-nil if Magit-Wip-After-Apply mode is enabled.\nSee the `magit-wip-after-apply-mode' command\nfor a description of this minor mode.")(autoload 'magit-wip-after-apply-mode "magit-wip" "Commit to work-in-progress refs.\n\nAfter applying a change using any \"apply variant\"\ncommand (apply, stage, unstage, discard, and reverse) commit the\naffected files to the current wip refs.  For each branch there\nmay be two wip refs; one contains snapshots of the files as found\nin the worktree and the other contains snapshots of the entries\nin the index.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Magit-Wip-After-Apply mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='magit-wip-after-apply-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar magit-wip-before-change-mode nil "Non-nil if Magit-Wip-Before-Change mode is enabled.\nSee the `magit-wip-before-change-mode' command\nfor a description of this minor mode.")(autoload 'magit-wip-before-change-mode "magit-wip" "Commit to work-in-progress refs before certain destructive changes.\n\nBefore invoking a revert command or an \"apply variant\"\ncommand (apply, stage, unstage, discard, and reverse) commit the\naffected tracked files to the current wip refs.  For each branch\nthere may be two wip refs; one contains snapshots of the files\nas found in the worktree and the other contains snapshots of the\nentries in the index.\n\nOnly changes to files which could potentially be affected by the\ncommand which is about to be called are committed.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Magit-Wip-Before-Change mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='magit-wip-before-change-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'magit-wip-commit-initial-backup "magit-wip" "Before saving, commit current file to a worktree wip ref.\n\nThe user has to add this function to `before-save-hook'.\n\nCommit the current state of the visited file before saving the\ncurrent buffer to that file.  This backs up the same version of\nthe file as `backup-buffer' would, but stores the backup in the\nworktree wip ref, which is also used by the various Magit Wip\nmodes, instead of in a backup file as `backup-buffer' would.\n\nThis function ignores the variables that affect `backup-buffer'\nand can be used along-side that function, which is recommended\nbecause this function only backs up files that are tracked in\na Git repository.")(autoload 'magit-worktree "magit-worktree" nil t)(autoload 'magit-worktree-checkout "magit-worktree" "Checkout BRANCH in a new worktree at PATH.\n\n(fn PATH BRANCH)" t)(autoload 'magit-worktree-branch "magit-worktree" "Create a new BRANCH and check it out in a new worktree at PATH.\n\n(fn PATH BRANCH START-POINT &optional FORCE)" t)(autoload 'magit-worktree-move "magit-worktree" "Move WORKTREE to PATH.\n\n(fn WORKTREE PATH)" t)(defvar pcre-mode nil "Non-nil if PCRE mode is enabled.\nSee the `pcre-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `pcre-mode'.")(autoload 'pcre-mode "pcre2el" "Use emulated PCRE syntax for regexps wherever possible.\n\nAdvises the `interactive' specs of `read-regexp' and the\nfollowing other functions so that they read PCRE syntax and\ntranslate to its Emacs equivalent:\n\n- `align-regexp'\n- `find-tag-regexp'\n- `sort-regexp-fields'\n- `isearch-message-prefix'\n- `ibuffer-do-replace-regexp'\n\nAlso alters the behavior of `isearch-mode' when searching by regexp.\n\nThis is a global minor mode.  If called interactively, toggle the\n`PCRE mode' mode.  If the prefix argument is positive, enable the\nmode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='pcre-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pcre-query-replace-regexp "pcre2el" "Perform `query-replace-regexp' using PCRE syntax.\n\nConsider using `pcre-mode' instead of this function." t)(autoload 'rxt-elisp-to-pcre "pcre2el" "Translate REGEXP, a regexp in Emacs Lisp syntax, to Perl-compatible syntax.\n\nInteractively, reads the regexp in one of three ways. With a\nprefix arg, reads from minibuffer without string escaping, like\n`query-replace-regexp'. Without a prefix arg, uses the text of\nthe region if it is active. Otherwise, uses the result of\nevaluating the sexp before point (which might be a string regexp\nliteral or an expression that produces a string).\n\nDisplays the translated PCRE regexp in the echo area and copies\nit to the kill ring.\n\nEmacs regexp features such as syntax classes which cannot be\ntranslated to PCRE will cause an error.\n\n(fn REGEXP)" t)(autoload 'rxt-elisp-to-rx "pcre2el" "Translate REGEXP, a regexp in Emacs Lisp syntax, to `rx' syntax.\n\nSee `rxt-elisp-to-pcre' for a description of the interactive\nbehavior and `rx' for documentation of the S-expression based\nregexp syntax.\n\n(fn REGEXP)" t)(autoload 'rxt-elisp-to-strings "pcre2el" "Return a list of all strings matched by REGEXP, an Emacs Lisp regexp.\n\nSee `rxt-elisp-to-pcre' for a description of the interactive behavior.\n\nThis is useful primarily for getting back the original list of\nstrings from a regexp generated by `regexp-opt', but it will work\nwith any regexp without unbounded quantifiers (*, +, {2, } and so\non).\n\nThrows an error if REGEXP contains any infinite quantifiers.\n\n(fn REGEXP)" t)(autoload 'rxt-toggle-elisp-rx "pcre2el" "Toggle the regexp near point between Elisp string and rx syntax." t)(autoload 'rxt-pcre-to-elisp "pcre2el" "Translate PCRE, a regexp in Perl-compatible syntax, to Emacs Lisp.\n\nInteractively, uses the contents of the region if it is active,\notherwise reads from the minibuffer. Prints the Emacs translation\nin the echo area and copies it to the kill ring.\n\nPCRE regexp features that cannot be translated into Emacs syntax\nwill cause an error. See the commentary section of pcre2el.el for\nmore details.\n\n(fn PCRE &optional FLAGS)" t)(defalias 'pcre-to-elisp 'rxt-pcre-to-elisp)(autoload 'rxt-pcre-to-rx "pcre2el" "Translate PCRE, a regexp in Perl-compatible syntax, to `rx' syntax.\n\nSee `rxt-pcre-to-elisp' for a description of the interactive behavior.\n\n(fn PCRE &optional FLAGS)" t)(autoload 'rxt-pcre-to-strings "pcre2el" "Return a list of all strings matched by PCRE, a Perl-compatible regexp.\n\nSee `rxt-elisp-to-pcre' for a description of the interactive\nbehavior and `rxt-elisp-to-strings' for why this might be useful.\n\nThrows an error if PCRE contains any infinite quantifiers.\n\n(fn PCRE &optional FLAGS)" t)(autoload 'rxt-explain-elisp "pcre2el" "Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.\n\nREGEXP is a regular expression in Emacs Lisp syntax. See\n`rxt-elisp-to-pcre' for a description of how REGEXP is read\ninteractively.\n\n(fn REGEXP)" t)(autoload 'rxt-explain-pcre "pcre2el" "Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.\n\nREGEXP is a regular expression in PCRE syntax. See\n`rxt-pcre-to-elisp' for a description of how REGEXP is read\ninteractively.\n\n(fn REGEXP &optional FLAGS)" t)(autoload 'rxt-quote-pcre "pcre2el" "Return a PCRE regexp which matches TEXT literally.\n\nAny PCRE metacharacters in TEXT will be quoted with a backslash.\n\n(fn TEXT)")(autoload 'rxt-explain "pcre2el" "Pop up a buffer with pretty-printed `rx' syntax for the regex at point.\n\nChooses regex syntax to read based on current major mode, calling\n`rxt-explain-elisp' if buffer is in `emacs-lisp-mode' or\n`lisp-interaction-mode', or `rxt-explain-pcre' otherwise." t)(autoload 'rxt-convert-syntax "pcre2el" "Convert regex at point to other kind of syntax, depending on major mode.\n\nFor buffers in `emacs-lisp-mode' or `lisp-interaction-mode',\ncalls `rxt-elisp-to-pcre' to convert to PCRE syntax. Otherwise,\ncalls `rxt-pcre-to-elisp' to convert to Emacs syntax.\n\nThe converted syntax is displayed in the echo area and copied to\nthe kill ring; see the two functions named above for details." t)(autoload 'rxt-convert-to-rx "pcre2el" "Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode." t)(autoload 'rxt-convert-to-strings "pcre2el" "Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode." t)(autoload 'rxt-mode "pcre2el" "Regex translation utilities.\n\nThis is a minor mode.  If called interactively, toggle the `Rxt\nmode' mode.  If the prefix argument is positive, enable the mode,\nand if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `rxt-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'turn-on-rxt-mode "pcre2el" "Turn on `rxt-mode' in the current buffer." t)(put 'rxt-global-mode 'globalized-minor-mode t)(defvar rxt-global-mode nil "Non-nil if Rxt-Global mode is enabled.\nSee the `rxt-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `rxt-global-mode'.")(autoload 'rxt-global-mode "pcre2el" "Toggle Rxt mode in all buffers.\nWith prefix ARG, enable Rxt-Global mode if ARG is positive; otherwise,\ndisable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nRxt mode is enabled in all buffers where `turn-on-rxt-mode' would do\nit.\n\nSee `rxt-mode' for more information on Rxt mode.\n\n(fn &optional ARG)" t)(autoload 'code-review-forge-pr-at-point "code-review" "Review the forge pull request at point.\nOUTDATED." t)(autoload 'code-review-start "code-review" "Start review given PR URL.\n\n(fn URL)" t)(autoload 'code-review--submit "code-review-actions" "Submit your review with a final verdict (EVENT).\nIf you already have a FEEDBACK string use it.\nIf you want only to submit replies, use ONLY-REPLY? as non-nil.\n\n(fn EVENT &optional FEEDBACK ONLY-REPLY?)" t)(autoload 'code-review-submit-approve "code-review-actions" "Approve current PR.\nOptionally set a FEEDBACK message.\n\n(fn &optional FEEDBACK)" t)(autoload 'code-review-submit-comments "code-review-actions" "Submit a Review Comment for the current PR." t)(autoload 'code-review-submit-request-changes "code-review-actions" "Submit a Request Change for the current PR." t)(autoload 'code-review-submit-lgtm "code-review-actions" "Submit an Approve Review with a LGTM message." t)(autoload 'code-review-submit-only-replies "code-review-actions" "Submit only replies comments." t)(autoload 'code-review-submit-single-top-level-comment "code-review-actions" "Submit a single comment without an attached Review." t)(autoload 'code-review-submit-single-diff-comment-at-point "code-review-actions" "Submit a single diff comment without an attached Review." t)(autoload 'code-review-save-unfinished-review "code-review-actions" "Save unfinished Review." t)(autoload 'code-review-recover-unfinished-review "code-review-actions" "Recover unfinished Review for the given URL.\n\n(fn URL)" t)(autoload 'code-review-open-unfinished-review "code-review-actions" "Choose an unfinished Review from the previous unfinished list." t)(autoload 'code-review-merge-merge "code-review-actions" "Merge PR with MERGE strategy." t)(autoload 'code-review-merge-rebase "code-review-actions" "Merge PR with REBASE strategy." t)(autoload 'code-review-merge-squash "code-review-actions" "Merge PR with SQUASH strategy." t)(autoload 'code-review-set-feedback "code-review-actions" "Add review FEEDBACK locally.  Required to Comment and Request Change reviews." t)(autoload 'code-review-set-title "code-review-actions" "Change the title of current PR.  Sent immediately." t)(autoload 'code-review-set-label "code-review-actions" "Change the labels of current PR.  Sent immediately.\nRewrite all current labels with the options chosen here." t)(autoload 'code-review-set-description "code-review-actions" "Submit new PR description.  Sent immediately." t)(autoload 'code-review-delete-feedback "code-review-actions" "Delete review FEEDBACK locally." t)(autoload 'code-review-reload "code-review-actions" "Reload the buffer.  All your local comments will be lost." t)(autoload 'code-review-promote-comment-at-point-to-new-issue "code-review-actions" "Promote comment at point to a new issue.  Sent immediately." t)(autoload 'code-review-request-reviews "code-review-actions" "Request reviewers for current PR using LOGIN if available.\n\n(fn &optional LOGIN)" t)(autoload 'code-review-request-review-at-point "code-review-actions" "Request reviewer at point.\n\n(fn &rest _)" t)(autoload 'code-review-toggle-display-all-comments "code-review-actions" "Toggle display comments." t)(autoload 'code-review-toggle-display-top-level-comments "code-review-actions" "Toggle display the top level comments." t)(autoload 'code-review-toggle-display-diff-comments "code-review-actions" "Toggle display the top level comments." t)(autoload 'code-review-comment-code-suggestion "code-review-actions" "Add code suggestion box." t)(autoload 'code-review-comment-jump-next "code-review-actions" "Go to next comment in the buffer." t)(autoload 'code-review-comment-jump-previous "code-review-actions" "Go to previous comment in the buffer." t)(autoload 'code-review-comment-add-or-edit "code-review-comment" "Add or edit comment depending on context.\nInform if a SUGGESTION-CODE? is being proposed.\n\n(fn &optional SUGGESTION-CODE?)" t)(autoload 'code-review-comment-commit "code-review-comment" "Commit comment." t)(autoload 'code-review-input-mention-user-at-point "code-review-comment" "Insert @USERNAME at current point to mention an user." t)(autoload 'code-review-comment-quit "code-review-comment" "Quit the comment window." t)(autoload 'code-review-section-delete-comment "code-review-section" "Delete a local comment." t)(autoload 'ghub-clear-caches "ghub" "Clear all caches that might negatively affect Ghub.\n\nIf a library that is used by Ghub caches incorrect information\nsuch as a mistyped password, then that can prevent Ghub from\nasking the user for the correct information again.\n\nSet `url-http-real-basic-auth-storage' to nil\nand call `auth-source-forget+'." t)(autoload 'insert-uuid-cid "uuidgen" "Insert UUID string in CID format that is suitable for COM definition.\nIf UUID is nil will generate UUIDGEN-4 automatically.\nYou customize `uuidgen-cid-format-string' to change the default format.\n\n(fn UUID)" t)(autoload 'uuidgen "uuidgen" "Insert UUIDv4 at point. If TIME-BASED is non-nil, insert UUIDv1 instead.\n\n(fn TIME-BASED)" t)(defvar forge-add-default-bindings t "Whether to add Forge's bindings to various Magit keymaps.\n\nIf you want to disable this, then you must set this to nil before\n`magit' is loaded.  If you do it before `forge' but after `magit'\nis loaded, then `magit-mode-map' ends up being modified anyway.\n\nIf this is nil, then `forge-toggle-display-in-status-buffer' can\nno longer do its job.  It might be better to set the global value\nof `forge-display-in-status-buffer' to nil instead.  That way you\ncan still display topics on demand in the status buffer.")(with-eval-after-load 'magit-mode (when forge-add-default-bindings (keymap-set magit-mode-map "'" #'forge-dispatch) (keymap-set magit-mode-map "N" #'forge-dispatch) (keymap-set magit-mode-map "<remap> <magit-browse-thing>" #'forge-browse) (keymap-set magit-mode-map "<remap> <magit-copy-thing>" #'forge-copy-url-at-point-as-kill)))(with-eval-after-load 'git-commit (when forge-add-default-bindings (keymap-set git-commit-mode-map "C-c C-v" #'forge-visit-topic)))(autoload 'forge-dispatch "forge-commands" nil t)(autoload 'forge-pull "forge-commands" "Pull topics from the forge repository.\n\nWith a prefix argument and if the repository has not been fetched\nbefore, then read a date from the user and limit pulled topics to\nthose that have been updated since then.\n\nIf pulling is too slow, then also consider setting the Git variable\n`forge.omitExpensive' to `true'.\n\n(fn &optional REPO UNTIL)" t)(autoload 'forge-pull-notifications "forge-commands" "Fetch notifications for all repositories from the current forge." t)(autoload 'forge-pull-topic "forge-commands" "Read a TOPIC and pull data about it from its forge.\n\n(fn TOPIC)" t)(autoload 'forge-pull-this-topic "forge-commands" nil t)(autoload 'forge-browse-issues "forge-commands" "Visit the current repository's issues using a browser." t)(autoload 'forge-browse-pullreqs "forge-commands" "Visit the current repository's pull-requests using a browser." t)(autoload 'forge-browse-topic "forge-commands" "Read a TOPIC and visit it using a browser.\nBy default only offer open topics but with a prefix argument\nalso offer closed topics.\n\n(fn TOPIC)" t)(autoload 'forge-browse-issue "forge-commands" "Read an ISSUE and visit it using a browser.\nBy default only offer open issues but with a prefix argument\nalso offer closed issues.\n\n(fn ISSUE)" t)(autoload 'forge-browse-pullreq "forge-commands" "Read a PULL-REQUEST and visit it using a browser.\nBy default only offer open pull-requests but with a prefix\nargument also offer closed pull-requests.\n\n(fn PULL-REQUEST)" t)(autoload 'forge-browse-commit "forge-commands" "Read a COMMIT and visit it using a browser.\n\n(fn COMMIT)" t)(autoload 'forge-browse-branch "forge-commands" "Read a BRANCH and visit it using a browser.\n\n(fn BRANCH)" t)(autoload 'forge-browse-remote "forge-commands" "Read a REMOTE and visit it using a browser.\n\n(fn REMOTE)" t)(autoload 'forge-browse-repository "forge-commands" "Read a REPOSITORY and visit it using a browser.\n\n(fn REPOSITORY)" t)(autoload 'forge-browse-this-topic "forge-commands" nil t)(autoload 'forge-browse-this-repository "forge-commands" "Visit the repository at point using a browser." t)(autoload 'forge-copy-url-at-point-as-kill "forge-commands" "Copy the url of the thing at point." t)(autoload 'forge-browse "forge-commands" "Visit the thing at point using a browser." t)(autoload 'forge-visit-topic "forge-commands" "Read a TOPIC and visit it.\nBy default only offer open topics for completion;\nwith a prefix argument also closed topics.\n\n(fn TOPIC)" t)(autoload 'forge-visit-issue "forge-commands" "Read an ISSUE and visit it.\nBy default only offer open topics for completion;\nwith a prefix argument also closed topics.\n\n(fn ISSUE)" t)(autoload 'forge-visit-pullreq "forge-commands" "Read a PULL-REQUEST and visit it.\nBy default only offer open topics for completion;\nwith a prefix argument also closed topics.\n\n(fn PULL-REQUEST)" t)(autoload 'forge-visit-this-topic "forge-commands" "Visit the topic at point." t)(autoload 'forge-visit-this-repository "forge-commands" "Visit the repository at point." t)(autoload 'forge-branch-pullreq "forge-commands" "Create and configure a new branch from a pull-request.\nPlease see the manual for more information.\n\n(fn PULLREQ)" t)(autoload 'forge-checkout-pullreq "forge-commands" "Create, configure and checkout a new branch from a pull-request.\nPlease see the manual for more information.\n\n(fn PULLREQ)" t)(autoload 'forge-checkout-worktree "forge-commands" "Create, configure and checkout a new worktree from a pull-request.\nThis is like `forge-checkout-pullreq', except that it also\ncreates a new worktree. Please see the manual for more\ninformation.\n\n(fn PATH PULLREQ)" t)(autoload 'forge-fork "forge-commands" "Fork the current repository to FORK and add it as a REMOTE.\nIf the fork already exists, then that isn't an error; the remote\nis added anyway.  Currently this only supports Github and Gitlab.\n\n(fn FORK REMOTE)" t)(autoload 'forge-merge "forge-commands" "Merge the current pull-request using METHOD using the forge's API.\n\nIf there is no current pull-request or with a prefix argument,\nthen read pull-request PULLREQ to visit instead.\n\nUse of this command is discouraged.  Unless the remote repository\nis configured to disallow that, you should instead merge locally\nand then push the target branch.  Forges detect that you have\ndone that and respond by automatically marking the pull-request\nas merged.\n\n(fn PULLREQ METHOD)" t)(autoload 'forge-rename-default-branch "forge-commands" "Rename the default branch to NEWNAME.\nChange the name on the upstream remote and locally, and update\nthe upstream remotes of local branches accordingly." t)(autoload 'forge-add-pullreq-refspec "forge-commands" nil t)(autoload 'forge-add-repository "forge-commands" nil t)(autoload 'forge-add-user-repositories "forge-commands" "Add all of USER's repositories from HOST to the database.\nThis may take a while.  Only Github is supported at the moment.\n\n(fn HOST USER)" t)(autoload 'forge-add-organization-repositories "forge-commands" "Add all of ORGANIZATION's repositories from HOST to the database.\nThis may take a while.  Only Github is supported at the moment.\n\n(fn HOST ORGANIZATION)" t)(autoload 'forge-remove-repository "forge-commands" "Remove a repository from the database.\n\n(fn REPOSITORY)" t)(autoload 'forge-remove-topic-locally "forge-commands" "Remove a topic from the local database only.\nDue to how the supported APIs work, it would be too expensive to\nautomatically remove topics from the local database that were\nremoved from the forge.  The purpose of this command is to allow\nyou to manually clean up the local database.\n\n(fn TOPIC)" t)(autoload 'forge-reset-database "forge-commands" "Move the current database file to the trash.\nThis is useful after the database scheme has changed, which will\nhappen a few times while the forge functionality is still under\nheavy development." t)(autoload 'forge-topics-menu "forge-list" nil t)(autoload 'forge-repository-menu "forge-list" nil t)(autoload 'forge-list-topics "forge-list" nil t)(autoload 'forge-list-labeled-topics "forge-list" nil t)(autoload 'forge-list-assigned-topics "forge-list" nil t)(autoload 'forge-list-authored-topics "forge-list" nil t)(autoload 'forge-list-owned-topics "forge-list" nil t)(autoload 'forge-list-issues "forge-list" nil t)(autoload 'forge-list-labeled-issues "forge-list" nil t)(autoload 'forge-list-assigned-issues "forge-list" nil t)(autoload 'forge-list-authored-issues "forge-list" nil t)(autoload 'forge-list-owned-issues "forge-list" nil t)(autoload 'forge-list-pullreqs "forge-list" nil t)(autoload 'forge-list-labeled-pullreqs "forge-list" nil t)(autoload 'forge-list-assigned-pullreqs "forge-list" nil t)(autoload 'forge-list-requested-reviews "forge-list" nil t)(autoload 'forge-list-authored-pullreqs "forge-list" nil t)(autoload 'forge-list-owned-pullreqs "forge-list" nil t)(autoload 'forge-list-repositories "forge-list" nil t)(autoload 'forge-list-owned-repositories "forge-list" nil t)(autoload 'forge-list-notifications "forge-notify" "List notifications." t)(autoload 'forge-topic-menu "forge-topic" nil t)(autoload 'forge-topic-state-menu "forge-topic" nil t)(autoload 'forge-topic-status-menu "forge-topic" nil t)(autoload 'kurecolor-hex-set-saturation-in-region "kurecolor" "Set the SATURATION of all hex colors found in region.\nWhen region not active, act on the whole buffer.\n\n(fn SATURATION)" t)(autoload 'kurecolor-hex-set-brightness-in-region "kurecolor" "Set the BRIGHTNESS of all hex colors found in region.\nWhen region not active, act on the whole buffer.\n\n(fn BRIGHTNESS)" t)(autoload 'kurecolor-hex-set-hue-in-region "kurecolor" "Set the HUE of all hex colors found in region (BEGIN END).\nWhen region not active, act on the whole buffer.\n\n(fn HUE)" t)(autoload 'kurecolor-hex-adjust-saturation-in-region "kurecolor" "Adjust the SATURATION on all hex colors found in region.\nWhen region not active, act on the whole buffer.\n\n(fn SATURATION)" t)(autoload 'kurecolor-hex-adjust-brightness-in-region "kurecolor" "Set the BRIGHTNESS of all hex colors found in region.\nWhen region not active, act on the whole buffer.\n\n(fn BRIGHTNESS)" t)(autoload 'kurecolor-increase-brightness-by-step "kurecolor" "Increase brightness on hex color at point (or in region) by step.\nAccepts universal argument X.\n\n(fn X)" t)(autoload 'kurecolor-decrease-brightness-by-step "kurecolor" "Decrease brightness on hex color at point (or in region) by step.\nAccepts universal argument X.\n\n(fn X)" t)(autoload 'kurecolor-increase-saturation-by-step "kurecolor" "Increase saturation on hex color at point (or in region) by step.\nAccepts universal argument X.\n\n(fn X)" t)(autoload 'kurecolor-decrease-saturation-by-step "kurecolor" "Decrease saturation on hex color at point (or in region) by step.\nAccepts universal argument X.\n\n(fn X)" t)(autoload 'kurecolor-increase-hue-by-step "kurecolor" "Increase hue on hex color at point (or in region) by step.\nAccepts universal argument X.\n\n(fn X)" t)(autoload 'kurecolor-decrease-hue-by-step "kurecolor" "Decrease hue on hex color at point (or in region) by step.\nAccepts universal argument X.\n\n(fn X)" t)(autoload 'kurecolor-set-brightness "kurecolor" "Interactively change a COLOR's BRIGHTNESS.\n\n(fn COLOR BRIGHTNESS)" t)(autoload 'kurecolor-set-saturation "kurecolor" "Interactively change a COLOR's SATURATION.\n\n(fn COLOR SATURATION)" t)(autoload 'kurecolor-set-hue "kurecolor" "Interactively change a COLOR's HUE.\n\n(fn COLOR HUE)" t)(autoload 'kurecolor-hex-hue-group "kurecolor" "Given a HEX color.\nInsert a list of hexcolors of different hue.\n\n(fn HEX)" t)(autoload 'kurecolor-hex-sat-group "kurecolor" "Given a HEX color.\nInsert a list of hexcolors of different saturation (sat).\n\n(fn HEX)" t)(autoload 'kurecolor-hex-val-group "kurecolor" "Given a HEX color.\nInsert a list of hexcolors of different brightness (val).\n\n(fn HEX)" t)(autoload 'kurecolor-cssrgb-at-point-or-region-to-hex "kurecolor" "CSS `rgb' color at point or region to hex `rgb'." t)(autoload 'kurecolor-hexcolor-at-point-or-region-to-css-rgb "kurecolor" "Hex `rgb' color at point or region to css `rgb' color." t)(autoload 'kurecolor-hexcolor-at-point-or-region-to-css-rgba "kurecolor" "Hex `rgb' color at point or region to css `rgba'.\nOpacity is always set to `1.0'." t)(autoload 'kurecolor-xcode-color-literal-at-point-or-region-to-hex-rgba "kurecolor" "XCode `colorLiteral' at point to hex `rgba'." t)(autoload 'kurecolor-xcode-color-literal-at-point-or-region-to-hex-rgb "kurecolor" "XCode `colorLiteral' at point to hex `rgb'." t)(autoload 'kurecolor-hex-rgb-at-point-or-region-to-xcode-color-literal "kurecolor" "Hex `rgb' to XCode `colorLiteral'." t)(autoload 'kurecolor-hex-rgba-at-point-or-region-to-xcode-color-literal "kurecolor" "Hex `rgba' to XCode `colorLiteral'." t)(autoload 'tree-sitter-indent-line "tree-sitter-indent" "Use Tree-sitter as backend to indent current line.")(autoload 'tree-sitter-indent-mode "tree-sitter-indent" "Use Tree-sitter as backend for indenting buffer.\n\nThis is a minor mode.  If called interactively, toggle the\n`Tree-Sitter-Indent mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `tree-sitter-indent-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'tree-sitter-langs--init-load-path "tree-sitter-langs" "Add the directory containing compiled grammars to `tree-sitter-load-path'.\n\n(fn &rest ARGS)")(advice-add 'tree-sitter-load :before #'tree-sitter-langs--init-load-path)(autoload 'tree-sitter-langs--init-major-mode-alist "tree-sitter-langs" "Link known major modes to languages provided by the bundle.\n\n(fn &rest ARGS)")(advice-add 'tree-sitter--setup :before #'tree-sitter-langs--init-major-mode-alist)(autoload 'tree-sitter-langs--set-hl-default-patterns "tree-sitter-langs" "Use syntax highlighting patterns provided by `tree-sitter-langs'.\n\n(fn &rest ARGS)")(advice-add 'tree-sitter-hl--setup :before #'tree-sitter-langs--set-hl-default-patterns)(autoload 'tree-sitter-langs-install-grammars "tree-sitter-langs-build" "Download and install the specified VERSION of the language grammar bundle.\nIf VERSION or OS is not specified, use the default of\n`tree-sitter-langs--bundle-version' and `tree-sitter-langs--os'.\n\nThis installs the grammar bundle even if the same version was already installed,\nunless SKIP-IF-INSTALLED is non-nil.\n\nThe download bundle file is deleted after installation, unless KEEP-BUNDLE is\nnon-nil.\n\n(fn &optional SKIP-IF-INSTALLED VERSION OS KEEP-BUNDLE)" t)(autoload 'tree-sitter-langs-install-latest-grammar "tree-sitter-langs-build" "Install the latest version of the tree-sitter-langs grammar bundle.\nAutomatically retrieves the latest version tag from GitHub.\nIf SKIP-IF-INSTALLED is non-nil, skips if the latest version is already installed.\nOS specifies the operating system.\nIf KEEP-BUNDLE is non-nil, the downloaded bundle file is not deleted after installation.\n\n(fn &optional SKIP-IF-INSTALLED OS KEEP-BUNDLE)" t)(defvar ns-auto-titlebar-mode nil "Non-nil if Ns-Auto-Titlebar mode is enabled.\nSee the `ns-auto-titlebar-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `ns-auto-titlebar-mode'.")(autoload 'ns-auto-titlebar-mode "ns-auto-titlebar" "Set the MacOS transparent titlebar background automatically.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Ns-Auto-Titlebar mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='ns-auto-titlebar-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'osx-trash-setup "osx-trash" "Provide trash support for OS X.\n\nProvide `system-move-file-to-trash' as an alias for\n`osx-trash-move-file-to-trash'.\n\nNote that you still need to set `delete-by-moving-to-trash' to a\nnon-nil value to enable trashing for file operations.")(autoload 'csv-mode "csv-mode" "Major mode for editing files of comma-separated value type.\n\nCSV mode is derived from `text-mode', and runs `text-mode-hook' before\nrunning `csv-mode-hook'.  It turns `auto-fill-mode' off by default.\nCSV mode can be customized by user options in the CSV customization\ngroup.  The separators are specified by the value of `csv-separators'.\n\nCSV mode commands ignore blank lines and comment lines beginning with\nthe value of `csv-comment-start', which delimit \"paragraphs\".\n\"Sexp\" is re-interpreted to mean \"field\", so that `forward-sexp'\n(\\[forward-sexp]), `kill-sexp' (\\[kill-sexp]), etc. all apply to fields.\nStandard comment commands apply, such as `comment-dwim' (\\[comment-dwim]).\n\nIf `font-lock-mode' is enabled then separators, quoted values and\ncomment lines are highlighted using respectively `csv-separator-face',\n`font-lock-string-face' and `font-lock-comment-face'.\n\nThe user interface (UI) for CSV mode commands is similar to that of\nthe standard commands `sort-fields' and `sort-numeric-fields', except\nthat if there is no prefix argument then the UI prompts for the field\nindex or indices.  In `transient-mark-mode' only: if the region is not\nset then the UI attempts to set it to include all consecutive CSV\nrecords around point, and prompts for confirmation; if there is no\nprefix argument then the UI prompts for it, offering as a default the\nindex of the field containing point if the region was not set\nexplicitly.  The region set automatically is delimited by blank lines\nand comment lines, and the number of header lines at the beginning of\nthe region given by the value of `csv-header-lines' are skipped.\n\nSort order is controlled by `csv-descending'.\n\nCSV mode provides the following specific keyboard key bindings:\n\n\\{csv-mode-map}\n\n(fn)" t)(autoload 'tsv-mode "csv-mode" "Major mode for editing files of tab-separated value type.\n\n(fn)" t)(autoload 'buttercup-run-at-point "buttercup" "Run the buttercup suite at point." t)(autoload 'buttercup-run-discover "buttercup" "Discover and load test files, then run all defined suites.\n\nTakes directories as command line arguments, defaulting to the\ncurrent directory.")(autoload 'buttercup-run-markdown-buffer "buttercup" "Run all test suites defined in MARKDOWN-BUFFERS.\nA suite must be defined within a Markdown \"lisp\" code block.\nIf MARKDOWN-BUFFERS is empty (nil), use the current buffer.\n\n(fn &rest MARKDOWN-BUFFERS)" t)(autoload 'buttercup-run-markdown "buttercup" "Run all test suites defined in Markdown files passed as arguments.\nA suite must be defined within a Markdown \"lisp\" code block.")(autoload 'buttercup-run-markdown-file "buttercup" "Run all test suites defined in Markdown FILE.\nA suite must be defined within a Markdown \"lisp\" code block.\n\n(fn FILE)" t)(autoload 'buttercup-minor-mode "buttercup" "Activate buttercup minor mode.\n\nWith buttercup minor mode active the following is activated:\n\n- `describe' and `it' forms are fontified with\n  `font-lock-keyword-face'.\n- `describe' and `it' forms are available from `imenu' for\n  quicker access.\n\nThis is a minor mode.  If called interactively, toggle the\n`Buttercup minor mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `buttercup-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'flycheck-cask-setup "flycheck-cask" "Setup Cask integration for Flycheck.\n\nIf the current file is part of a Cask project, as denoted by the\nexistence of a Cask file in the file's directory or any ancestor\nthereof, configure Flycheck to initialze Cask packages while\nsyntax checking.\n\nSet `flycheck-emacs-lisp-initialize-packages' and\n`flycheck-emacs-lisp-package-user-dir' accordingly.")(autoload 'flycheck-package-setup "flycheck-package" "Setup flycheck-package.\nAdd `flycheck-emacs-lisp-package' to `flycheck-checkers'." t)(autoload 'package-lint-describe-symbol-history "package-lint" "Show the version history of SYM, if any.\n\n(fn SYM)" t)(autoload 'package-lint-buffer "package-lint" "Get linter errors and warnings for BUFFER.\n\nReturns a list, each element of which is list of\n\n   (LINE COL TYPE MESSAGE)\n\nwhere TYPE is either `warning' or `error'.\n\nCurrent buffer is used if none is specified.\n\n(fn &optional BUFFER)")(autoload 'package-lint-current-buffer "package-lint" "Display lint errors and warnings for the current buffer." t)(autoload 'package-lint-batch-and-exit "package-lint" "Run `package-lint-buffer' on the files remaining on the command line.\nUse this only with -batch, it won't work interactively.\n\nWhen done, exit Emacs with status 1 in case of any errors, otherwise exit\nwith status 0.  The variable `package-lint-batch-fail-on-warnings' controls\nwhether or not warnings alone produce a non-zero exit code.")(autoload 'package-lint-looks-like-a-package-p "package-lint" "Return non-nil if the current buffer appears to be intended as a package.")(autoload 'elisp-demos-advice-describe-function-1 "elisp-demos" "\n\n(fn FUNCTION)")(autoload 'elisp-demos-advice-helpful-update "elisp-demos")(autoload 'elisp-demos-for-helpful "elisp-demos" "Find a demo for the current `helpful' buffer." t)(autoload 'elisp-def "elisp-def" "Go to the definition of the symbol at point." t)(autoload 'elisp-def-mode "elisp-def" "Minor mode for finding definitions with `elisp-def'.\n\n\\{elisp-def-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Elisp-Def mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `elisp-def-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'overseer-version "overseer" "Get the Overseer version as string.\n\nIf called interactively or if SHOW-VERSION is non-nil, show the\nversion in the echo area and the messages buffer.\n\nThe returned string includes both, the version from package.el\nand the library version, if both a present and different.\n\nIf the version number could not be determined, signal an error,\nif called interactively, or if SHOW-VERSION is non-nil, otherwise\njust return nil.\n\n(fn &optional SHOW-VERSION)" t)(autoload 'overseer-mode "overseer" "Minor mode for emacs lisp files to test through ert-runner.\n\nKey bindings:\n\\{overseer-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`overseer mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `overseer-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'overseer-enable-mode "overseer")(dolist (hook '(emacs-lisp-mode-hook)) (add-hook hook 'overseer-enable-mode))(autoload 'macrostep-mode "macrostep" "Minor mode for inline expansion of macros in Emacs Lisp source buffers.\n\n\\<macrostep-mode-map>Progressively expand macro forms with \\[macrostep-expand], collapse them with \\[macrostep-collapse],\nand move back and forth with \\[macrostep-next-macro] and \\[macrostep-prev-macro].  Use \\[macrostep-collapse-all] or collapse all\nvisible expansions to quit and return to normal editing.\n\n\\{macrostep-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Macrostep mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `macrostep-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'macrostep-expand "macrostep" "Expand the macro form following point by one step.\n\nEnters `macrostep-mode' if it is not already active, making the\nbuffer temporarily read-only.  If `macrostep-mode' is active and the\nform following point is not a macro form, search forward in the\nbuffer and expand the next macro form found, if any.\n\nWith a prefix argument, the expansion is displayed in a separate\nbuffer instead of inline in the current buffer.  Setting\n`macrostep-expand-in-separate-buffer' to non-nil swaps these two\nbehaviors.\n\n(fn &optional TOGGLE-SEPARATE-BUFFER)" t)(autoload 'macrostep-c-mode-hook "macrostep-c")(add-hook 'c-mode-hook #'macrostep-c-mode-hook)(autoload 'highlight-quoted-mode "highlight-quoted" "Highlight Lisp quotes and quoted symbols.\n\nToggle Highlight-Quoted mode on or off.\nWith a prefix argument ARG, enable Highlight-Quoted mode if ARG is positive, and\ndisable it otherwise.  If called from Lisp, enable the mode if ARG is omitted or\nnil, and toggle it if ARG is `toggle'.\n\\{highlight-quoted-mode-map}\n\n(fn &optional ARG)" t)(autoload 'jsons-print-path "json-snatcher" "Print the path to the JSON value under point, and save it in the kill ring." t)(defconst json-mode-standard-file-ext '(".json" ".jsonld") "List of JSON file extensions.")(defsubst json-mode--update-auto-mode (filenames) "Update the `json-mode' entry of `auto-mode-alist'.\n\nFILENAMES should be a list of file as string.\nReturn the new `auto-mode-alist' entry" (let* ((new-regexp (rx-to-string `(seq (eval (cons 'or (append json-mode-standard-file-ext ',filenames))) eot))) (new-entry (cons new-regexp 'json-mode)) (old-entry (when (boundp 'json-mode--auto-mode-entry) json-mode--auto-mode-entry))) (setq auto-mode-alist (delete old-entry auto-mode-alist)) (add-to-list 'auto-mode-alist new-entry) new-entry))(defvar json-mode-auto-mode-list '(".babelrc" ".bowerrc" "composer.lock") "List of filenames for the JSON entry of `auto-mode-alist'.\n\nNote however that custom `json-mode' entries in `auto-mode-alist'\nwon\x2019t be affected.")(defvar json-mode--auto-mode-entry (json-mode--update-auto-mode json-mode-auto-mode-list) "Regexp generated from the `json-mode-auto-mode-list'.")(autoload 'json-mode "json-mode" "Major mode for editing JSON files.\n\n(fn)" t)(autoload 'jsonc-mode "json-mode" "Major mode for editing JSON files with comments.\n\n(fn)" t)(autoload 'json-mode-show-path "json-mode" "Print the path to the node at point to the minibuffer." t)(autoload 'json-mode-kill-path "json-mode" "Save JSON path to object at point to kill ring." t)(autoload 'json-mode-beautify "json-mode" "Beautify/pretty-print from BEGIN to END.\n\nIf the region is not active, beautify the entire buffer .\n\n(fn BEGIN END)" t)(autoload 'xref-js2-xref-backend "xref-js2" "Xref-Js2 backend for Xref.")(autoload 'js2-imenu-extras-setup "js2-imenu-extras")(autoload 'js2-imenu-extras-mode "js2-imenu-extras" "Toggle Imenu support for frameworks and structural patterns.\n\nThis is a minor mode.  If called interactively, toggle the\n`Js2-Imenu-Extras mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `js2-imenu-extras-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'js2-highlight-unused-variables-mode "js2-mode" "Toggle highlight of unused variables.\n\nThis is a minor mode.  If called interactively, toggle the\n`Js2-Highlight-Unused-Variables mode' mode.  If the prefix\nargument is positive, enable the mode, and if it is zero or\nnegative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `js2-highlight-unused-variables-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'js2-minor-mode "js2-mode" "Minor mode for running js2 as a background linter.\n\nThis allows you to use a different major mode for JavaScript editing,\nsuch as `js-mode', while retaining the asynchronous error/warning\nhighlighting features of `js2-mode'.\n\nThis is a minor mode.  If called interactively, toggle the `Js2\nminor mode' mode.  If the prefix argument is positive, enable the\nmode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `js2-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'js2-mode "js2-mode" "Major mode for editing JavaScript code.\n\n(fn)" t)(autoload 'js2-jsx-mode "js2-mode" "Major mode for editing JSX code in Emacs 26 and earlier.\n\nTo edit JSX code in Emacs 27, use `js-mode' as your major mode\nwith `js2-minor-mode' enabled.\n\nTo customize the indentation for this mode, set the SGML offset\nvariables (`sgml-basic-offset' et al) locally, like so:\n\n  (defun set-jsx-indentation ()\n    (setq-local sgml-basic-offset js2-basic-offset))\n  (add-hook \\='js2-jsx-mode-hook #\\='set-jsx-indentation)\n\n(fn)" t)(autoload 'company-tide "tide" "\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'tide-format-before-save "tide" "Before save hook to format the buffer before each save." t)(autoload 'tide-format "tide" "Format the current region or buffer." t)(autoload 'tide-setup "tide" "Setup `tide-mode' in current buffer." t)(autoload 'tide-mode "tide" "Minor mode for Typescript Interactive Development Environment.\n\n\\{tide-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the `tide\nmode' mode.  If the prefix argument is positive, enable the mode,\nand if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `tide-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'tide-project-errors "tide" nil t)(autoload 'tide-unhighlight-identifiers "tide" "Remove highlights from previously highlighted identifier.")(autoload 'tide-hl-identifier "tide" "Highlight all instances of the identifier under point. Removes\nhighlights from previously highlighted identifier." t)(autoload 'tide-hl-identifier-mode "tide" "Highlight instances of the identifier at point after a short\n\ntimeout.\n\nThis is a minor mode.  If called interactively, toggle the\n`Tide-Hl-Identifier mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `tide-hl-identifier-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'skewer-bower-refresh "skewer-bower" "Update the package listing and packages synchronously." t)(autoload 'skewer-bower-load "skewer-bower" "Dynamically load a library from bower into the current page.\n\n(fn PACKAGE &optional VERSION)" t)(autoload 'skewer-css-mode "skewer-css" "Minor mode for interactively loading new CSS rules.\n\nThis is a minor mode.  If called interactively, toggle the\n`skewer-css mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `skewer-css-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'skewer-html-mode "skewer-html" "Minor mode for interactively loading new HTML.\n\nThis is a minor mode.  If called interactively, toggle the\n`skewer-html mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `skewer-html-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'list-skewer-clients "skewer-mode" "List the attached browsers in a buffer." t)(autoload 'skewer-mode "skewer-mode" "Minor mode for interacting with a browser.\n\nThis is a minor mode.  If called interactively, toggle the\n`skewer mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `skewer-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'run-skewer "skewer-mode" "Attach a browser to Emacs for a skewer JavaScript REPL. Uses\n`browse-url' to launch a browser.\n\nWith a prefix arugment (C-u), it will ask the filename of the\nroot document.  With two prefix arguments (C-u C-u), it will use\nthe contents of the current buffer as the root document.\n\n(fn &optional ARG)" t)(autoload 'skewer-run-phantomjs "skewer-mode" "Connect an inferior PhantomJS process to Skewer, returning the process." t)(autoload 'skewer-repl--response-hook "skewer-repl" "Catches all browser messages logging some to the REPL.\n\n(fn RESPONSE)")(autoload 'skewer-repl "skewer-repl" "Start a JavaScript REPL to be evaluated in the visiting browser." t)(eval-after-load 'skewer-mode '(progn (add-hook 'skewer-response-hook #'skewer-repl--response-hook) (add-hook 'skewer-repl-mode-hook #'skewer-repl-mode-compilation-shell-hook) (define-key skewer-mode-map (kbd "C-c C-z") #'skewer-repl)))(autoload 'skewer-setup "skewer-setup" "Fully integrate Skewer into js2-mode, css-mode, and html-mode buffers.")(autoload 'httpd-start "simple-httpd" "Start the web server process. If the server is already\nrunning, this will restart the server. There is only one server\ninstance per Emacs instance." t)(autoload 'httpd-stop "simple-httpd" "Stop the web server if it is currently running, otherwise do nothing." t)(autoload 'httpd-running-p "simple-httpd" "Return non-nil if the simple-httpd server is running.")(autoload 'httpd-serve-directory "simple-httpd" "Start the web server with given `directory' as `httpd-root'.\n\n(fn DIRECTORY)" t)(autoload 'nodejs-repl-send-line "nodejs-repl" "Send the current line to the `nodejs-repl-process'" t)(autoload 'nodejs-repl-send-region "nodejs-repl" "Send the current region to the `nodejs-repl-process'\n\n(fn START END)" t)(autoload 'nodejs-repl-send-buffer "nodejs-repl" "Send the current buffer to the `nodejs-repl-process'" t)(autoload 'nodejs-repl-load-file "nodejs-repl" "Load the file to the `nodejs-repl-process'\n\n(fn FILE)" t)(autoload 'nodejs-repl-send-last-expression "nodejs-repl" "Send the expression before point to the `nodejs-repl-process'" t)(autoload 'nodejs-repl-switch-to-repl "nodejs-repl" "If there is a `nodejs-repl-process' running switch to it,\notherwise spawn one." t)(autoload 'nodejs-repl "nodejs-repl" "Run Node.js REPL." t)(autoload 'npm-mode "npm-mode" "Minor mode for working with npm projects.\n\nThis is a minor mode.  If called interactively, toggle the `Npm\nmode' mode.  If the prefix argument is positive, enable the mode,\nand if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `npm-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'npm-global-mode 'globalized-minor-mode t)(defvar npm-global-mode nil "Non-nil if Npm-Global mode is enabled.\nSee the `npm-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `npm-global-mode'.")(autoload 'npm-global-mode "npm-mode" "Toggle Npm mode in all buffers.\nWith prefix ARG, enable Npm-Global mode if ARG is positive; otherwise,\ndisable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nNpm mode is enabled in all buffers where `npm-mode' would do it.\n\nSee `npm-mode' for more information on Npm mode.\n\n(fn &optional ARG)" t)(autoload 'js2-refactor-mode "js2-refactor" "Minor mode providing JavaScript refactorings.\n\nThis is a minor mode.  If called interactively, toggle the\n`Js2-Refactor mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `js2-refactor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'js2r-add-keybindings-with-prefix "js2-refactor" "Add js2r keybindings using the prefix PREFIX.\n\n(fn PREFIX)")(autoload 'js2r-add-keybindings-with-modifier "js2-refactor" "Add js2r keybindings using the modifier MODIFIER.\n\n(fn MODIFIER)")(autoload 'js2r-rename-var "js2r-vars" "Renames the variable on point and all occurrences in its lexical scope." t)(autoload 'js2r-extract-var "js2r-vars" nil t)(autoload 'js2r-extract-let "js2r-vars" nil t)(autoload 'js2r-extract-const "js2r-vars" nil t)(autoload 'mc/edit-lines "mc-edit-lines" "Add one cursor to each line of the active region.\nStarts from mark and moves in straight down or up towards the\nline point is on.\n\nWhat is done with lines which are not long enough is governed by\n`mc/edit-lines-empty-lines'.  The prefix argument ARG can be used\nto override this.  If ARG is a symbol (when called from Lisp),\nthat symbol is used instead of `mc/edit-lines-empty-lines'.\nOtherwise, if ARG negative, short lines will be ignored.  Any\nother non-nil value will cause short lines to be padded.\n\n(fn &optional ARG)" t)(autoload 'mc/edit-ends-of-lines "mc-edit-lines" "Add one cursor to the end of each line in the active region." t)(autoload 'mc/edit-beginnings-of-lines "mc-edit-lines" "Add one cursor to the beginning of each line in the active region." t)(autoload 'mc-hide-unmatched-lines-mode "mc-hide-unmatched-lines-mode" "Minor mode when enabled hides all lines where no cursors (and\n\nalso hum/lines-to-expand below and above) To make use of this\nmode press \"C-'\" while multiple-cursor-mode is active. You can\nstill edit lines while you are in mc-hide-unmatched-lines\nmode. To leave this mode press <return> or \"C-g\"\n\nThis is a minor mode.  If called interactively, toggle the\n`Mc-Hide-Unmatched-Lines mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `mc-hide-unmatched-lines-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'mc/mark-next-like-this "mc-mark-more" "Find and mark the next part of the buffer matching the currently active region\nIf no region is active add a cursor on the next line\nWith negative ARG, delete the last one instead.\nWith zero ARG, skip the last one and mark next.\n\n(fn ARG)" t)(autoload 'mc/mark-next-like-this-word "mc-mark-more" "Find and mark the next part of the buffer matching the currently active region\nIf no region is active, mark the word at the point and find the next match\nWith negative ARG, delete the last one instead.\nWith zero ARG, skip the last one and mark next.\n\n(fn ARG)" t)(autoload 'mc/mark-next-word-like-this "mc-mark-more" "Find and mark the next word of the buffer matching the currently active region\nThe matching region must be a whole word to be a match\nIf no region is active add a cursor on the next line\nWith negative ARG, delete the last one instead.\nWith zero ARG, skip the last one and mark next.\n\n(fn ARG)" t)(autoload 'mc/mark-next-symbol-like-this "mc-mark-more" "Find and mark the next symbol of the buffer matching the currently active region\nThe matching region must be a whole symbol to be a match\nIf no region is active add a cursor on the next line\nWith negative ARG, delete the last one instead.\nWith zero ARG, skip the last one and mark next.\n\n(fn ARG)" t)(autoload 'mc/mark-previous-like-this "mc-mark-more" "Find and mark the previous part of the buffer matching the\ncurrently active region.\n\nIf no region is active ,add a cursor on the previous line.\n\nWith negative ARG, delete the last one instead.\n\nWith zero ARG, skip the last one and mark next.\n\n(fn ARG)" t)(autoload 'mc/mark-previous-like-this-word "mc-mark-more" "Find and mark the previous part of the buffer matching the\ncurrently active region.\n\nIf no region is active, mark the word at the point and find the\nprevious match.\n\nWith negative ARG, delete the last one instead.\n\nWith zero ARG, skip the last one and mark previous.\n\n(fn ARG)" t)(autoload 'mc/mark-previous-word-like-this "mc-mark-more" "Find and mark the previous part of the buffer matching the\ncurrently active region.\n\nThe matching region must be a whole word to be a match.\n\nIf no region is active, add a cursor on the previous line.\n\nWith negative ARG, delete the last one instead.\n\nWith zero ARG, skip the last one and mark next.\n\n(fn ARG)" t)(autoload 'mc/mark-previous-symbol-like-this "mc-mark-more" "Find and mark the previous part of the buffer matching\nthe currently active region.\n\nThe matching region must be a whole symbol to be a match.\n\nIf no region is active add a cursor on the previous line.\n\nWith negative ARG, delete the last one instead.\n\nWith zero ARG, skip the last one and mark next.\n\n(fn ARG)" t)(autoload 'mc/mark-next-lines "mc-mark-more" "\n\n(fn ARG)" t)(autoload 'mc/mark-previous-lines "mc-mark-more" "\n\n(fn ARG)" t)(autoload 'mc/unmark-next-like-this "mc-mark-more" "Deselect next part of the buffer matching the currently active region." t)(autoload 'mc/unmark-previous-like-this "mc-mark-more" "Deselect prev part of the buffer matching the currently active region." t)(autoload 'mc/skip-to-next-like-this "mc-mark-more" "Skip the current one and select the next part of the buffer\nmatching the currently active region." t)(autoload 'mc/skip-to-previous-like-this "mc-mark-more" "Skip the current one and select the prev part of the buffer\nmatching the currently active region." t)(autoload 'mc/mark-all-like-this "mc-mark-more" "Find and mark all the parts of the buffer matching the currently active region" t)(autoload 'mc/mark-all-words-like-this "mc-mark-more" nil t)(autoload 'mc/mark-all-symbols-like-this "mc-mark-more" nil t)(autoload 'mc/mark-all-in-region "mc-mark-more" "Find and mark all the parts in the region matching the given search\n\n(fn BEG END &optional SEARCH)" t)(autoload 'mc/mark-all-in-region-regexp "mc-mark-more" "Find and mark all the parts in the region matching the given regexp.\n\n(fn BEG END)" t)(autoload 'mc/mark-more-like-this-extended "mc-mark-more" "Like mark-more-like-this, but then lets you adjust with arrow keys.\nThe adjustments work like this:\n\n   <up>    Mark previous like this and set direction to 'up\n   <down>  Mark next like this and set direction to 'down\n\nIf direction is 'up:\n\n   <left>  Skip past the cursor furthest up\n   <right> Remove the cursor furthest up\n\nIf direction is 'down:\n\n   <left>  Remove the cursor furthest down\n   <right> Skip past the cursor furthest down\n\nThe bindings for these commands can be changed.\nSee `mc/mark-more-like-this-extended-keymap'." t)(autoload 'mc/mark-all-like-this-dwim "mc-mark-more" "Tries to guess what you want to mark all of.\nCan be pressed multiple times to increase selection.\n\nWith prefix, it behaves the same as original `mc/mark-all-like-this'\n\n(fn ARG)" t)(autoload 'mc/mark-all-dwim "mc-mark-more" "Tries even harder to guess what you want to mark all of.\n\nIf the region is active and spans multiple lines, it will behave\nas if `mc/mark-all-in-region'. With the prefix ARG, it will call\n`mc/edit-lines' instead.\n\nIf the region is inactive or on a single line, it will behave like\n`mc/mark-all-like-this-dwim'.\n\n(fn ARG)" t)(autoload 'mc/mark-all-like-this-in-defun "mc-mark-more" "Mark all like this in defun." t)(autoload 'mc/mark-all-words-like-this-in-defun "mc-mark-more" "Mark all words like this in defun." t)(autoload 'mc/mark-all-symbols-like-this-in-defun "mc-mark-more" "Mark all symbols like this in defun." t)(autoload 'mc/toggle-cursor-on-click "mc-mark-more" "Add a cursor where you click, or remove a fake cursor that is\nalready there.\n\n(fn EVENT)" t)(defalias 'mc/add-cursor-on-click 'mc/toggle-cursor-on-click)(autoload 'mc/mark-sgml-tag-pair "mc-mark-more" "Mark the tag we're in and its pair for renaming." t)(autoload 'mc/mark-pop "mc-mark-pop" "Add a cursor at the current point, pop off mark ring and jump\nto the popped mark." t)(autoload 'mc/insert-numbers "mc-separate-operations" "Insert increasing numbers for each cursor, starting at\n`mc/insert-numbers-default' or ARG.\n\n(fn ARG)" t)(autoload 'mc/insert-letters "mc-separate-operations" "Insert increasing letters for each cursor, starting at 0 or ARG.\n     Where letter[0]=a letter[2]=c letter[26]=aa\n\n(fn ARG)" t)(autoload 'mc/reverse-regions "mc-separate-operations" nil t)(autoload 'mc/sort-regions "mc-separate-operations" nil t)(autoload 'mc/vertical-align "mc-separate-operations" "Aligns all cursors vertically with a given CHARACTER to the one with the\nhighest column number (the rightest).\nMight not behave as intended if more than one cursors are on the same line.\n\n(fn CHARACTER)" t)(autoload 'mc/vertical-align-with-space "mc-separate-operations" "Aligns all cursors with whitespace like `mc/vertical-align' does" t)(autoload 'activate-cursor-for-undo "multiple-cursors-core" "Called when undoing to temporarily activate the fake cursor\nwhich action is being undone.\n\n(fn ID)")(autoload 'multiple-cursors-mode "multiple-cursors-core" "Mode while multiple cursors are active.\n\nThis is a minor mode.  If called interactively, toggle the\n`Multiple-Cursors mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `multiple-cursors-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'set-rectangular-region-anchor "rectangular-region-mode" "Anchors the rectangular region at point.\n\nThink of this one as `set-mark' except you're marking a\nrectangular region. It is an exceedingly quick way of adding\nmultiple cursors to multiple lines." t)(autoload 'rectangular-region-mode "rectangular-region-mode" "A mode for creating a rectangular region to edit\n\nThis is a minor mode.  If called interactively, toggle the\n`Rectangular-Region mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `rectangular-region-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'typescript-indent-level 'safe-local-variable #'integerp)(autoload 'typescript-mode "typescript-mode" "Major mode for editing typescript.\n\nKey bindings:\n\n\\{typescript-mode-map}\n\n(fn)" t)(eval-after-load 'folding '(when (fboundp 'folding-add-to-marks-list) (folding-add-to-marks-list 'typescript-mode "// {{{" "// }}}")))(autoload 'rjsx-mode "rjsx-mode" "Major mode for editing JSX files.\n\n(fn)" t)(autoload 'rjsx-minor-mode "rjsx-mode" "Minor mode for parsing JSX syntax into an AST.\n\nThis is a minor mode.  If called interactively, toggle the `rjsx\nminor mode' mode.  If the prefix argument is positive, enable the\nmode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `rjsx-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'rjsx-comment-dwim "rjsx-mode" "RJSX implementation of `comment-dwim'. If called on a region,\nthis function delegates to `comment-or-uncomment-region'. If the\npoint is not in a JSX context, it delegates to the\n`comment-dwim', otherwise it will comment the JSX AST node at\npoint using the apppriate comment delimiters.\n\nFor example: If point is on a JSX attribute or JSX expression, it\nwill comment the entire attribute using \"/* */\". , otherwise if\nit's on a descendent JSX Element, it will use \"{/* */}\"\ninstead.\n\n(fn ARG)" t)(autoload 'company-latex-commands "company-math" "Company backend for latex commands.\nCOMMAND and ARG is as required by company backends.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-math-symbols-latex "company-math" "Company backend for LaTeX mathematical symbols.\nCOMMAND and ARG is as required by company backends.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-math-symbols-unicode "company-math" "Company backend for insertion of Unicode mathematical symbols.\nCOMMAND and ARG is as required by company backends.\nSee the unicode-math page [1] for a list of fonts that have a\ngood support for mathematical symbols. Unicode provides only a\nlimited range of sub(super)scripts; see the wikipedia page [2]\nfor details.\n\n [1] http://ftp.snt.utwente.nl/pub/software/tex/help/Catalogue/entries/unicode-math.html\n [2] https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-reftex-citations "company-reftex" "Company backend for LaTeX citations, powered by reftex.\nFor more information on COMMAND and ARG see `company-backends'.\n\n(fn COMMAND &optional ARG &rest _)" t)(autoload 'company-reftex-labels "company-reftex" "Company backend for LaTeX labels, powered by reftex.\nFor more information on COMMAND and ARG see `company-backends'.\n\n(fn COMMAND &optional ARG &rest _)" t)(autoload 'company-auctex-macros "company-auctex" "company-auctex-macros backend\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-auctex-symbols "company-auctex" "company-auctex-symbols backend\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-auctex-environments "company-auctex" "company-auctex-environments backend\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-auctex-labels "company-auctex" "company-auctex-labels backend\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-auctex-bibs "company-auctex" "company-auctex-bibs backend\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-auctex-init "company-auctex" "Add backends provided by company-auctex to company-backends.")(autoload 'bib-cite-minor-mode "bib-cite" "Toggle bib-cite mode.\nWhen bib-cite mode is enabled, citations, labels and refs are highlighted\nwhen the mouse is over them.  Clicking on these highlights with [mouse-2]\nruns `bib-find', and [mouse-3] runs `bib-display'.\n\n(fn ARG)" t)(autoload 'turn-on-bib-cite "bib-cite" "Unconditionally turn on Bib Cite mode.")(defalias 'ConTeXt-mode #'context-mode)(autoload 'context-mode "context" "Major mode in AUCTeX for editing ConTeXt files.\n\nSpecial commands:\n\\{ConTeXt-mode-map}\n\nEntering `context-mode' calls the value of `text-mode-hook',\nthen the value of `TeX-mode-hook', and then the value\nof `ConTeXt-mode-hook'." t)(autoload 'context-en-mode "context-en" "Major mode for editing files for ConTeXt using its english interface.\n\nSpecial commands:\n\\{ConTeXt-mode-map}\n\nEntering `context-mode' calls the value of `text-mode-hook',\nthen the value of `TeX-mode-hook', and then the value\nof `ConTeXt-mode-hook'." t)(autoload 'context-nl-mode "context-nl" "Major mode for editing files for ConTeXt using its dutch interface.\n\nSpecial commands:\n\\{ConTeXt-mode-map}\n\nEntering `context-mode' calls the value of `text-mode-hook',\nthen the value of `TeX-mode-hook', and then the value\nof `ConTeXt-mode-hook'." t)(autoload 'font-latex-setup "font-latex" "Setup this buffer for LaTeX font-lock.  Usually called from a hook.")(autoload 'BibTeX-auto-store "latex" "This function should be called from `bibtex-mode-hook'.\nIt will setup BibTeX to store keys in an auto file.")(autoload 'TeX-latex-mode "latex" "Major mode in AUCTeX for editing LaTeX files.\nSee info under AUCTeX for full documentation.\n\nSpecial commands:\n\\{LaTeX-mode-map}\n\nEntering LaTeX mode calls the value of `text-mode-hook',\nthen the value of `TeX-mode-hook', and then the value\nof `LaTeX-mode-hook'." t)(autoload 'docTeX-mode "latex" "Major mode in AUCTeX for editing .dtx files derived from `LaTeX-mode'.\nRuns `LaTeX-mode', sets a few variables and\nruns the hooks in `docTeX-mode-hook'.\n\n(fn)" t)(defalias 'TeX-doctex-mode #'docTeX-mode)(autoload 'multi-prompt "multi-prompt" "Completing prompt for a list of strings.\nThe first argument SEPARATOR should be the string (of length 1) to\nseparate the elements in the list.  The second argument UNIQUE should\nbe non-nil, if each element must be unique.  The remaining elements\nare the arguments to `completing-read'.  See that.\n\n(fn SEPARATOR UNIQUE PROMPT TABLE &optional MP-PREDICATE REQUIRE-MATCH INITIAL HISTORY)")(autoload 'multi-prompt-key-value "multi-prompt" "Read multiple strings, with completion and key=value support.\nPROMPT is a string to prompt with, usually ending with a colon\nand a space.\n\nTABLE is an alist where each entry is a list.  The first element\nof each list is a string representing a key and the optional\nsecond element is a list with strings to be used as values for\nthe key.  The second element can also be a variable returning a\nlist of strings.\n\nSee the documentation for `completing-read' for details on the\nother arguments: PREDICATE, REQUIRE-MATCH, INITIAL-INPUT, HIST,\nDEF, and INHERIT-INPUT-METHOD.\n\nThe return value is the string as entered in the minibuffer.\n\n(fn PROMPT TABLE &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)")(autoload 'TeX-plain-tex-mode "plain-tex" "Major mode in AUCTeX for editing plain TeX files.\nSee info under AUCTeX for documentation.\n\nSpecial commands:\n\\{plain-TeX-mode-map}\n\nEntering `plain-tex-mode' calls the value of `text-mode-hook',\nthen the value of `TeX-mode-hook', and then the value\nof `plain-TeX-mode-hook'." t)(autoload 'ams-tex-mode "plain-tex" "Major mode in AUCTeX for editing AmS-TeX files.\nSee info under AUCTeX for documentation.\n\nSpecial commands:\n\\{AmSTeX-mode-map}\n\nEntering `ams-tex-mode' calls the value of `text-mode-hook',\nthen the value of `TeX-mode-hook', and then the value\nof `AmS-TeX-mode-hook'." t)(put 'preview-scale-function 'safe-local-variable (lambda (x) (and (numberp x) (<= 0.1 x 10))))(autoload 'desktop-buffer-preview "preview" "Hook function for restoring persistent previews into a buffer.\n\n(fn FILE-NAME BUFFER-NAME MISC)")(add-to-list 'desktop-buffer-mode-handlers '(latex-mode . desktop-buffer-preview))(autoload 'preview-install-styles "preview" "Installs the TeX style files into a permanent location.\nThis must be in the TeX search path.  If FORCE-OVERWRITE is greater\nthan 1, files will get overwritten without query, if it is less\nthan 1 or nil, the operation will fail.  The default of 1 for interactive\nuse will query.\n\nSimilarly FORCE-SAVE can be used for saving\n`preview-TeX-style-dir' to record the fact that the uninstalled\nfiles are no longer needed in the search path.\n\n(fn DIR &optional FORCE-OVERWRITE FORCE-SAVE)" t)(autoload 'LaTeX-preview-setup "preview" "Hook function for embedding the preview package into AUCTeX.\nThis is called by `LaTeX-mode-hook' and changes AUCTeX variables\nto add the preview functionality.")(autoload 'preview-report-bug "preview" "Report a bug in the preview-latex package." t)(autoload 'TeX-tex-mode "tex" "Major mode in AUCTeX for editing TeX or LaTeX files.\nTries to guess whether this file is for plain TeX or LaTeX.\n\nThe algorithm is as follows:\n\n   1) if the file is empty or `TeX-force-default-mode' is not set to nil,\n      `TeX-default-mode' is chosen\n   2) If \\documentstyle or \\begin{, \\section{, \\part{ or \\chapter{ is\n      found, `latex-mode' is selected.\n   3) Otherwise, use `plain-tex-mode'" t)(autoload 'TeX-auto-generate "tex" "Generate style file for TEX and store it in AUTO.\nIf TEX is a directory, generate style files for all files in the directory.\n\n(fn TEX AUTO)" t)(autoload 'TeX-auto-generate-global "tex" "Create global auto directory for global TeX macro definitions." t)(autoload 'TeX-submit-bug-report "tex" "Submit a bug report on AUCTeX via mail.\n\nDon't hesitate to report any problems or inaccurate documentation.\n\nIf you don't have setup sending mail from Emacs, please copy the\noutput buffer into your mail program, as it gives us important\ninformation about your AUCTeX version and AUCTeX configuration." t)(autoload 'TeX-install-toolbar "tex-bar" "Install toolbar buttons for TeX mode." t)(autoload 'LaTeX-install-toolbar "tex-bar" "Install toolbar buttons for LaTeX mode." t)(autoload 'TeX-fold-mode "tex-fold" "Minor mode for hiding and revealing macros and environments.\n\nCalled interactively, with no prefix argument, toggle the mode.\nWith universal prefix ARG (or if ARG is nil) turn mode on.\nWith zero or negative ARG turn mode off.\n\n(fn &optional ARG)" t)(defalias 'tex-fold-mode #'TeX-fold-mode)(autoload 'tex-font-setup "tex-font" "Setup font lock support for TeX.")(defalias 'Texinfo-mode #'texinfo-mode)(autoload 'TeX-texinfo-mode "tex-info" "Major mode in AUCTeX for editing Texinfo files.\n\nSpecial commands:\n\\{Texinfo-mode-map}\n\nEntering Texinfo mode calls the value of `text-mode-hook' and then the\nvalue of `Texinfo-mode-hook'." t)(autoload 'japanese-plain-tex-mode "tex-jp" "Major mode in AUCTeX for editing Japanese plain TeX files.\nSet `japanese-TeX-mode' to t, and enter `TeX-plain-tex-mode'." t)(autoload 'japanese-latex-mode "tex-jp" "Major mode in AUCTeX for editing Japanese LaTeX files.\nSet `japanese-TeX-mode' to t, and enter `TeX-latex-mode'." t)(require 'tex-site)(autoload 'texmathp "texmathp" "Determine if point is inside (La)TeX math mode.\nReturns t or nil.  Additional info is placed into `texmathp-why'.\nThe functions assumes that you have (almost) syntactically correct (La)TeX in\nthe buffer.\nSee the variable `texmathp-tex-commands' about which commands are checked." t)(autoload 'texmathp-match-switch "texmathp" "Search backward for any of the math switches.\nLimit searched to BOUND.\n\n(fn BOUND)")(autoload 'toolbarx-install-toolbar "toolbar-x")(autoload 'latex-preview-pane-enable "latex-preview-pane" "Enable `latex-preview-pane-mode' in `latex-mode'.")(autoload 'init-latex-preview-pane "latex-preview-pane")(autoload 'latex-preview-update "latex-preview-pane" nil t)(autoload 'latex-preview-pane-update "latex-preview-pane" nil t)(autoload 'latex-preview-pane-update-p "latex-preview-pane")(autoload 'latex-preview-pane-mode "latex-preview-pane" "Toggle Latex Preview Pane Mode.\n\n     Interactively with no argument, this command toggles the mode.\n     A positive prefix argument enables the mode, any other prefix\n     argument disables it.  From Lisp, argument omitted or nil enables\n     the mode, `toggle' toggles the state.\n     \n     When Latex Preview Pane mode is enabled, saving a latex file will cause \n     a PDF preview pane of your document to appear.\n\nThis is a minor mode.  If called interactively, toggle the\n`Latex-Preview-Pane mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `latex-preview-pane-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'adaptive-wrap-prefix-mode "adaptive-wrap" "Wrap the buffer text with adaptive filling.\n\nThis is a minor mode.  If called interactively, toggle the\n`Adaptive-Wrap-Prefix mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `adaptive-wrap-prefix-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'edit-indirect-region "edit-indirect" "Edit the region BEG..END in a separate buffer.\nThe region is copied, without text properties, to a separate\nbuffer, called edit-indirect buffer, and\n`edit-indirect-guess-mode-function' is called to set the major\nmode.\nWhen done, exit with `edit-indirect-commit', which will remove the\noriginal region and replace it with the edited version; or with\n`edit-indirect-abort', which will drop the modifications.\n\nThis differs from `clone-indirect-buffer' with narrowing in that\nthe text properties are not shared, so the parent buffer major mode\nand the edit-indirect buffer major mode will not be able to tread\non each other's toes by setting up potentially conflicting text\nproperties, which happens surprisingly often when the font-lock\nmode is used.\n\nEdit-indirect buffers use the `edit-indirect-mode-map' keymap.\nRegions with active edit-indirect buffers use the\n`edit-indirect-overlay-map' keymap.\n\nIf there's already an edit-indirect buffer for BEG..END, use that.\nIf there's already an edit-indirect buffer active overlapping any\nportion of BEG..END, an `edit-indirect-overlapping' error is\nsignaled.\n\nWhen DISPLAY-BUFFER is non-nil or when called interactively,\ndisplay the edit-indirect buffer in some window and select it.\n\nIn any case, return the edit-indirect buffer.\n\n(fn BEG END &optional DISPLAY-BUFFER)" t)(autoload 'markdown-toc-version "markdown-toc" "Markdown-toc version." t)(autoload 'markdown-toc-generate-toc "markdown-toc" "Generate a TOC for markdown file at current point.\nDeletes any previous TOC.\nIf called interactively with prefix arg REPLACE-TOC-P, replaces previous TOC.\n\n(fn &optional REPLACE-TOC-P)" t)(autoload 'markdown-toc-generate-or-refresh-toc "markdown-toc" "Generate a TOC for markdown file at current point or refreshes an already generated TOC." t)(autoload 'markdown-toc-refresh-toc "markdown-toc" "Refreshes an already generated TOC." t)(autoload 'markdown-toc-delete-toc "markdown-toc" "Deletes a previously generated TOC." t)(autoload 'markdown-toc-follow-link-at-point "markdown-toc" "On a given toc link, navigate to the current markdown header.\nIf the toc is misindented (according to markdown-toc-indentation-space`)\nor if not on a toc link, this does nothing.\n" t)(autoload 'markdown-toc-mode "markdown-toc" "Functionality for generating toc in markdown file.\n\nWith no argument, the mode is toggled on/off.\nNon-nil argument turns mode on.\nNil argument turns mode off.\n\nCommands:\n\\{markdown-toc-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Markdown-Toc mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `markdown-toc-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-pandoc-export-to-asciidoc "ox-pandoc" "Export to asciidoc.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-asciidoc-and-open "ox-pandoc" "Export to asciidoc and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-asciidoc "ox-pandoc" "Export as asciidoc.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-beamer "ox-pandoc" "Export to beamer.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-beamer-and-open "ox-pandoc" "Export to beamer and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-beamer "ox-pandoc" "Export as beamer.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-beamer-pdf "ox-pandoc" "Export to beamer-pdf.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-beamer-pdf-and-open "ox-pandoc" "Export to beamer-pdf and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-commonmark "ox-pandoc" "Export to commonmark.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-commonmark-and-open "ox-pandoc" "Export to commonmark and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-commonmark "ox-pandoc" "Export as commonmark.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-context "ox-pandoc" "Export to context.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-context-and-open "ox-pandoc" "Export to context and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-context "ox-pandoc" "Export as context.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-context-pdf "ox-pandoc" "Export to context-pdf.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-context-pdf-and-open "ox-pandoc" "Export to context-pdf and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-docbook4 "ox-pandoc" "Export to docbook4.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-docbook4-and-open "ox-pandoc" "Export to docbook4 and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-docbook4 "ox-pandoc" "Export as docbook4.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-docbook5 "ox-pandoc" "Export to docbook5.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-docbook5-and-open "ox-pandoc" "Export to docbook5 and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-docbook5 "ox-pandoc" "Export as docbook5.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-docx "ox-pandoc" "Export to docx.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-docx-and-open "ox-pandoc" "Export to docx and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-dokuwiki "ox-pandoc" "Export to dokuwiki.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-dokuwiki-and-open "ox-pandoc" "Export to dokuwiki and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-dokuwiki "ox-pandoc" "Export as dokuwiki.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-dzslides "ox-pandoc" "Export to dzslides.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-dzslides-and-open "ox-pandoc" "Export to dzslides and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-dzslides "ox-pandoc" "Export as dzslides.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-epub2 "ox-pandoc" "Export to epub2.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-epub2-and-open "ox-pandoc" "Export to epub2 and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-epub3 "ox-pandoc" "Export to epub3.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-epub3-and-open "ox-pandoc" "Export to epub3 and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-fb2 "ox-pandoc" "Export to fb2.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-fb2-and-open "ox-pandoc" "Export to fb2 and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-fb2 "ox-pandoc" "Export as fb2.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-gfm "ox-pandoc" "Export to gfm.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-gfm-and-open "ox-pandoc" "Export to gfm and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-gfm "ox-pandoc" "Export as gfm.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-haddock "ox-pandoc" "Export to haddock.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-haddock-and-open "ox-pandoc" "Export to haddock and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-haddock "ox-pandoc" "Export as haddock.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-html4 "ox-pandoc" "Export to html4.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-html4-and-open "ox-pandoc" "Export to html4 and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-html4 "ox-pandoc" "Export as html4.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-html5 "ox-pandoc" "Export to html5.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-html5-and-open "ox-pandoc" "Export to html5 and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-html5 "ox-pandoc" "Export as html5.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-html5-pdf "ox-pandoc" "Export to html5-pdf.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-html5-pdf-and-open "ox-pandoc" "Export to html5-pdf and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-icml "ox-pandoc" "Export to icml.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-icml-and-open "ox-pandoc" "Export to icml and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-icml "ox-pandoc" "Export as icml.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-jats "ox-pandoc" "Export to jats.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-jats-and-open "ox-pandoc" "Export to jats and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-jats "ox-pandoc" "Export as jats.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-jira "ox-pandoc" "Export to jira.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-jira "ox-pandoc" "Export as jira.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-json "ox-pandoc" "Export to json.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-json-and-open "ox-pandoc" "Export to json and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-json "ox-pandoc" "Export as json.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-latex "ox-pandoc" "Export to latex.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-latex-and-open "ox-pandoc" "Export to latex and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-latex "ox-pandoc" "Export as latex.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-latex-pdf "ox-pandoc" "Export to latex-pdf.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-latex-pdf-and-open "ox-pandoc" "Export to latex-pdf and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-man "ox-pandoc" "Export to man.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-man-and-open "ox-pandoc" "Export to man and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-man "ox-pandoc" "Export as man.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-markdown "ox-pandoc" "Export to markdown.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-markdown-and-open "ox-pandoc" "Export to markdown and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-markdown "ox-pandoc" "Export as markdown.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-markdown_mmd "ox-pandoc" "Export to markdown_mmd.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-markdown_mmd-and-open "ox-pandoc" "Export to markdown_mmd and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-markdown_mmd "ox-pandoc" "Export as markdown_mmd.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-markdown_phpextra "ox-pandoc" "Export to markdown_phpextra.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-markdown_phpextra-and-open "ox-pandoc" "Export to markdown_phpextra and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-markdown_phpextra "ox-pandoc" "Export as markdown_phpextra.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-markdown_strict "ox-pandoc" "Export to markdown_strict.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-markdown_strict-and-open "ox-pandoc" "Export to markdown_strict and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-markdown_strict "ox-pandoc" "Export as markdown_strict.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-mediawiki "ox-pandoc" "Export to mediawiki.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-mediawiki-and-open "ox-pandoc" "Export to mediawiki and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-mediawiki "ox-pandoc" "Export as mediawiki.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-ms "ox-pandoc" "Export to ms.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-ms-and-open "ox-pandoc" "Export to ms and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-ms "ox-pandoc" "Export as ms.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-ms-pdf "ox-pandoc" "Export to ms-pdf.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-ms-pdf-and-open "ox-pandoc" "Export to ms-pdf and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-muse "ox-pandoc" "Export to muse.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-muse-and-open "ox-pandoc" "Export to muse and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-muse "ox-pandoc" "Export as muse.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-native "ox-pandoc" "Export to native.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-native-and-open "ox-pandoc" "Export to native and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-native "ox-pandoc" "Export as native.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-odt "ox-pandoc" "Export to odt.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-odt-and-open "ox-pandoc" "Export to odt and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-opendocument "ox-pandoc" "Export to opendocument.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-opendocument-and-open "ox-pandoc" "Export to opendocument and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-opendocument "ox-pandoc" "Export as opendocument.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-opml "ox-pandoc" "Export to opml.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-opml-and-open "ox-pandoc" "Export to opml and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-opml "ox-pandoc" "Export as opml.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-org "ox-pandoc" "Export to org.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-org-and-open "ox-pandoc" "Export to org and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-org "ox-pandoc" "Export as org.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-plain "ox-pandoc" "Export to plain.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-plain-and-open "ox-pandoc" "Export to plain and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-plain "ox-pandoc" "Export as plain.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-pptx "ox-pandoc" "Export to pptx.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-pptx-and-open "ox-pandoc" "Export to pptx and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-revealjs "ox-pandoc" "Export to revealjs.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-revealjs-and-open "ox-pandoc" "Export to revealjs and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-revealjs "ox-pandoc" "Export as revealjs.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-rst "ox-pandoc" "Export to rst.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-rst-and-open "ox-pandoc" "Export to rst and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-rst "ox-pandoc" "Export as rst.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-rtf "ox-pandoc" "Export to rtf.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-rtf-and-open "ox-pandoc" "Export to rtf and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-rtf "ox-pandoc" "Export as rtf.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-s5 "ox-pandoc" "Export to s5.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-s5-and-open "ox-pandoc" "Export to s5 and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-s5 "ox-pandoc" "Export as s5.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-slideous "ox-pandoc" "Export to slideous.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-slideous-and-open "ox-pandoc" "Export to slideous and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-slideous "ox-pandoc" "Export as slideous.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-slidy "ox-pandoc" "Export to slidy.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-slidy-and-open "ox-pandoc" "Export to slidy and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-slidy "ox-pandoc" "Export as slidy.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-tei "ox-pandoc" "Export to tei.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-tei-and-open "ox-pandoc" "Export to tei and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-tei "ox-pandoc" "Export as tei.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-texinfo "ox-pandoc" "Export to texinfo.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-texinfo-and-open "ox-pandoc" "Export to texinfo and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-texinfo "ox-pandoc" "Export as texinfo.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-textile "ox-pandoc" "Export to textile.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-textile-and-open "ox-pandoc" "Export to textile and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-textile "ox-pandoc" "Export as textile.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-typst "ox-pandoc" "Export to typst.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-typst-and-open "ox-pandoc" "Export to typst and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-typst "ox-pandoc" "Export as typst.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-typst-pdf "ox-pandoc" "Export to typst-pdf.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-typst-pdf-and-open "ox-pandoc" "Export to typst-pdf and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-zimwiki "ox-pandoc" "Export to zimwiki.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-to-zimwiki-and-open "ox-pandoc" "Export to zimwiki and open.\n\n(fn &optional A S V B E)" t)(autoload 'org-pandoc-export-as-zimwiki "ox-pandoc" "Export as zimwiki.\n\n(fn &optional A S V B E)" t)(defalias 'org-babel-execute-src-block:async 'ob-async-org-babel-execute-src-block)(autoload 'ob-async-org-babel-execute-src-block "ob-async" "Like org-babel-execute-src-block, but run asynchronously.\n\nOriginal docstring for org-babel-execute-src-block:\n\nExecute the current source code block.  Insert the results of\nexecution into the buffer.  Source code execution and the\ncollection and formatting of results can be controlled through a\nvariety of header arguments.\n\nWith prefix argument ARG, force re-execution even if an existing\nresult cached in the buffer would otherwise have been returned.\n\nOptionally supply a value for INFO in the form returned by\n`org-babel-get-src-block-info'.\n\nOptionally supply a value for PARAMS which will be merged with\nthe header arguments specified at the front of the source code\nblock.\n\n(fn &optional ORIG-FUN ARG INFO PARAMS)" t)(autoload 'org-re-reveal-publish-to-reveal "org-re-reveal" "Publish an Org file to HTML.\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.  Optional BACKEND may specify a derived export\nbackend.\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR &optional BACKEND)")(autoload 'org-re-reveal-publish-to-reveal-client "org-re-reveal" "Publish an Org file to HTML as multiplex client.\nFILENAME is the filename of the Org file to be published.  PLIST\nis the property list for the given project.  PUB-DIR is the\npublishing directory.  Optional BACKEND may specify a derived export\nbackend.\nIf `org-re-reveal-client-multiplex-filter' is non-nil, use it as regular\nexpression to only publish FILENAME if it matches this regular expression.\nReturn output file name.\n\n(fn PLIST FILENAME PUB-DIR &optional BACKEND)")(autoload 'org-re-reveal-version "org-re-reveal" "Display version string for org-re-reveal from Lisp file." t)(autoload 'htmlize-buffer "htmlize" "Convert BUFFER to HTML, preserving colors and decorations.\n\nThe generated HTML is available in a new buffer, which is returned.\nWhen invoked interactively, the new buffer is selected in the current\nwindow.  The title of the generated document will be set to the buffer's\nfile name or, if that's not available, to the buffer's name.\n\nNote that htmlize doesn't fontify your buffers, it only uses the\ndecorations that are already present.  If you don't set up font-lock or\nsomething else to fontify your buffers, the resulting HTML will be\nplain.  Likewise, if you don't like the choice of colors, fix the mode\nthat created them, or simply alter the faces it uses.\n\n(fn &optional BUFFER)" t)(autoload 'htmlize-region "htmlize" "Convert the region to HTML, preserving colors and decorations.\nSee `htmlize-buffer' for details.\n\n(fn BEG END)" t)(autoload 'htmlize-file "htmlize" "Load FILE, fontify it, convert it to HTML, and save the result.\n\nContents of FILE are inserted into a temporary buffer, whose major mode\nis set with `normal-mode' as appropriate for the file type.  The buffer\nis subsequently fontified with `font-lock' and converted to HTML.  Note\nthat, unlike `htmlize-buffer', this function explicitly turns on\nfont-lock.  If a form of highlighting other than font-lock is desired,\nplease use `htmlize-buffer' directly on buffers so highlighted.\n\nBuffers currently visiting FILE are unaffected by this function.  The\nfunction does not change current buffer or move the point.\n\nIf TARGET is specified and names a directory, the resulting file will be\nsaved there instead of to FILE's directory.  If TARGET is specified and\ndoes not name a directory, it will be used as output file name.\n\n(fn FILE &optional TARGET)" t)(autoload 'htmlize-many-files "htmlize" "Convert FILES to HTML and save the corresponding HTML versions.\n\nFILES should be a list of file names to convert.  This function calls\n`htmlize-file' on each file; see that function for details.  When\ninvoked interactively, you are prompted for a list of files to convert,\nterminated with RET.\n\nIf TARGET-DIRECTORY is specified, the HTML files will be saved to that\ndirectory.  Normally, each HTML file is saved to the directory of the\ncorresponding source file.\n\n(fn FILES &optional TARGET-DIRECTORY)" t)(autoload 'htmlize-many-files-dired "htmlize" "HTMLize dired-marked files.\n\n(fn ARG &optional TARGET-DIRECTORY)" t)(autoload 'org-tree-slide-mode "org-tree-slide" "A presentation tool for Org Mode.\n\nUsage:\n  - Set minimal recommendation settings in .emacs\n    (global-set-key (kbd \"<f8>\") ='org-tree-slide-mode)\n    (global-set-key (kbd \"S-<f8>\") ='org-tree-slide-skip-done-toggle)\n  - Open an org file\n  - Type <f8> to start org-tree-slide-mode\n  - Type C-< / C-> to move between trees\n  - To exit this minor mode, just type <f8> again.\n\nProfiles:\n\n  - [ Simple ]\n => \\[command] `org-tree-slide-simple-profile'\n\n    1. No header display\n    2. No slide-in effect\n    3. The cursor will move to the head of buffer when exit\n    4. No slide number display in mode line\n    5. Display every type of tree\n\n  - [ Presentation ]\n => \\[command] `org-tree-slide-presentation-profile'\n\n    1. Display header\n    2. Enable slide-in effect\n    3. The cursor will move to the head of buffer when exit\n    4. Display slide number in mode line\n    5. Display every type of tree\n\n  - [ TODO Pursuit with narrowing ]\n => \\[command] `org-tree-slide-narrowing-control-profile'\n\n    1. No header display\n    2. No slide-in effect\n    3. The cursor will keep the same position when exit\n    4. Display slide number in mode line\n    5. Display TODO trees only\n\nThis is a minor mode.  If called interactively, toggle the\n`Org-Tree-Slide mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `org-tree-slide-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-tree-slide-play-with-timer "org-tree-slide" "Start slideshow with setting a count down timer." t)(autoload 'org-tree-slide-without-init-play "org-tree-slide" "Start slideshow without the init play.  Just enter \"org-tree-slide-mode\"." t)(autoload 'org-tree-slide-content "org-tree-slide" "Change the display for viewing content of the org file." t)(autoload 'org-tree-slide-move-next-tree "org-tree-slide" "Display the next slide." t)(autoload 'org-tree-slide-move-previous-tree "org-tree-slide" "Display the previous slide." t)(autoload 'org-tree-slide-simple-profile "org-tree-slide" "Set variables for simple use.\n\n  `org-tree-slide-header'            => nil\n  `org-tree-slide-slide-in-effect'   => nil\n  `org-tree-slide-heading-emphasis'  => nil\n  `org-tree-slide-cursor-init'       => t\n  `org-tree-slide-modeline-display'  => nil\n  `org-tree-slide-skip-done'         => nil\n  `org-tree-slide-skip-comments'     => t" t)(autoload 'org-tree-slide-presentation-profile "org-tree-slide" "Set variables for presentation use.\n\n  `org-tree-slide-header'            => t\n  `org-tree-slide-slide-in-effect'   => t\n  `org-tree-slide-heading-emphasis'  => nil\n  `org-tree-slide-cursor-init'       => t\n  `org-tree-slide-modeline-display'  => ='outside\n  `org-tree-slide-skip-done'         => nil\n  `org-tree-slide-skip-comments'     => t" t)(autoload 'org-tree-slide-narrowing-control-profile "org-tree-slide" "Set variables for TODO pursuit with narrowing.\n\n  `org-tree-slide-header'            => nil\n  `org-tree-slide-slide-in-effect'   => nil\n  `org-tree-slide-heading-emphasis'  => nil\n  `org-tree-slide-cursor-init'       => nil\n  `org-tree-slide-modeline-display'  => ='lighter\n  `org-tree-slide-skip-done'         => t\n  `org-tree-slide-skip-comments'     => t" t)(autoload 'org-tree-slide-display-header-toggle "org-tree-slide" "Toggle displaying the slide header." t)(autoload 'org-tree-slide-slide-in-effect-toggle "org-tree-slide" "Toggle using slide-in effect." t)(autoload 'org-tree-slide-heading-emphasis-toggle "org-tree-slide" "Toggle applying emphasis to heading." t)(autoload 'org-tree-slide-skip-done-toggle "org-tree-slide" "Toggle show TODO item only or not." t)(autoload 'org-tree-slide-skip-comments-toggle "org-tree-slide" "Toggle show COMMENT item or not.\nIf `org-tree-slide-skip-comments' is specified as `inherit',\nthen toggle between `inherit' and nil.  Otherwise, between t and nil.\nSee also `org-tree-slide-skip-comments'." t)(autoload 'centered-window-mode-toggle "centered-window")(defvar centered-window-mode nil "Non-nil if Centered-Window mode is enabled.\nSee the `centered-window-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `centered-window-mode'.")(autoload 'centered-window-mode "centered-window" "Minor mode to center text on the current buffer\n\nThis is a global minor mode.  If called interactively, toggle the\n`Centered-Window mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='centered-window-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'gnuplot-mode "gnuplot-mode" "Major mode for editing gnuplot files\n\n(fn)" t)(dolist (pattern '("\\.gnuplot\\'" "\\.gp\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gnuplot-mode)))(autoload 'gnuplot-compile "gnuplot-mode" "Runs gnuplot -persist as a synchronous process and passes the\ncurrent buffer to it.  Buffer must be visiting a file for it to\nwork." t)(autoload 'gnuplot-run-region "gnuplot-mode" "Send region to gnuplot, ensuring a final newline.  Doesn't\nrequire buffer to be visiting a file.\n\n(fn START END)" t)(autoload 'gnuplot-run-buffer "gnuplot-mode" "Send buffer to gnuplot, ensuring a final newline.  Doesn't\nrequire buffer to be visiting a file." t)(autoload 'gnuplot-mode "gnuplot" "Major mode for editing and executing GNUPLOT scripts.\nThis was written with version 4.6 of gnuplot in mind, but should\nwork with newer and older versions.\n\nReport bugs at https://github.com/emacsorphanage/gnuplot/issues\n\n                            ------O------\n\nGnuplot-mode includes two different systems for keyword\ncompletion and documentation lookup: a newer one,\n`gnuplot-context-sensitive-mode' (enabled by default), and a\nolder one which extracts keywords from gnuplot's Info file.  Both\nsystems allow looking up documentation in the Info file.  The\nolder system also depends having the info file properly installed\nto make a list of keywords.\n\nThe info file should be installed by default with the Gnuplot\ndistribution, or is available at the `gnuplot-mode' web page:\nhttps://github.com/emacsorphanage/gnuplot/\n\nWith the new context-sensitive mode active, gnuplot-mode can also\nprovide function/`eldoc-mode' syntax hints as you type.  This requires a\nseparate file of strings, `gnuplot-eldoc.el', which is also\nprovided by recent Gnuplot distributions.\n\n                            ------O------\n\nThere are several known shortcomings of `gnuplot-mode', version 0.5g\nand up.  Many of the shortcomings involve the graphical interface\n(refered to as the GUI) to setting arguments to plot options.  Here is\na list:\n\n 1.  Currently there is no way for `gnuplot-mode' to know if information\n     sent to gnuplot was correctly plotted.\n 2.  \"plot\", \"splot\", and \"fit\" are handled in the GUI, but are\n     a bit flaky.  Their arguments may not be read correctly from\n     existing text, and continuation lines (common for plot and splot)\n     are not supported.\n 3.  The GUI does not know how to read from continuation lines.\n 4.  Comma separated position arguments to plot options are\n     unsupported in the GUI.  Colon separated datafile modifiers (used\n     for plot, splot, and fit) are not supported either.  Arguments\n     not yet supported by the GUI generate messages printed in grey\n     text.\n 5.  The GUI handling of \"hidden3d\" is flaky and \"cntrparam\" is\n     unsupported.\n\n                            ------O------\n\n Key bindings:\n \\{gnuplot-mode-map}" t)(autoload 'gnuplot-make-buffer "gnuplot" "Open a new buffer in `gnuplot-mode'.\nWhen invoked, it switches to a new, empty buffer visiting no file\nand then starts `gnuplot-mode'.\n\nIt is convenient to bind this function to a global key sequence.  For\nexample, to make the F10 key open a gnuplot script buffer, put the\nfollowing in your .emacs file:\n     (autoload 'gnuplot-make-buffer \"gnuplot\"\n               \"open a buffer in gnuplot mode\" t)\n     (global-set-key [(f10)] 'gnuplot-make-buffer)" t)(autoload 'run-gnuplot "gnuplot" "Run an inferior Gnuplot process." t)(with-eval-after-load "org" (org-link-set-parameters "orgit-topic" :store #'orgit-topic-store :follow #'orgit-topic-open :export #'orgit-topic-export :complete #'orgit-topic-complete-link :insert-description #'orgit-topic-describe-link))(autoload 'orgit-topic-store "orgit-forge" "Store a link to a Forge-Topic mode buffer.\n\nWhen the region selects a topic, then store a link to the\nForge-Topic mode buffer for that topic.")(autoload 'orgit-topic-open "orgit-forge" "\n\n(fn ID)")(autoload 'orgit-topic-export "orgit-forge" "\n\n(fn ID DESC FORMAT)")(autoload 'orgit-topic-complete-link "orgit-forge" "\n\n(fn &optional ARG)")(autoload 'orgit-topic-describe-link "orgit-forge" "\n\n(fn LINK DEFAULT)")(with-eval-after-load 'magit (keymap-set magit-mode-map "<remap> <org-store-link>" #'orgit-store-link))(autoload 'orgit-store-link "orgit" "Like `org-store-link' but store links to all selected commits, if any.\n\n(fn ARG)" t)(with-eval-after-load 'org (with-eval-after-load 'magit (org-link-set-parameters "orgit" :store #'orgit-status-store :follow #'orgit-status-open :export #'orgit-status-export :complete #'orgit-status-complete-link)))(autoload 'orgit-status-store "orgit" "Store a link to a Magit-Status mode buffer.\nWhen the region selects one or more commits, then do nothing.\nIn that case `orgit-rev-store' stores one or more links instead.")(autoload 'orgit-status-open "orgit" "\n\n(fn REPO)")(autoload 'orgit-status-export "orgit" "\n\n(fn PATH DESC FORMAT)")(autoload 'orgit-status-complete-link "orgit" "\n\n(fn &optional ARG)")(with-eval-after-load 'org (with-eval-after-load 'magit (org-link-set-parameters "orgit-log" :store #'orgit-log-store :follow #'orgit-log-open :export #'orgit-log-export :complete #'orgit-log-complete-link)))(autoload 'orgit-log-store "orgit" "Store a link to a Magit-Log mode buffer.\nWhen the region selects one or more commits, then do nothing.\nIn that case `orgit-rev-store' stores one or more links instead.")(autoload 'orgit-log-open "orgit" "\n\n(fn PATH)")(autoload 'orgit-log-export "orgit" "\n\n(fn PATH DESC FORMAT)")(autoload 'orgit-log-complete-link "orgit" "\n\n(fn &optional ARG)")(with-eval-after-load 'org (with-eval-after-load 'magit (org-link-set-parameters "orgit-rev" :store #'orgit-rev-store :follow #'orgit-rev-open :export #'orgit-rev-export :complete #'orgit-rev-complete-link)))(autoload 'orgit-rev-store "orgit" "Store a link to a Magit-Revision mode buffer.\n\nBy default store an abbreviated revision hash.\n\n\\<global-map>With a single \\[universal-argument] prefix argument instead store the name of a tag\nor branch that points at the revision, if any.  The meaning of this\nprefix argument is reversed if `orgit-store-reference' is non-nil.\n\nWith a single \\[negative-argument] negative prefix argument store revision using the\nform \":/TEXT\", which is described in the gitrevisions(7) manpage.\n\nWhen more than one prefix argument is used, then `org-store-link'\nstores a link itself, without calling this function.\n\nWhen the region selects one or more commits, e.g., in a log, then\nstore links to the Magit-Revision mode buffers for these commits.")(autoload 'orgit-rev-open "orgit" "\n\n(fn PATH)")(autoload 'orgit-rev-export "orgit" "\n\n(fn PATH DESC FORMAT)")(autoload 'orgit-rev-complete-link "orgit" "\n\n(fn &optional ARG)")(autoload 'org-mac-link-get-link "org-mac-link" "Prompt for an application to grab a link from.\nWhen done, go grab the link, and insert it at point. If a region\nis active, that will be the link's description.\n\n(fn &optional BEG END)" t)(autoload 'org-mac-link-firefox-get-frontmost-url "org-mac-link" "Get the link to the frontmost window of the Firefox.app." t)(autoload 'org-mac-link-firefox-insert-frontmost-url "org-mac-link" "Insert the link to the frontmost window of the Firefox.app." t)(autoload 'org-mac-link-vimperator-get-frontmost-url "org-mac-link" "Get the link to the frontmost window of the Firefox.app with Vimperator." t)(autoload 'org-mac-link-vimperator-insert-frontmost-url "org-mac-link" "Insert the link to the frontmost window of the Firefox.app with Vimperator." t)(autoload 'org-mac-link-chrome-get-frontmost-url "org-mac-link" "Get the link to the frontmost window of the Chrome.app." t)(autoload 'org-mac-link-chrome-insert-frontmost-url "org-mac-link" "Insert the link to the frontmost window of the Chrome.app." t)(autoload 'org-mac-link-chromium-get-frontmost-url "org-mac-link" "Get the link to the frontmost window of the Chromium.app." t)(autoload 'org-mac-link-chromium-insert-frontmost-url "org-mac-link" "Insert the link to the frontmost window of the Chromium.app." t)(autoload 'org-mac-link-brave-get-frontmost-url "org-mac-link" "Get the link to the frontmost window of the Brave.app." t)(autoload 'org-mac-link-brave-insert-frontmost-url "org-mac-link" "Insert the link to the frontmost window of the Brave.app." t)(autoload 'org-mac-link-safari-get-frontmost-url "org-mac-link" "Get the link to the frontmost window of the Safari.app." t)(autoload 'org-mac-link-safari-insert-frontmost-url "org-mac-link" "Insert the link to the frontmost window of the Safari.app." t)(autoload 'org-mac-link-together-get-selected "org-mac-link" "Get the links to selected items in the Together.app." t)(autoload 'org-mac-link-together-insert-selected "org-mac-link" "Insert the links to selected items in the Together.app." t)(autoload 'org-mac-link-finder-item-get-selected "org-mac-link" "Get the links to selected items in the Finder.app." t)(autoload 'org-mac-link-finder-insert-selected "org-mac-link" "Insert the links to selected items in the Finder.app." t)(autoload 'org-mac-link-addressbook-item-get-selected "org-mac-link" "Get the links to selected items in the addressbook." t)(autoload 'org-mac-link-addressbook-item-insert-selected "org-mac-link" "Insert the links to selected items in the addressbook." t)(autoload 'org-mac-link-skim-get-page "org-mac-link" "Get the link to the page in the Skim.app." t)(autoload 'org-mac-link-skim-insert-page "org-mac-link" "Insert the link to the page in the Skim.app." t)(autoload 'org-mac-link-acrobat-get-page "org-mac-link" "Get the link to the page in the Adobe Acrobat Pro.app." t)(autoload 'org-mac-link-acrobat-insert-page "org-mac-link" "Insert the link to the page in the Adobe Acrobat Pro.app." t)(autoload 'org-mac-link-outlook-message-get-links "org-mac-link" "Create links to selected or flagged messages in Microsoft Outlook.app.\nThis will use AppleScript to get the message-id and the subject of the\nmessages in Microsoft Outlook.app and make a link out of it.\nWhen SELECT-OR-FLAG is \"s\", get the selected messages (this is also\nthe default).  When SELECT-OR-FLAG is \"f\", get the flagged messages.\nThe Org-syntax text will be pushed to the kill ring, and also returned.\n\n(fn &optional SELECT-OR-FLAG)" t)(autoload 'org-mac-link-outlook-message-insert-selected "org-mac-link" "Insert a link to the messages currently selected in Microsoft Outlook.app.\nThis will use AppleScript to get the message-id and the subject\nof the active mail in Microsoft Outlook.app and make a link out of it." t)(autoload 'org-mac-link-outlook-message-insert-flagged "org-mac-link" "Asks for an ORG-BUFFER and a heading within it, and replace message links.\nIf ORG-HEADING exists, delete all mac-outlook:// links in heading's first level.\nIf heading doesn't exist, create it at point-max.\nInsert list of mac-outlook:// links to flagged mail after heading.\n\n(fn ORG-BUFFER ORG-HEADING)" t)(autoload 'org-mac-link-evernote-note-insert-selected "org-mac-link" "Insert a link to the notes currently selected in Evernote.app.\nThis will use AppleScript to get the note id and the title of the\nnote(s) in Evernote.app and make a link out of it/them." t)(autoload 'org-mac-link-devonthink-item-insert-selected "org-mac-link" "Insert a link to the item(s) currently selected in DEVONthink*.app.\nThis will use AppleScript to get the `uuid'(s) and the name(s) of the\nselected items in DEVONthink*.app and make link(s) out of it/them." t)(autoload 'org-mac-link-mail-get-links "org-mac-link" "Create links to the messages currently selected or flagged in Mail.app.\nThis will use AppleScript to get the message-id and the subject of the\nmessages in Mail.app and make a link out of it.\nWhen SELECT-OR-FLAG is \"s\", get the selected messages (this is also\nthe default).  When SELECT-OR-FLAG is \"f\", get the flagged messages.\nThe Org-syntax text will be pushed to the kill ring, and also returned.\n\n(fn &optional SELECT-OR-FLAG)" t)(autoload 'org-mac-link-mail-insert-selected "org-mac-link" "Insert a link to the messages currently selected in Mail.app.\nThis will use AppleScript to get the message-id and the subject of the\nactive mail in Mail.app and make a link out of it." t)(autoload 'org-mac-link-mail-insert-flagged "org-mac-link" "Asks for an ORG-BUFFER and a heading within it, and replace message links.\nIf ORG-HEADING exists, delete all message:// links within heading's first level.\nIf heading doesn't exist, create it at point-max.\nInsert list of message:// links to flagged mail after heading.\n\n(fn ORG-BUFFER ORG-HEADING)" t)(autoload 'org-mac-link-qutebrowser-get-frontmost-url "org-mac-link" "Get the link to the frontmost window of the qutebrowser.app." t)(autoload 'org-mac-link-qutebrowser-insert-frontmost-url "org-mac-link" "Insert the link to the frontmost window of the qutebrowser.app." t)(autoload 'org-cliplink-retrieve-title "org-cliplink" "\n\n(fn URL TITLE-CALLBACK)")(autoload 'org-cliplink-insert-transformed-title "org-cliplink" "Takes the URL, asynchronously retrieves the title and applies\na custom TRANSFORMER which transforms the url and title and insert\nthe required text to the current buffer.\n\n(fn URL TRANSFORMER)")(autoload 'org-cliplink-retrieve-title-synchronously "org-cliplink" "\n\n(fn URL)")(autoload 'org-cliplink "org-cliplink" "Takes a URL from the clipboard and inserts an org-mode link\nwith the title of a page found by the URL into the current\nbuffer" t)(autoload 'org-cliplink-capture "org-cliplink" "org-cliplink version for org-capture templates.\nMakes synchronous request. Returns the link instead of inserting\nit to the current buffer. Doesn't support Basic Auth. Doesn't\nsupport cURL transport." t)(autoload 'toc-org-enable "toc-org" "Enable toc-org in this buffer.")(autoload 'toc-org-mode "toc-org" "Toggle `toc-org' in this buffer.\n\nThis is a minor mode.  If called interactively, toggle the\n`Toc-Org mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `toc-org-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'ox-clip-formatted-copy "ox-clip" "Export the selected region to HTML and copy it to the clipboard.\nR1 and R2 define the selected region.\n\n(fn R1 R2)" t)(autoload 'ox-clip-image-to-clipboard "ox-clip" "Copy the image file or latex fragment at point to the clipboard as an image.\nSCALE is a numerical\nprefix (default=`ox-clip-default-latex-scale') that determines\nthe size of the latex image. It has no effect on other kinds of\nimages. Currently only works on Linux.\n\n(fn &optional SCALE)" t)(autoload 'org-annotate-file "org-annotate-file" "Visit `org-annotate-file-storage-file` and add a new annotation section.\nThe annotation is opened at the new section which will be referencing\nthe point in the current file." t)(autoload 'org-annotate-file-show-section "org-annotate-file" "Add or show annotation entry in STORAGE-FILE and return the buffer.\nThe annotation will link to ANNOTATED-BUFFER if specified,\n  otherwise the current buffer is used.\n\n(fn STORAGE-FILE &optional ANNOTATED-BUFFER)")(autoload 'org-eldoc-load "org-eldoc" "Set up org-eldoc documentation function." t)(autoload 'org-registry-show "org-registry" "Show Org files where there are links pointing to the current\nbuffer.\n\n(fn &optional VISIT)" t)(autoload 'org-registry-visit "org-registry" "If an Org file contains a link to the current location, visit\nthis file." t)(autoload 'org-registry-initialize "org-registry" "Initialize `org-registry-alist'.\nIf FROM-SCRATCH is non-nil or the registry does not exist yet,\ncreate a new registry from scratch and eval it. If the registry\nexists, eval `org-registry-file' and make it the new value for\n`org-registry-alist'.\n\n(fn &optional FROM-SCRATCH)" t)(autoload 'org-registry-insinuate "org-registry" "Call `org-registry-update' after saving in Org-mode.\nUse with caution.  This could slow down things a bit." t)(autoload 'org-registry-update "org-registry" "Update the registry for the current Org file." t)(autoload 'org-screenshot-take "org-screenshot" "Take a screenshot and insert link to it at point, if image\ndisplay is already on (see \\[org-toggle-inline-images])\nscreenshot will be displayed as an image\n\nScreen area for the screenshot is selected with the mouse, left\nclick on a window screenshots that window, while left click and\ndrag selects a region. Pressing any key cancels the screen shot\n\nWith `C-u' universal argument waits one second after target is\nselected before taking the screenshot. With double `C-u' wait two\nseconds.\n\nWith triple `C-u' wait 3 seconds, and also rings the bell when\nscreenshot is done, any more `C-u' after that increases delay by\n2 seconds\n\n(fn &optional DELAY)" t)(autoload 'org-screenshot-rotate-prev "org-screenshot" "Rotate last screenshot with one of the previously taken\nscreenshots from the same directory. If DIR is negative, rotate\nin the other direction\n\n(fn DIR)" t)(autoload 'org-screenshot-rotate-next "org-screenshot" "Rotate last screenshot with one of the previously taken\nscreenshots from the same directory. If DIR is negative, rotate\nin the other direction\n\n(fn DIR)" t)(autoload 'org-screenshot-show-unused "org-screenshot" "Open A Dired buffer with unused screenshots marked" t)(autoload 'org-toc-show "org-toc" "Show the table of contents of the current Org-mode buffer.\n\n(fn &optional DEPTH POSITION)" t)(autoload 'org-freemind-export-to-freemind "ox-freemind" "Export current buffer to a Freemind Mindmap file.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nWhen optional argument BODY-ONLY is non-nil, only write code\nbetween \"<body>\" and \"</body>\" tags.\n\nEXT-PLIST, when provided, is a property list with external\nparameters overriding Org default settings, but still inferior to\nfile-local settings.\n\nReturn output file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)(autoload 'org-taskjuggler-export "ox-taskjuggler" "Export current buffer to a TaskJuggler file.\n\nThe exporter looks for a tree with tag that matches\n`org-taskjuggler-project-tag' and takes this as the tasks for\nthis project.  The first node of this tree defines the project\nproperties such as project name and project period.\n\nIf there is a tree with tag that matches\n`org-taskjuggler-resource-tag' this tree is taken as resources\nfor the project.  If no resources are specified, a default\nresource is created and allocated to the project.\n\nAlso the TaskJuggler project will be created with default reports\nas defined in `org-taskjuggler-default-reports'.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nA non-nil optional argument ASYNC means the process should happen\nasynchronously.  The resulting file should be accessible through\nthe `org-export-stack' interface.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nReturn output file's name.\n\n(fn &optional ASYNC SUBTREEP VISIBLE-ONLY)" t)(autoload 'org-taskjuggler-export-and-process "ox-taskjuggler" "Export current buffer to a TaskJuggler file and process it.\n\nThe exporter looks for a tree with tag that matches\n`org-taskjuggler-project-tag' and takes this as the tasks for\nthis project.  The first node of this tree defines the project\nproperties such as project name and project period.\n\nIf there is a tree with tag that matches\n`org-taskjuggler-resource-tag' this tree is taken as resources\nfor the project.  If no resources are specified, a default\nresource is created and allocated to the project.\n\nAlso the TaskJuggler project will be created with default reports\nas defined in `org-taskjuggler-default-reports'.\n\nIf narrowing is active in the current buffer, only export its\nnarrowed part.\n\nIf a region is active, export that region.\n\nWhen optional argument SUBTREEP is non-nil, export the sub-tree\nat point, extracting information from the headline properties\nfirst.\n\nWhen optional argument VISIBLE-ONLY is non-nil, don't export\ncontents of hidden elements.\n\nReturn a list of reports.\n\n(fn &optional SUBTREEP VISIBLE-ONLY)" t)(autoload 'org-taskjuggler-export-process-and-open "ox-taskjuggler" "Export current buffer to a TaskJuggler file, process and open it.\n\nExport and process the file using\n`org-taskjuggler-export-and-process' and open the generated\nreports with a browser.\n\nIf you are targeting TaskJuggler 2.4 (see\n`org-taskjuggler-target-version') the processing and display of\nthe reports is done using the TaskJuggler GUI.\n\n(fn &optional SUBTREEP VISIBLE-ONLY)" t)(autoload 'flycheck-plantuml-setup "flycheck-plantuml" "Setup flycheck-plantuml.\n\nAdd `plantuml' to `flycheck-checkers'." t)(autoload 'plantuml-mode "plantuml-mode" "Major mode for plantuml.\n\nShortcuts             Command Name\n\\[plantuml-complete-symbol]      `plantuml-complete-symbol'\n\n(fn)" t)(autoload 'py-isort-region "py-isort" "Uses the \"isort\" tool to reformat the current region." t)(autoload 'py-isort-buffer "py-isort" "Uses the \"isort\" tool to reformat the current buffer." t)(autoload 'py-isort-before-save "py-isort" nil t)(autoload 'pyimport-insert-missing "pyimport" "Try to insert an import for the symbol at point.\nIf called with a prefix, choose which import to use.\n\nThis is a simple heuristic: we just look for imports in all open Python buffers.\n\n(fn PREFIX)" t)(autoload 'pyimport-remove-unused "pyimport" "Remove unused imports in the current Python buffer." t)(autoload 'shut-up "shut-up" "Evaluate BODY with silenced output.\n\nWhile BODY is evaluated, all output is redirected to a buffer,\nunless `shut-up-ignore' is non-nil.  This affects:\n\n- `message'\n- All functions using `standard-output' (e.g. `print', `princ', etc.)\n\nInside BODY, the buffer is bound to the lexical variable\n`shut-up-sink'.  Additionally provide a lexical function\n`shut-up-current-output', which returns the current contents of\n`shut-up-sink' when called with no arguments.\n\nChanges to the variable `shut-up-ignore' inside BODY does not\nhave any affect.\n\n(fn &rest BODY)" nil t)(function-put 'shut-up 'lisp-indent-function 0)(autoload 'shut-up-silence-emacs "shut-up" "Silence Emacs.\n\nChange Emacs settings to reduce the output.\n\nWARNING: This function has GLOBAL SIDE-EFFECTS.  You should only\ncall this function in `noninteractive' sessions.")(autoload 'python-pytest-dispatch "python-pytest" nil t)(autoload 'python-pytest "python-pytest" "Run pytest with ARGS.\n\nWith a prefix argument, allow editing.\n\n(fn &optional ARGS)" t)(autoload 'python-pytest-file "python-pytest" "Run pytest on FILE, using ARGS.\n\nAdditional ARGS are passed along to pytest.\nWith a prefix argument, allow editing.\n\n(fn FILE &optional ARGS)" t)(autoload 'python-pytest-file-dwim "python-pytest" "Run pytest on FILE, intelligently finding associated test modules.\n\nWhen run interactively, this tries to work sensibly using\nthe current file.\n\nAdditional ARGS are passed along to pytest.\nWith a prefix argument, allow editing.\n\n(fn FILE &optional ARGS)" t)(autoload 'python-pytest-files "python-pytest" "Run pytest on FILES, using ARGS.\n\nWhen run interactively, this allows for interactive file selection.\n\nAdditional ARGS are passed along to pytest.\nWith a prefix argument, allow editing.\n\n(fn FILES &optional ARGS)" t)(autoload 'python-pytest-directories "python-pytest" "Run pytest on DIRECTORIES, using ARGS.\n\nWhen run interactively, this allows for interactive directory selection.\n\nAdditional ARGS are passed along to pytest.\nWith a prefix argument, allow editing.\n\n(fn DIRECTORIES &optional ARGS)" t)(autoload 'python-pytest-function "python-pytest" "Run pytest on FILE with FUNC (or class).\n\nAdditional ARGS are passed along to pytest.\nWith a prefix argument, allow editing.\n\n(fn FILE FUNC ARGS)" t)(autoload 'python-pytest-function-dwim "python-pytest" "Run pytest on FILE with FUNC (or class).\n\nWhen run interactively, this tries to work sensibly using\nthe current file and function around point.\n\nAdditional ARGS are passed along to pytest.\nWith a prefix argument, allow editing.\n\n(fn FILE FUNC ARGS)" t)(autoload 'python-pytest-last-failed "python-pytest" "Run pytest, only executing previous test failures.\n\nAdditional ARGS are passed along to pytest.\nWith a prefix argument, allow editing.\n\n(fn &optional ARGS)" t)(autoload 'python-pytest-repeat "python-pytest" "Run pytest with the same argument as the most recent invocation.\n\nWith a prefix ARG, allow editing." t)(autoload 'pyvenv-activate "pyvenv" "Activate the virtual environment in DIRECTORY.\n\n(fn DIRECTORY)" t)(autoload 'pyvenv-deactivate "pyvenv" "Deactivate any current virtual environment." t)(autoload 'pyvenv-workon "pyvenv" "Activate a virtual environment from $WORKON_HOME.\n\nIf the virtual environment NAME is already active, this function\ndoes not try to reactivate the environment.\n\n(fn NAME)" t)(defvar pyvenv-mode nil "Non-nil if Pyvenv mode is enabled.\nSee the `pyvenv-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `pyvenv-mode'.")(autoload 'pyvenv-mode "pyvenv" "Global minor mode for pyvenv.\n\nWill show the current virtualenv in the mode line, and respect a\n`pyvenv-workon' setting in files.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Pyvenv mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='pyvenv-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar pyvenv-tracking-mode nil "Non-nil if Pyvenv-Tracking mode is enabled.\nSee the `pyvenv-tracking-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `pyvenv-tracking-mode'.")(autoload 'pyvenv-tracking-mode "pyvenv" "Global minor mode to track the current virtualenv.\n\nWhen this mode is active, pyvenv will activate a buffer-specific\nvirtualenv whenever the user switches to a buffer with a\nbuffer-local `pyvenv-workon' or `pyvenv-activate' variable.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Pyvenv-Tracking mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='pyvenv-tracking-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pyvenv-restart-python "pyvenv" "Restart Python inferior processes." t)(autoload 'pipenv-mode "pipenv" "Minor mode for Pipenv.\n\nThis is a minor mode.  If called interactively, toggle the\n`Pipenv mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pipenv-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'load-env-vars "load-env-vars" "Load environment variables found in FILE-PATH.\n\n(fn FILE-PATH)" t)(autoload 'company-anaconda "company-anaconda" "Anaconda backend for company-mode.\nSee `company-backends' for more info about COMMAND and ARG.\n\n(fn COMMAND &optional ARG &rest ARGS)" t)(autoload 'anaconda-mode "anaconda-mode" "Code navigation, documentation lookup and completion for Python.\n\n\\{anaconda-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Anaconda mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `anaconda-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'anaconda-eldoc-mode "anaconda-mode" "Toggle echo area display of Python objects at point.\n\nThis is a minor mode.  If called interactively, toggle the\n`Anaconda-Eldoc mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `anaconda-eldoc-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pythonic-activate "pythonic" "Activate python VIRTUALENV.\n\n(fn VIRTUALENV)" t)(autoload 'pythonic-deactivate "pythonic" "Deactivate python virtual environment." t)(autoload 'pip-requirements-auto-complete-setup "pip-requirements" "Setup Auto-Complete for Pip Requirements.\n\nSee URL `https://github.com/auto-complete/auto-complete' for\ninformation about Auto Complete.")(autoload 'pip-requirements-mode "pip-requirements" "Major mode for editing pip requirements files.\n\n(fn)" t)(autoload 'fish_indent-before-save "fish-mode" nil t)(autoload 'fish-mode "fish-mode" "Major mode for editing fish shell files.\n\n(fn)" t)(autoload 'company-shell-rebuild-cache "company-shell" "Builds the cache of all completions found on the $PATH and all fish functions." t)(autoload 'company-fish-shell "company-shell" "Company backend for fish shell functions.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-shell "company-shell" "Company mode backend for binaries found on the $PATH.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-shell-env "company-shell" "Company backend for environment variables.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'rainbow-mode "rainbow-mode" "Colorize strings that represent colors.\n\nThis will fontify with colors the string like \"#aabbcc\" or \"blue\".\n\nThis is a minor mode.  If called interactively, toggle the\n`Rainbow mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `rainbow-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'sws-mode "sws-mode" "Major mode for editing significant whitespace files\n\n(fn)" t)(autoload 'stylus-mode "stylus-mode" "Major mode for editing stylus node.js templates\n\n(fn)" t)(autoload 'sass-mode "sass-mode" "Major mode for editing Sass files.\n\n\\{sass-mode-map}\n\n(fn)" t)(autoload 'haml-mode "haml-mode" "Major mode for editing Haml files.\n\n\\{haml-mode-map}\n\n(fn)" t)(autoload 'company-web-html "company-web-html" "`company-mode' completion back-end for `html-mode' and `web-mode'.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-web-jade "company-web-jade" "`company-mode' completion back-end for `jade-mode'.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'company-web-slim "company-web-slim" "`company-mode' completion back-end for `slim-mode'.\n\n(fn COMMAND &optional ARG &rest IGNORED)" t)(autoload 'web-mode "web-mode" "Major mode for editing web templates.\n\n(fn)" t)(autoload 'slim-mode "slim-mode" "Major mode for editing Slim files.\n\n\\{slim-mode-map}\n\n(fn)" t)(autoload 'pug-mode "pug-mode" "Major mode for editing Pug files.\n\n\\{pug-mode-map}\n\n(fn)" t)(autoload 'pug-compile "pug-mode" "Compile the current pug file into html, using pug-cli.\n\nIf the universal argument is supplied, render pretty HTML (non-compressed).\n\n(fn &optional ARG)" t)(autoload 'emmet-expand-line "emmet-mode" "Replace the current line's emmet expression with the corresponding expansion.\nIf prefix ARG is given or region is visible call `emmet-preview' to start an\ninteractive preview.\n\nOtherwise expand line directly.\n\nFor more information see `emmet-mode'.\n\n(fn ARG)" t)(autoload 'emmet-mode "emmet-mode" "Minor mode for writing HTML and CSS markup.\n\nWith emmet for HTML and CSS you can write a line like\n\n  ul#name>li.item*2\n\nand have it expanded to\n\n  <ul id=\"name\">\n    <li class=\"item\"></li>\n    <li class=\"item\"></li>\n  </ul>\n\nThis minor mode defines keys for quick access:\n\n\\{emmet-mode-keymap}\n\nHome page URL `http://www.emacswiki.org/emacs/Emmet'.\n\nSee also `emmet-expand-line'.\n\nThis is a minor mode.  If called interactively, toggle the `Emmet\nmode' mode.  If the prefix argument is positive, enable the mode,\nand if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `emmet-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'emmet-expand-yas "emmet-mode" nil t)(autoload 'emmet-preview "emmet-mode" "Expand emmet between BEG and END interactively.\nThis will show a preview of the expanded emmet code and you can\naccept it or skip it.\n\n(fn BEG END)" t)(autoload 'emmet-wrap-with-markup "emmet-mode" "Wrap region with markup.\n\n(fn WRAP-WITH)" t)(autoload 'emmet-next-edit-point "emmet-mode" "\n\n(fn COUNT)" t)(autoload 'emmet-prev-edit-point "emmet-mode" "\n\n(fn COUNT)" t)(let ((loads (get 'yaml 'custom-loads))) (if (member '"yaml-mode" loads) nil (put 'yaml 'custom-loads (cons '"yaml-mode" loads)) (put 'languages 'custom-loads (cons 'yaml (get 'languages 'custom-loads)))))(autoload 'yaml-mode "yaml-mode" "Simple mode to edit YAML.\n\n\\{yaml-mode-map}\n\n(fn)" t)(autoload 'er/expand-region "expand-region" "Increase selected region by semantic units.\n\nWith prefix argument expands the region that many times.\nIf prefix argument is negative calls `er/contract-region'.\nIf prefix argument is 0 it resets point and mark to their state\nbefore calling `er/expand-region' for the first time.\n\n(fn ARG)" t)(autoload 'er/contract-region "expand-region-core" "Contract the selected region to its previous size.\nWith prefix argument contracts that many times.\nIf prefix argument is negative calls `er/expand-region'.\nIf prefix argument is 0 it resets point and mark to their state\nbefore calling `er/expand-region' for the first time.\n\n(fn ARG)" t)(let ((loads (get 'expand-region 'custom-loads))) (if (member '"expand-region-custom" loads) nil (put 'expand-region 'custom-loads (cons '"expand-region-custom" loads)) (put 'tools 'custom-loads (cons 'expand-region (get 'tools 'custom-loads)))))(defvar expand-region-preferred-python-mode 'python "The name of your preferred python mode")(defvar expand-region-guess-python-mode t "If expand-region should attempt to guess your preferred python mode")(defvar expand-region-autocopy-register "" "If set to a string of a single character (try \"e\"), then the\ncontents of the most recent expand or contract command will\nalways be copied to the register named after that character.")(defvar expand-region-skip-whitespace t "If expand-region should skip past whitespace on initial expansion")(defvar expand-region-fast-keys-enabled t "If expand-region should bind fast keys after initial expand/contract")(defvar expand-region-contract-fast-key "-" "Key to use after an initial expand/contract to contract once more.")(defvar expand-region-reset-fast-key "0" "Key to use after an initial expand/contract to undo.")(defvar expand-region-exclude-text-mode-expansions '(html-mode nxml-mode) "List of modes which derive from `text-mode' for which text mode expansions are not appropriate.")(defvar expand-region-smart-cursor nil "Defines whether the cursor should be placed intelligently after expansion.\n\nIf set to t, and the cursor is already at the beginning of the new region,\nkeep it there; otherwise, put it at the end of the region.\n\nIf set to nil, always place the cursor at the beginning of the region.")(define-obsolete-variable-alias 'er/enable-subword-mode? 'expand-region-subword-enabled "2019-03-23")(defvar expand-region-subword-enabled nil "Whether expand-region should use subword expansions.")(autoload 'link-hint-define-type "link-hint" "Add a new type of link called NAME to link-hint.el.\nPROPERTIES should be property value pairs to add to the symbol plist of\nlink-hint-NAME.\n\n(fn NAME &rest PROPERTIES)")(function-put 'link-hint-define-type 'lisp-indent-function 'defun)(autoload 'link-hint-open-link "link-hint" "Use avy to open a visible link." t)(autoload 'link-hint-copy-link "link-hint" "Copy a visible link of a supported type to the kill ring with avy.\n`select-enable-clipboard' and `select-enable-primary' can be set to non-nil\nvalues to copy the link to the clipboard and/or primary as well." t)(autoload 'link-hint-open-multiple-links "link-hint" "Use avy to open multiple visible links at once." t)(autoload 'link-hint-copy-multiple-links "link-hint" "Use avy to copy multiple visible links at once to the kill ring." t)(autoload 'link-hint-open-all-links "link-hint" "Open all visible links." t)(autoload 'link-hint-copy-all-links "link-hint" "Copy all visible links." t)(autoload 'link-hint-open-link-at-point "link-hint" "Open the link with the highest priority at the point." t)(autoload 'link-hint-copy-link-at-point "link-hint" "Copy the link with the highest priority at the point." t)(autoload 'drag-stuff-up "drag-stuff" "Drag stuff ARG lines up.\n\n(fn ARG)" t)(autoload 'drag-stuff-down "drag-stuff" "Drag stuff ARG lines down.\n\n(fn ARG)" t)(autoload 'drag-stuff-right "drag-stuff" "Drag stuff ARG lines to the right.\n\n(fn ARG)" t)(autoload 'drag-stuff-left "drag-stuff" "Drag stuff ARG lines to the left.\n\n(fn ARG)" t)(autoload 'drag-stuff-mode "drag-stuff" "Drag stuff around.\n\nThis is a minor mode.  If called interactively, toggle the\n`drag-Stuff mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `drag-stuff-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'turn-on-drag-stuff-mode "drag-stuff" "Turn on `drag-stuff-mode'." t)(autoload 'turn-off-drag-stuff-mode "drag-stuff" "Turn off `drag-stuff-mode'." t)(put 'drag-stuff-global-mode 'globalized-minor-mode t)(defvar drag-stuff-global-mode nil "Non-nil if Drag-Stuff-Global mode is enabled.\nSee the `drag-stuff-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `drag-stuff-global-mode'.")(autoload 'drag-stuff-global-mode "drag-stuff" "Toggle Drag-Stuff mode in all buffers.\nWith prefix ARG, enable Drag-Stuff-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nDrag-Stuff mode is enabled in all buffers where\n`turn-on-drag-stuff-mode' would do it.\n\nSee `drag-stuff-mode' for more information on Drag-Stuff mode.\n\n(fn &optional ARG)" t)(autoload 'google-this-search "google-this" "Write and do a google search.\nInteractively PREFIX determines quoting.\nNon-interactively SEARCH-STRING is the string to search.\n\n(fn PREFIX &optional SEARCH-STRING)" t)(autoload 'google-this-lucky-and-insert-url "google-this" "Fetch the url that would be visited by `google-this-lucky'.\n\nIf you just want to do an \"I'm feeling lucky search\", use\n`google-this-lucky-search' instead.\n\nInteractively:\n* Insert the URL at point,\n* Kill the searched term, removing it from the buffer (it is killed, not\n  deleted, so it can be easily yanked back if desired).\n* Search term defaults to region or line, and always queries for\n  confirmation.\n\nNon-Interactively:\n* Runs synchronously,\n* Search TERM is an argument without confirmation,\n* Only insert if INSERT is non-nil, otherwise return.\n\n(fn TERM &optional INSERT)" t)(autoload 'google-this-lucky-search "google-this" "Exactly like `google-this-search', but use the \"I'm feeling lucky\" option.\nPREFIX determines quoting.\n\n(fn PREFIX)" t)(autoload 'google-this-string "google-this" "Google given TEXT, but ask the user first if NOCONFIRM is nil.\nPREFIX determines quoting.\n\n(fn PREFIX &optional TEXT NOCONFIRM)")(autoload 'google-this-line "google-this" "Google the current line.\nPREFIX determines quoting.\nNOCONFIRM goes without asking for confirmation.\n\n(fn PREFIX &optional NOCONFIRM)" t)(autoload 'google-this-ray "google-this" "Google text between the point and end of the line.\nIf there is a selected region, googles the region.\nPREFIX determines quoting. Negative arguments invert the line segment.\nNOCONFIRM goes without asking for confirmation.\nNOREGION ignores the region.\n\n(fn PREFIX &optional NOCONFIRM NOREGION)" t)(autoload 'google-this-word "google-this" "Google the current word.\nPREFIX determines quoting.\n\n(fn PREFIX)" t)(autoload 'google-this-symbol "google-this" "Google the current symbol.\nPREFIX determines quoting.\n\n(fn PREFIX)" t)(autoload 'google-this-region "google-this" "Google the current region.\nPREFIX determines quoting.\nNOCONFIRM goes without asking for confirmation.\n\n(fn PREFIX &optional NOCONFIRM)" t)(autoload 'google-this "google-this" "Decide what the user wants to google (always something under point).\nUnlike `google-this-search' (which presents an empty prompt with\n\"this\" as the default value), this function inserts the query\nin the minibuffer to be edited.\nPREFIX argument determines quoting.\nNOCONFIRM goes without asking for confirmation.\n\n(fn PREFIX &optional NOCONFIRM)" t)(autoload 'google-this-noconfirm "google-this" "Decide what the user wants to google and go without confirmation.\nExactly like `google-this' or `google-this-search', but don't ask\nfor confirmation.\nPREFIX determines quoting.\n\n(fn PREFIX)" t)(autoload 'google-this-error "google-this" "Google the current error in the compilation buffer.\nPREFIX determines quoting.\n\n(fn PREFIX)" t)(autoload 'google-this-clean-error-string "google-this" "Parse error string S and turn it into googleable strings.\n\nRemoves unhelpful details like file names and line numbers from\nsimple error strings (such as c-like erros).\n\nUses replacements in `google-this-error-regexp' and stops at the first match.\n\n(fn S)" t)(autoload 'google-this-cpp-reference "google-this" "Visit the most probable cppreference.com page for this word." t)(autoload 'google-this-forecast "google-this" "Search google for \"weather\".\nWith PREFIX, ask for location.\n\n(fn PREFIX)" t)(defvar google-this-mode nil "Non-nil if Google-This mode is enabled.\nSee the `google-this-mode' command\nfor a description of this minor mode.")(autoload 'google-this-mode "google-this" "Toggle Google-This mode on or off.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Google-This mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='google-this-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'free-keys "free-keys" "Display free keys in current buffer.\n\nA free key is a key that has no associated key-binding as\ndetermined by function `key-binding'.\n\nBy default, keys on `free-keys-keys' list with no prefix sequence\nare considered, possibly together with modifier keys from\n`free-keys-modifiers'.  You can change the prefix sequence by\nhitting 'p' in the *Free keys* buffer.  Prefix is supplied in\nformat recognized by `kbd', for example \"C-x\".\n\n(fn &optional PREFIX BUFFER)" t)(autoload 'consult-yasnippet-visit-snippet-file "consult-yasnippet" "Visit the snippet file associated with TEMPLATE.\nWhen called interactively this command previews snippet completions in\nthe current buffer, and then opens the selected snippets template file\nusing `yas--visit-snippet-file-1'.\n\n(fn TEMPLATE)" t)(autoload 'consult-yasnippet "consult-yasnippet" "Interactively select and expand a yasnippet template.\nThis command presents a completing read interface containing all currently\navailable snippet expansions, with live previews for each snippet. Once\nselected a chosen snippet will be expanded at point using\n`yas-expand-snippet'.\n\nWith ARG select snippets from all snippet tables, not just the current one.\n\n(fn ARG)" t)(autoload 'consult-company "consult-company" "Interactively complete company candidates." t)(autoload 'org-zotxt-mode "org-zotxt" "Toggle org-zotxt-mode.\n\nWith no argument, this command toggles the mode.\nNon-null prefix argument turns on the mode.\nNull prefix argument turns off the mode.\n\nThis is a minor mode for managing your citations with Zotero in a\norg-mode document.\n\nThis is a minor mode.  If called interactively, toggle the\n`Org-Zotxt mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `org-zotxt-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'zotxt-citekey-mode "zotxt" "Toggle zotxt-citekey-mode.\n\nWith no argument, this command toggles the mode.\nNon-null prefix argument turns on the mode.\nNull prefix argument turns off the mode.\n\nThis is a minor mode for managing your citekey citations,\nincluding completion.\n\nThis is a minor mode.  If called interactively, toggle the\n`Zotxt-Citekey mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `zotxt-citekey-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(define-obsolete-function-alias 'zotxt-easykey-mode #'zotxt-citekey-mode "6.0")(autoload 'consult-org-roam-search "consult-org-roam" "Search org-roam directory using `consult-org-roam-grep-func' with live-preview.\nWith an option for INITIAL input when called non-interactively.\nThe function is restricted to files with .org-suffix.\n\n(fn &optional INITIAL)" t)(autoload 'consult-org-roam-backlinks "consult-org-roam" "Select from list of all notes that link to the current note.\nIf OTHER-WINDOW, visit the NODE in another window.\n\n(fn &optional OTHER-WINDOW)" t)(autoload 'consult-org-roam-forward-links "consult-org-roam" "Select a forward link contained in the current buffer.\nIf OTHER-WINDOW, visit the NODE in another window.\n\n(fn &optional OTHER-WINDOW)" t)(autoload 'consult-org-roam-file-find "consult-org-roam" "Find org-roam node with preview, if ARG open in other window.\n\n(fn ARG)" t)(defvar consult-org-roam-mode nil "Non-nil if Consult-Org-Roam mode is enabled.\nSee the `consult-org-roam-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `consult-org-roam-mode'.")(autoload 'consult-org-roam-mode "consult-org-roam" "Toggle `consult-org-roam-mode' to integrate consult with org-roam.\nBy enabling `consult-org-roam-mode' the functions `org-roam-node-read' and\n`org-roam-ref-read' are overriden by consults-org-roam's equivalents. Optional\nargument ARG indicates whether the mode should be enabled or disabled.\n\n(fn &optional ARG)" t)(defvar brazilian-holidays-mode nil "Non-nil if Brazilian-Holidays mode is enabled.\nSee the `brazilian-holidays-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `brazilian-holidays-mode'.")(autoload 'brazilian-holidays-mode "brazilian-holidays" "Toggle brazilian holidays mode.\nInteractively, with a prefix argument, enable\nVisual Line mode if the prefix argument is positive,\nand disable it otherwise.  If called from Lisp, toggle\nthe mode if ARG is `toggle', disable the mode if ARG is\na non-positive integer, and enable the mode otherwise\n(including if ARG is omitted or nil or a positive integer).\n\nWhen brazilian holidays mode is enabled, it will hide\nholidays from other countries.\n\n(fn &optional ARG)" t)(autoload 'graphviz-dot-mode "graphviz-dot-mode" "Major mode for the dot language.\n\nFunctionallity specific to this mode:\n\n  `indent-for-tab-command'    \\[indent-for-tab-command]\n        Indents a single line.\n  `graphviz-dot-preview'      \\[graphviz-dot-preview]\n        Previews graph in a buffer.\n  `graphviz-dot-view'         \\[graphviz-dot-view]\n        Views graph in an external viewer.\n  `graphviz-dot-indent-line'  \\[graphviz-dot-indent-line]\n        Indents current line of code.\n\nVariables specific to this mode:\n\n  `graphviz-dot-dot-program'                   (default `dot')\n       Program used to compile the graphs.\n  `graphviz-dot-preview-extension'             (default `png')\n       File type to use for output.\n  `graphviz-dot-view-command'                  (default `dotty %s')\n       Command to run when `graphviz-dot-view' is executed.\n  `graphviz-dot-view-edit-command'             (default nil)\n       If the user should be asked to edit the view command.\n  `graphviz-dot-save-before-view'              (default t)\n       Automatically save current buffer berore `graphviz-dot-view'.\n\n(fn)" t)(autoload 'graphviz-dot-preview "graphviz-dot-mode" "Compile the graph between BEGIN and END and preview it in an other buffer.\nBEGIN (resp. END) is a number defaulting to `point-min' (resp. `point-max')\nrepresenting the current buffer's point where the graph definition starts\n(resp. stops).\n\n(fn &optional BEGIN END)" t)(autoload 'graphviz-turn-on-live-preview "graphviz-dot-mode" "Turn on live preview.\nThis will update the preview on every save." t)(autoload 'graphviz-turn-off-live-preview "graphviz-dot-mode" "Turn off live preview.\nSaving the file will no longer also update the preview." t)(autoload 'org-modern-mode "org-modern" "Modern looks for Org.\n\nThis is a minor mode.  If called interactively, toggle the\n`Org-Modern mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `org-modern-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-modern-agenda "org-modern" "Finalize Org agenda highlighting.")(put 'global-org-modern-mode 'globalized-minor-mode t)(defvar global-org-modern-mode nil "Non-nil if Global Org-Modern mode is enabled.\nSee the `global-org-modern-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-org-modern-mode'.")(autoload 'global-org-modern-mode "org-modern" "Toggle Org-Modern mode in all buffers.\nWith prefix ARG, enable Global Org-Modern mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nOrg-Modern mode is enabled in all buffers where `org-modern--on' would\ndo it.\n\nSee `org-modern-mode' for more information on Org-Modern mode.\n\n(fn &optional ARG)" t)(defvar org-ai-global-mode nil "Non-nil if Org-Ai-Global mode is enabled.\nSee the `org-ai-global-mode' command\nfor a description of this minor mode.")(autoload 'org-ai-global-mode "org-ai" "Non `org-mode' specific minor mode for the OpenAI API.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Org-Ai-Global mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='org-ai-global-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'org-ai-on-project "org-ai-on-project" "Start org-ai-on-project inside BASE-DIR.\nThis is a command that will allow you to run an org-ai prompt on\nmultiple files. You can select the files using a regexp expression\nand optionally select regions inside of the files.\n\nThose files will then be concatenated and passed to org-ai with\nyour prompt.\n\n(fn &optional BASE-DIR)" t)(autoload 'whisper-run "whisper" "Transcribe/translate audio using whisper.\n\nWhen ARG is given, uses a local file as input. Otherwise records the audio.\n\nThis is a dwim function that does different things depending on current state:\n\n- When inference engine (whisper.cpp) isn't installed, installs it first.\n- When speech recognition model isn't available, downloads it.\n- When installation/download is already in progress, cancels those.\n- When installation is valid, starts recording audio.\n- When recording is in progress, stops it and starts transcribing.\n- When transcribing is in progress, cancels it.\n\n(fn &optional ARG)" t)(autoload 'whisper-file "whisper" "Transcribe/translate local file using whisper." t)(autoload 'dall-e-new "dall-e" "Run a new instance of DALL-E." t)(autoload 'dall-e "dall-e" "Start DALL-E with existing instance, else create a new instance." t)(defvar openai-debug-mode nil "Non-nil if Openai-Debug mode is enabled.\nSee the `openai-debug-mode' command\nfor a description of this minor mode.")(autoload 'openai-debug-mode "openai" "Turn on/off debug mode for `openai'.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Openai-Debug mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='openai-debug-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'openai-key-auth-source "openai" "Retrieve the OpenAI API key from auth-source given a BASE-URL.\nIf BASE-URL is not specified, it defaults to `openai-base-url'.\n\n(fn &optional BASE-URL)")(autoload 'openai-audio-create-transcription "openai-audio" "Send transcribe audio request.\n\nArgument FILE is audio file to transcribe, in one of these formats: mp3, mp4,\nmpeg, mpga, m4a, wav, or webm.  CALLBACK is the execuation after request is\nmade.\n\nArguments BASE-URL, PARAMETERS, CONTENT-TYPE, KEY and ORG-ID are global\noptions; however, you can overwrite the value by passing it in.\n\nThe rest of the arugments are optional, please see OpenAI API reference page\nfor more information.  Arguments here refer to MODEL PROMPT, RESPONSE-FORMAT,\nTEMPERATURE, and LANGUAGE.\n\n(fn FILE CALLBACK &key (BASE-URL openai-base-url) (PARAMETERS openai-parameters) (CONTENT-TYPE \"application/json\") (KEY openai-key) ORG-ID (MODEL \"whisper-1\") PROMPT RESPONSE-FORMAT TEMPERATURE LANGUAGE)")(autoload 'openai-audio-create-translation "openai-audio" "Send translate audio request.\n\nArgument FILE is the audio file to translate, in one of these formats: mp3,\nmp4, mpeg, mpga, m4a, wav, or webm.  CALLBACK is the execuation after request\nis made.\n\nArguments BASE-URL, PARAMETERS, CONTENT-TYPE, KEY and ORG-ID are global\noptions; however, you can overwrite the value by passing it in.\n\nThe rest of the arugments are optional, please see OpenAI API reference page\nfor more information.  Arguments here refer to MODEL PROMPT, RESPONSE-FORMAT,\nand TEMPERATURE.\n\n(fn FILE CALLBACK &key (BASE-URL openai-base-url) (PARAMETERS openai-parameters) (CONTENT-TYPE \"application/json\") (KEY openai-key) ORG-ID (MODEL \"whisper-1\") PROMPT RESPONSE-FORMAT TEMPERATURE)")(autoload 'openai-chat "openai-chat" "Send chat request.\n\nArguments MESSAGES and CALLBACK are required for this type of request.\nMESSAGES is the conversation data.  CALLBACK is the execuation after request is\nmade.\n\nArguments BASE-URL, PARAMETERS, CONTENT-TYPE, KEY, ORG-ID and USER are global\noptions; however, you can overwrite the value by passing it in.\n\nThe rest of the arugments are optional, please see OpenAI API reference page\nfor more information.  Arguments here refer to MODEL,  TEMPERATURE, TOP-P, N,\nSTREAM, STOP, MAX-TOKENS, PRESENCE-PENALTY, FREQUENCY-PENALTY, and LOGIT-BIAS.\n\n(fn MESSAGES CALLBACK &key (BASE-URL openai-base-url) (PARAMETERS openai-parameters) (CONTENT-TYPE \"application/json\") (KEY openai-key) ORG-ID (MODEL \"gpt-3.5-turbo\") TEMPERATURE TOP-P N STREAM STOP MAX-TOKENS PRESENCE-PENALTY FREQUENCY-PENALTY LOGIT-BIAS (USER openai-user))")(autoload 'openai-chat-say "openai-chat" "Start making a conversation to OpenAI.\n\nThis is a ping pong message, so you will only get one response." t)(autoload 'openai-completion "openai-completion" "Send completion request.\n\nArguments PROMPT and CALLBACK are required for this type of request.  PROMPT is\neither the question or instruction to OpenAI.  CALLBACK is the execution after\nrequest is made.\n\nArguments BASE-URL, PARAMETERS, CONTENT-TYPE, KEY, ORG-ID and USER are global\noptions; however, you can overwrite the value by passing it in.\n\nThe rest of the arugments are optional, please see OpenAI API reference page\nfor more information.  Arguments here refer to MODEL, SUFFIX, MAX-TOKENS,\nTEMPERATURE, TOP-P, N, STREAM, LOGPROBS, ECHO, STOP, PRESENCE-PENALTY,\nFREQUENCY-PENALTY, BEST-OF, and LOGIT-BIAS.\n\n(fn PROMPT CALLBACK &key (BASE-URL openai-base-url) (PARAMETERS openai-parameters) (CONTENT-TYPE \"application/json\") (KEY openai-key) ORG-ID (MODEL \"text-davinci-003\") SUFFIX MAX-TOKENS TEMPERATURE TOP-P N STREAM LOGPROBS ECHO STOP PRESENCE-PENALTY FREQUENCY-PENALTY BEST-OF LOGIT-BIAS (USER openai-user))")(autoload 'openai-completion-select-insert "openai-completion" "Send the region to OpenAI and insert the result to the next paragraph.\n\nSTART and END are selected region boundaries.\n\n(fn START END)" t)(autoload 'openai-completion-buffer-insert "openai-completion" "Send the entire buffer to OpenAI and insert the result to the end of buffer." t)(autoload 'openai-edit-prompt "openai-edit" "Prompt to ask for edited version." t)(autoload 'openai-list-engines "openai-engine" "List currently available (non-finetuned) models." t)(autoload 'openai-list-files "openai-file" "List files that belong to the user's organization." t)(autoload 'openai-upload-file "openai-file" "Prompt to upload the file to OpenAI server for file-tuning." t)(autoload 'openai-delete-file "openai-file" "Prompt to select the file and delete it." t)(autoload 'openai-retrieve-file "openai-file" "Prompt to select the file and print its' information." t)(autoload 'openai-retrieve-file-content "openai-file" "Prompt to select the file and print its' content." t)(autoload 'openai-list-fine-tunes "openai-fine-tune" "List fine-tuning jobs." t)(autoload 'openai-image-prompt "openai-image" "Use PROMPT to ask for image, and display result in a buffer.\n\n(fn PROMPT)" t)(autoload 'openai-image-edit-prompt "openai-image" "Use prompt to ask for image, and display result in a buffer." t)(autoload 'openai-image-variation-prompt "openai-image" "Prompt to select an IMAGE file, and display result in a buffer.\n\n(fn IMAGE)" t)(autoload 'openai-retrieve-model "openai-model" "Retrieves a model instance, providing basic information about the model such\nas the owner and permissioning." t)(autoload 'openai-list-models "openai-model" "Lists the currently available models, and provides basic information about\neach one such as the owner and availability." t)(autoload 'tblui-define "tblui" "Define tabulated list UI easily.  Hereafter referred as tblui.\nThis macro defines functions and popups for the defined tblui.\nUser of this macro can focus on writing the logic for ui, let this\npackage handle the tabulated list buffer interaction part.\n\nEach arguments are explained as follows:\n\n * `TBLUI-NAME` : the symbol name of defining tblui.  It will be used\n                  as prefix for functions defined via this macro.\n * `TITLE` : String title for the major mode created\n * `DESCRIPTION` : Sting description for the major mode created\n * `ENTRIES-PROVIDER` : the function which provides tabulated-list-entries\n * `TABLE-LAYOUT` : the `tabulated-list-format` to be used for the tblui.\n * `POPUP-DEFINITIONS` : list of popup definition.\n   A popup definition is an plist of\n       `(:key KEY :name NAME :funcs FUNCTIONS)`.\n   KEY is the key to be bound for the defined magit-popup.\n   NAME is the name for defined magit-popup.\n   FUNCTIONS is the list of action definition.\n   Action definition is a list of 3 elements,\n   which is `(ACTIONKEY DESCRIPTION FUNCTION)`.\n\n   ACTIONKEY is the key to be used as action key in the magit-popup.\n   DESCRIPTION is the description of the action.\n   FUNCTION is the logic to be called for this UI.\n   It is the elisp function which receives the IDs of tabulated-list entry,\n    and do what ever operation.\n\nWith this macro `TBLUI-NAME-goto-ui` function is defined.\nCalling this function will popup and switch to the tblui buffer.\n\n(fn TBLUI-NAME TITLE DESCRIPTION ENTRIES-PROVIDER TABLE-LAYOUT POPUP-DEFINITIONS)" nil t)(autoload 'tablist-minor-mode "tablist" "Toggle tablist minor mode.\n\nThis is a minor mode.  If called interactively, toggle the\n`Tablist minor mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `tablist-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'tablist-mode "tablist" "\n\n(fn)" t)(autoload 'reveal-in-folder-at-point "reveal-in-folder" "Reveal the current file in folder at point." t)(autoload 'reveal-in-folder-this-buffer "reveal-in-folder" "Reveal the current buffer in folder." t)(autoload 'reveal-in-folder "reveal-in-folder" "Reveal buffer/path depends on cursor condition." t)(autoload 'codegpt-mode "codegpt" "Major mode for `codegpt-mode'.\n\n\\<codegpt-mode-map>\n\n(fn)" t)(autoload 'codegpt-doc "codegpt" "Automatically write documentation for your code.\n\nThis command is interactive region only, the START and END are boundaries of\nthat region in buffer.\n\n(fn START END)" t)(autoload 'codegpt-fix "codegpt" "Fix your code.\n\nThis command is interactive region only, the START and END are boundaries of\nthat region in buffer.\n\n(fn START END)" t)(autoload 'codegpt-explain "codegpt" "Explain the selected code.\n\nThis command is interactive region only, the START and END are boundaries of\nthat region in buffer.\n\n(fn START END)" t)(autoload 'codegpt-improve "codegpt" "Improve, refactor or optimize your code.\n\nThis command is interactive region only, the START and END are boundaries of\nthat region in buffer.\n\n(fn START END)" t)(autoload 'codegpt-custom "codegpt" "Do completion with custom instruction.\n\nThis command is interactive region only, the START and END are boundaries of\nthat region in buffer.\n\n(fn START END)" t)(autoload 'codegpt "codegpt" "Do completion with OpenAI to your code.\n\nThis command is interactive region only, the START and END are boundaries of\nthat region in buffer.\n\n(fn START END)" t)(autoload 'greader-mode "greader" "Toggle greader mode on or off.\n\nThis is a minor mode.  If called interactively, toggle the\n`greader mode' mode.  If the prefix argument is positive, enable\nthe mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `greader-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'greader-reading-mode "greader" "Toggle Greader-Reading mode on or off.\n\nThis is a minor mode.  If called interactively, toggle the\n`Greader-Reading mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `greader-reading-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)")(defvar greader-auto-bookmark-mode nil "Non-nil if Greader-Auto-Bookmark mode is enabled.\nSee the `greader-auto-bookmark-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `greader-auto-bookmark-mode'.")(autoload 'greader-auto-bookmark-mode "greader" "Enable automatic bookmarking.\n\nEach time the reading of the buffer is stopped a bookmark is saved\nwhen the buffer is visiting a file.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Greader-Auto-Bookmark mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='greader-auto-bookmark-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar greader-compile-dictsource nil "Location of espeak dictionary source data.\nYou must configure this variable in order to use\n  `greader-compile-mode'.")(autoload 'greader-queue-mode "greader" "In this mode, text reading occurs via blocks.\n\nnormally greader reads the text of a buffer sequentially; in queue-mode you add blocks of text to a queue, so you can choose only certain parts of the buffer.\nAs reading progresses, further blocks can be added,\nor you can add the blocks and then start reading.\n\nThis is a minor mode.  If called interactively, toggle the\n`greader-queue mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `greader-queue-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar greader-enriched-mode nil "Non-nil if Greader-Enriched mode is enabled.\nSee the `greader-enriched-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `greader-enriched-mode'.")(autoload 'greader-enriched-mode "greader" "This mode causes greader to announce clickable objects.\n\nTo configure the message with which it must be announced\nthe element, configure the `greader-enriched-tag' variable.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Greader-Enriched mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='greader-enriched-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'greader-espeak "greader-espeak" "Back-end main function of greader-espeak.\nCOMMAND must be a string suitable for `make-process'.\n\n(fn COMMAND &optional ARG &rest _)")(autoload 'greader-mac "greader-mac" "Back-end main function of greader-mac.\nCOMMAND must be a string suitable for `make-process'.\n\n(fn COMMAND &optional ARG &rest _)")(autoload 'greader-speechd "greader-speechd" "greader speech-dispatcher back-end.\n\n(fn COMMAND &optional ARG &rest _)")(autoload 'gptel-mode "gptel" "Minor mode for interacting with LLMs.\n\nThis is a minor mode.  If called interactively, toggle the `GPTel\nmode' mode.  If the prefix argument is positive, enable the mode,\nand if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `gptel-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'gptel-send "gptel" "Submit this prompt to the current LLM backend.\n\nBy default, the contents of the buffer up to the cursor position\nare sent.  If the region is active, its contents are sent\ninstead.\n\nThe response from the LLM is inserted below the cursor position\nat the time of sending.  To change this behavior or model\nparameters, use prefix arg ARG activate a transient menu with\nmore options instead.\n\nThis command is asynchronous, you can continue to use Emacs while\nwaiting for the response.\n\n(fn &optional ARG)" t)(autoload 'gptel "gptel" "Switch to or start a chat session with NAME.\n\nWith a prefix arg, query for a (new) session name.\n\nAsk for API-KEY if `gptel-api-key' is unset.\n\nIf region is active, use it as the INITIAL prompt.  Returns the\nbuffer created or switched to.\n\nINTERACTIVEP is t when gptel is called interactively.\n\n(fn NAME &optional _ INITIAL INTERACTIVEP)" t)(autoload 'gptel-curl-get-response "gptel-curl" "Retrieve response to prompt in INFO.\n\nINFO is a plist with the following keys:\n- :prompt (the prompt being sent)\n- :buffer (the gptel buffer)\n- :position (marker at which to insert the response).\n\nCall CALLBACK with the response and INFO afterwards.  If omitted\nthe response is inserted into the current buffer after point.\n\n(fn INFO &optional CALLBACK)")(autoload 'gptel-make-gemini "gptel-gemini" "Register a Gemini backend for gptel with NAME.\n\nKeyword arguments:\n\nHOST (optional) is the API host, defaults to\n\"generativelanguage.googleapis.com\".\n\nMODELS is a list of available model names.  Currently only\n\"gemini-pro\" is available.\n\nSTREAM is a boolean to enable streaming responses, defaults to\nfalse.\n\nPROTOCOL (optional) specifies the protocol, \"https\" by default.\n\nENDPOINT (optional) is the API endpoint for completions, defaults to\n\"/v1beta/models/gemini-pro:streamGenerateContent\" if STREAM is true and\n\"/v1beta/models/gemini-pro:generateContent\" otherwise.\n\nHEADER (optional) is for additional headers to send with each\nrequest. It should be an alist or a function that retuns an\nalist, like:\n((\"Content-Type\" . \"application/json\"))\n\nKEY (optional) is a variable whose value is the API key, or\nfunction that returns the key.\n\n(fn NAME &key HEADER KEY (STREAM nil) (HOST \"generativelanguage.googleapis.com\") (PROTOCOL \"https\") (MODELS \\='(\"gemini-pro\")) (ENDPOINT \"/v1beta/models/gemini-pro:\"))")(function-put 'gptel-make-gemini 'lisp-indent-function 1)(autoload 'gptel-make-kagi "gptel-kagi" "Register a Kagi FastGPT backend for gptel with NAME.\n\nKeyword arguments:\n\nHOST is the Kagi host (with port), defaults to \"kagi.com\".\n\nMODELS is a list of available Kagi models: only fastgpt is supported.\n\nSTREAM is a boolean to toggle streaming responses, defaults to\nfalse.  Kagi does not support a streaming API yet.\n\nPROTOCOL (optional) specifies the protocol, https by default.\n\nENDPOINT (optional) is the API endpoint for completions, defaults to\n\"/api/v0/fastgpt\".\n\nHEADER (optional) is for additional headers to send with each\nrequest.  It should be an alist or a function that retuns an\nalist, like:\n((\"Content-Type\" . \"application/json\"))\n\nKEY (optional) is a variable whose value is the API key, or\nfunction that returns the key.\n\nExample:\n-------\n\n(gptel-make-kagi \"Kagi\" :key my-kagi-key)\n\n(fn NAME &key STREAM KEY (HOST \"kagi.com\") (HEADER (lambda nil \\=`((\"Authorization\" \\=\\, (concat \"Bot \" (gptel--get-api-key)))))) (MODELS \\='(\"fastgpt\" \"summarize:cecil\" \"summarize:agnes\" \"summarize:daphne\" \"summarize:muriel\")) (PROTOCOL \"https\") (ENDPOINT \"/api/v0/\"))")(function-put 'gptel-make-kagi 'lisp-indent-function 1)(autoload 'gptel-make-ollama "gptel-ollama" "Register an Ollama backend for gptel with NAME.\n\nKeyword arguments:\n\nHOST is where Ollama runs (with port), defaults to localhost:11434\n\nMODELS is a list of available model names.\n\nSTREAM is a boolean to toggle streaming responses, defaults to\nfalse.\n\nPROTOCOL (optional) specifies the protocol, http by default.\n\nENDPOINT (optional) is the API endpoint for completions, defaults to\n\"/api/generate\".\n\nHEADER (optional) is for additional headers to send with each\nrequest.  It should be an alist or a function that retuns an\nalist, like:\n((\"Content-Type\" . \"application/json\"))\n\nKEY (optional) is a variable whose value is the API key, or\nfunction that returns the key.  This is typically not required\nfor local models like Ollama.\n\nExample:\n-------\n\n(gptel-make-ollama\n  \"Ollama\"\n  :host \"localhost:11434\"\n  :models \\='(\"mistral:latest\")\n  :stream t)\n\n(fn NAME &key HEADER KEY MODELS STREAM (HOST \"localhost:11434\") (PROTOCOL \"http\") (ENDPOINT \"/api/generate\"))")(function-put 'gptel-make-ollama 'lisp-indent-function 1)(autoload 'gptel-make-openai "gptel-openai" "Register an OpenAI API-compatible backend for gptel with NAME.\n\nKeyword arguments:\n\nHOST (optional) is the API host, typically \"api.openai.com\".\n\nMODELS is a list of available model names.\n\nSTREAM is a boolean to toggle streaming responses, defaults to\nfalse.\n\nPROTOCOL (optional) specifies the protocol, https by default.\n\nENDPOINT (optional) is the API endpoint for completions, defaults to\n\"/v1/chat/completions\".\n\nHEADER (optional) is for additional headers to send with each\nrequest. It should be an alist or a function that retuns an\nalist, like:\n((\"Content-Type\" . \"application/json\"))\n\nKEY (optional) is a variable whose value is the API key, or\nfunction that returns the key.\n\n(fn NAME &key MODELS STREAM KEY (HEADER (lambda nil (when-let (key (gptel--get-api-key)) \\=`((\"Authorization\" \\=\\, (concat \"Bearer \" key)))))) (HOST \"api.openai.com\") (PROTOCOL \"https\") (ENDPOINT \"/v1/chat/completions\"))")(function-put 'gptel-make-openai 'lisp-indent-function 1)(autoload 'gptel-make-azure "gptel-openai" "Register an Azure backend for gptel with NAME.\n\nKeyword arguments:\n\nHOST is the API host.\n\nMODELS is a list of available model names.\n\nSTREAM is a boolean to toggle streaming responses, defaults to\nfalse.\n\nPROTOCOL (optional) specifies the protocol, https by default.\n\nENDPOINT is the API endpoint for completions.\n\nHEADER (optional) is for additional headers to send with each\nrequest. It should be an alist or a function that retuns an\nalist, like:\n((\"Content-Type\" . \"application/json\"))\n\nKEY (optional) is a variable whose value is the API key, or\nfunction that returns the key.\n\nExample:\n-------\n\n(gptel-make-azure\n \"Azure-1\"\n :protocol \"https\"\n :host \"RESOURCE_NAME.openai.azure.com\"\n :endpoint\n \"/openai/deployments/DEPLOYMENT_NAME/completions?api-version=2023-05-15\"\n :stream t\n :models \\='(\"gpt-3.5-turbo\" \"gpt-4\"))\n\n(fn NAME &key HOST (PROTOCOL \"https\") (HEADER (lambda nil \\=`((\"api-key\" \\=\\, (gptel--get-api-key))))) (KEY \\='gptel-api-key) MODELS STREAM ENDPOINT)")(function-put 'gptel-make-azure 'lisp-indent-function 1)(defalias 'gptel-make-gpt4all 'gptel-make-openai "Register a GPT4All backend for gptel with NAME.\n\nKeyword arguments:\n\nHOST is where GPT4All runs (with port), typically localhost:8491\n\nMODELS is a list of available model names.\n\nSTREAM is a boolean to toggle streaming responses, defaults to\nfalse.\n\nPROTOCOL specifies the protocol, https by default.\n\nENDPOINT (optional) is the API endpoint for completions, defaults to\n\"/api/v1/completions\"\n\nHEADER (optional) is for additional headers to send with each\nrequest. It should be an alist or a function that retuns an\nalist, like:\n((\"Content-Type\" . \"application/json\"))\n\nKEY (optional) is a variable whose value is the API key, or\nfunction that returns the key. This is typically not required for\nlocal models like GPT4All.\n\nExample:\n-------\n\n(gptel-make-gpt4all\n \"GPT4All\"\n :protocol \"http\"\n :host \"localhost:4891\"\n :models \\='(\"mistral-7b-openorca.Q4_0.gguf\"))")(autoload 'gptel-menu "gptel-transient" nil t)(autoload 'clojure-snippets-initialize "clojure-snippets")(eval-after-load 'yasnippet '(clojure-snippets-initialize))(defvar inf-clojure-mode-line '(:eval (format " inf-clojure[%s]" (inf-clojure--modeline-info))) "Mode line lighter for cider mode.\n\nThe value of this variable is a mode line template as in\n`mode-line-format'.  See Info Node `(elisp)Mode Line Format' for details\nabout mode line templates.\n\nCustomize this variable to change how inf-clojure-minor-mode\ndisplays its status in the mode line.  The default value displays\nthe current REPL.  Set this variable to nil to disable the\nmode line entirely.")(autoload 'inf-clojure-minor-mode "inf-clojure" "Minor mode for interacting with the inferior Clojure process buffer.\n\nThe following commands are available:\n\n\\{inf-clojure-minor-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Inf-Clojure minor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `inf-clojure-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'inf-clojure "inf-clojure" "Run an inferior Clojure process, input and output via buffer `*inf-clojure*'.\nIf there is a process already running in `*inf-clojure*', just\nswitch to that buffer.\n\nCMD is a string which serves as the startup command or a cons of\nhost and port.\n\n Prompts user for repl startup command and repl type if not\ninferrable from startup command.  Uses `inf-clojure-custom-repl-type'\nand `inf-clojure-custom-startup' if those are set.\nUse a prefix to prevent using these when they\nare set.\n\nPrints a message that it has connected to the host and port\nunless SUPPRESS-MESSAGE is truthy.\n\n Runs the hooks from `inf-clojure-mode-hook' (after the\n`comint-mode-hook' is run).  (Type \\[describe-mode] in the\nprocess buffer for a list of commands.)\n\n(fn CMD &optional SUPPRESS-MESSAGE)" t)(autoload 'inf-clojure-socket-repl "inf-clojure" "Start a socket REPL server and connects to it via `inf-clojure-connect'.\nCMD is the command line instruction used to start the socket\nREPL.  It should be a string with \"%d\" in it to take a random\nport.  Set `inf-clojure-custom-startup' or choose from the\ndefaults provided in `inf-clojure-socket-repl-startup-forms'.\n\n(fn CMD)" t)(autoload 'clojure-mode "clojure-mode" "Major mode for editing Clojure code.\n\n\\{clojure-mode-map}\n\n(fn)" t)(autoload 'clojure-unwind "clojure-mode" "Unwind thread at point or above point by N levels.\nWith universal argument \\[universal-argument], fully unwind thread.\n\n(fn &optional N)" t)(autoload 'clojure-unwind-all "clojure-mode" "Fully unwind thread at point or above point." t)(autoload 'clojure-thread "clojure-mode" "Thread by one more level an existing threading macro." t)(autoload 'clojure-thread-first-all "clojure-mode" "Fully thread the form at point using ->.\n\nWhen BUT-LAST is non-nil, the last expression is not threaded.\nDefault value is `clojure-thread-all-but-last'.\n\n(fn BUT-LAST)" t)(autoload 'clojure-thread-last-all "clojure-mode" "Fully thread the form at point using ->>.\n\nWhen BUT-LAST is non-nil, the last expression is not threaded.\nDefault value is `clojure-thread-all-but-last'.\n\n(fn BUT-LAST)" t)(autoload 'clojure-cycle-privacy "clojure-mode" "Make public the current private def, or vice-versa.\nSee: https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-cycle-privacy" t)(autoload 'clojure-convert-collection-to-list "clojure-mode" "Convert collection at (point) to list." t)(autoload 'clojure-convert-collection-to-quoted-list "clojure-mode" "Convert collection at (point) to quoted list." t)(autoload 'clojure-convert-collection-to-map "clojure-mode" "Convert collection at (point) to map." t)(autoload 'clojure-convert-collection-to-vector "clojure-mode" "Convert collection at (point) to vector." t)(autoload 'clojure-convert-collection-to-set "clojure-mode" "Convert collection at (point) to set." t)(autoload 'clojure-cycle-if "clojure-mode" "Change a surrounding if to if-not, or vice-versa.\n\nSee: https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-cycle-if" t)(autoload 'clojure-cycle-when "clojure-mode" "Change a surrounding when to when-not, or vice-versa." t)(autoload 'clojure-let-backward-slurp-sexp "clojure-mode" "Slurp the s-expression before the let form into the let form.\nWith a numeric prefix argument slurp the previous N s-expressions\ninto the let form.\n\n(fn &optional N)" t)(autoload 'clojure-let-forward-slurp-sexp "clojure-mode" "Slurp the next s-expression after the let form into the let form.\nWith a numeric prefix argument slurp the next N s-expressions\ninto the let form.\n\n(fn &optional N)" t)(autoload 'clojure-introduce-let "clojure-mode" "Create a let form, binding the form at point.\nWith a numeric prefix argument the let is introduced N lists up.\n\n(fn &optional N)" t)(autoload 'clojure-move-to-let "clojure-mode" "Move the form at point to a binding in the nearest let." t)(autoload 'clojure-rename-ns-alias "clojure-mode" "Rename a namespace alias.\nIf a region is active, only pick up and rename aliases within the region." t)(autoload 'clojure-add-arity "clojure-mode" "Add an arity to a function." t)(autoload 'clojurescript-mode "clojure-mode" "Major mode for editing ClojureScript code.\n\n\\{clojurescript-mode-map}\n\n(fn)" t)(autoload 'clojurec-mode "clojure-mode" "Major mode for editing ClojureC code.\n\n\\{clojurec-mode-map}\n\n(fn)" t)(autoload 'adoc-mode "adoc-mode" "Major mode for editing AsciiDoc text files.\nTurning on Adoc mode runs the normal hook `adoc-mode-hook'.\n\n(fn)" t)(autoload 'pulsar-pulse-line "pulsar" "Temporarily highlight the current line.\nWhen `pulsar-pulse' is non-nil (the default) make the highlight\npulse before fading away.  The pulse effect is controlled by\n`pulsar-delay' and `pulsar-iterations'.\n\nAlso see `pulsar-highlight-line' for a highlight without the\npulse effect." t)(autoload 'pulsar-pulse-region "pulsar" "Temporarily highlight the active region if any.  Do nothing otherwise.\nWhen `pulsar-pulse' is non-nil (the default) make the highlight\npulse before fading away.  The pulse effect is controlled by\n`pulsar-delay' and `pulsar-iterations'.\n\nNB:  If multiple regions are active, only the first one is impacted." t)(autoload 'pulsar-highlight-line "pulsar" "Temporarily highlight the current line.\nUnlike `pulsar-pulse-line', never pulse the current line.  Keep\nthe highlight in place until another command is invoked.\n\nUse `pulsar-highlight-face' (it is the same as `pulsar-face' by\ndefault)." t)(autoload 'pulsar-define-pulse-with-face "pulsar" "Produce function to `pulsar--pulse' with FACE.\nIf FACE starts with the `pulsar-' prefix, remove it and keep only\nthe remaining text.  The assumption is that something like\n`pulsar-red' will be convered to `red', thus deriving a function\nnamed `pulsar-pulse-line-red'.  Any other FACE is taken as-is.\n\n(fn FACE)" nil t)(function-put 'pulsar-define-pulse-with-face 'lisp-indent-function 'function)(autoload 'pulsar-highlight-dwim "pulsar" "Temporarily highlight the current line or active region.\nThe region may also be a rectangle.\n\nFor lines, do the same as `pulsar-highlight-line'." t)(put 'pulsar-global-mode 'globalized-minor-mode t)(defvar pulsar-global-mode nil "Non-nil if Pulsar-Global mode is enabled.\nSee the `pulsar-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `pulsar-global-mode'.")(autoload 'pulsar-global-mode "pulsar" "Toggle Pulsar mode in all buffers.\nWith prefix ARG, enable Pulsar-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nPulsar mode is enabled in all buffers where `pulsar--on' would do it.\n\nSee `pulsar-mode' for more information on Pulsar mode.\n\n(fn &optional ARG)" t)(defvar which-key-mode nil "Non-nil if Which-Key mode is enabled.\nSee the `which-key-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `which-key-mode'.")(autoload 'which-key-mode "which-key" "Toggle which-key-mode.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Which-Key mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='which-key-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'which-key-setup-side-window-right "which-key" "Apply suggested settings for side-window that opens on right." t)(autoload 'which-key-setup-side-window-right-bottom "which-key" "Apply suggested settings for side-window that opens on right\nif there is space and the bottom otherwise." t)(autoload 'which-key-setup-side-window-bottom "which-key" "Apply suggested settings for side-window that opens on bottom." t)(autoload 'which-key-setup-minibuffer "which-key" "Apply suggested settings for minibuffer.\nDo not use this setup if you use the paging commands. Instead use\n`which-key-setup-side-window-bottom', which is nearly identical\nbut more functional." t)(autoload 'which-key-add-keymap-based-replacements "which-key" "Replace the description of KEY using REPLACEMENT in KEYMAP.\nKEY should take a format suitable for use in `kbd'. REPLACEMENT\nshould be a cons cell of the form (STRING . COMMAND) for each\nREPLACEMENT, where STRING is the replacement string and COMMAND\nis a symbol corresponding to the intended command to be\nreplaced. COMMAND can be nil if the binding corresponds to a key\nprefix. An example is\n\n(which-key-add-keymap-based-replacements global-map\n  \"C-x w\" \\='(\"Save as\" . write-file)).\n\nFor backwards compatibility, REPLACEMENT can also be a string,\nbut the above format is preferred, and the option to use a string\nfor REPLACEMENT will eventually be removed.\n\n(fn KEYMAP KEY REPLACEMENT &rest MORE)")(autoload 'which-key-add-key-based-replacements "which-key" "Replace the description of KEY-SEQUENCE with REPLACEMENT.\nKEY-SEQUENCE is a string suitable for use in `kbd'. REPLACEMENT\nmay either be a string, as in\n\n(which-key-add-key-based-replacements \"C-x 1\" \"maximize\")\n\na cons of two strings as in\n\n(which-key-add-key-based-replacements \"C-x 8\"\n                                        \\='(\"unicode\" . \"Unicode keys\"))\n\nor a function that takes a (KEY . BINDING) cons and returns a\nreplacement.\n\nIn the second case, the second string is used to provide a longer\nname for the keys under a prefix.\n\nMORE allows you to specifcy additional KEY REPLACEMENT pairs.  All\nreplacements are added to `which-key-replacement-alist'.\n\n(fn KEY-SEQUENCE REPLACEMENT &rest MORE)")(autoload 'which-key-add-major-mode-key-based-replacements "which-key" "Functions like `which-key-add-key-based-replacements'.\nThe difference is that MODE specifies the `major-mode' that must\nbe active for KEY-SEQUENCE and REPLACEMENT (MORE contains\naddition KEY-SEQUENCE REPLACEMENT pairs) to apply.\n\n(fn MODE KEY-SEQUENCE REPLACEMENT &rest MORE)")(autoload 'which-key-reload-key-sequence "which-key" "Simulate entering the key sequence KEY-SEQ.\nKEY-SEQ should be a list of events as produced by\n`listify-key-sequence'. If nil, KEY-SEQ defaults to\n`which-key--current-key-list'. Any prefix arguments that were\nused are reapplied to the new key sequence.\n\n(fn &optional KEY-SEQ)")(autoload 'which-key-show-standard-help "which-key" "Call the command in `which-key--prefix-help-cmd-backup'.\nUsually this is `describe-prefix-bindings'.\n\n(fn &optional _)" t)(autoload 'which-key-show-next-page-no-cycle "which-key" "Show next page of keys unless on the last page, in which case\ncall `which-key-show-standard-help'." t)(autoload 'which-key-show-previous-page-no-cycle "which-key" "Show previous page of keys unless on the first page, in which\ncase do nothing." t)(autoload 'which-key-show-next-page-cycle "which-key" "Show the next page of keys, cycling from end to beginning\nafter last page.\n\n(fn &optional _)" t)(autoload 'which-key-show-previous-page-cycle "which-key" "Show the previous page of keys, cycling from beginning to end\nafter first page.\n\n(fn &optional _)" t)(autoload 'which-key-show-top-level "which-key" "Show top-level bindings.\n\n(fn &optional _)" t)(autoload 'which-key-show-major-mode "which-key" "Show top-level bindings in the map of the current major mode.\n\nThis function will also detect evil bindings made using\n`evil-define-key' in this map. These bindings will depend on the\ncurrent evil state. \n\n(fn &optional ALL)" t)(autoload 'which-key-show-full-major-mode "which-key" "Show all bindings in the map of the current major mode.\n\nThis function will also detect evil bindings made using\n`evil-define-key' in this map. These bindings will depend on the\ncurrent evil state. " t)(autoload 'which-key-dump-bindings "which-key" "Dump bindings from PREFIX into buffer named BUFFER-NAME.\n\nPREFIX should be a string suitable for `kbd'.\n\n(fn PREFIX BUFFER-NAME)" t)(autoload 'which-key-undo-key "which-key" "Undo last keypress and force which-key update.\n\n(fn &optional _)" t)(autoload 'which-key-C-h-dispatch "which-key" "Dispatch C-h commands by looking up key in\n`which-key-C-h-map'. This command is always accessible (from any\nprefix) if `which-key-use-C-h-commands' is non nil." t)(autoload 'which-key-show-keymap "which-key" "Show the top-level bindings in KEYMAP using which-key.\nKEYMAP is selected interactively from all available keymaps.\n\nIf NO-PAGING is non-nil, which-key will not intercept subsequent\nkeypresses for the paging functionality.\n\n(fn KEYMAP &optional NO-PAGING)" t)(autoload 'which-key-show-full-keymap "which-key" "Show all bindings in KEYMAP using which-key.\nKEYMAP is selected interactively from all available keymaps.\n\n(fn KEYMAP)" t)(autoload 'which-key-show-minor-mode-keymap "which-key" "Show the top-level bindings in KEYMAP using which-key.\nKEYMAP is selected interactively by mode in\n`minor-mode-map-alist'.\n\n(fn &optional ALL)" t)(autoload 'which-key-show-full-minor-mode-keymap "which-key" "Show all bindings in KEYMAP using which-key.\nKEYMAP is selected interactively by mode in\n`minor-mode-map-alist'." t)(autoload 'general-define-key "general" "The primary key definition function provided by general.el.\n\nDefine MAPS, optionally using DEFINER, in the keymap(s) corresponding to STATES\nand KEYMAPS.\n\nMAPS consists of paired keys (vectors or strings; also see\n`general-implicit-kbd') and definitions (those mentioned in `define-key''s\ndocstring and general.el's \"extended\" definitions). All pairs (when not\nignored) will be recorded and can be later displayed with\n`general-describe-keybindings'.\n\nIf DEFINER is specified, a custom key definer will be used to bind MAPS. See\ngeneral.el's documentation/README for more information.\n\nUnlike with normal key definitions functions, the keymaps in KEYMAPS should be\nquoted (this allows using the keymap name for other purposes, e.g. deferring\nkeybindings if the keymap symbol is not bound, optionally inferring the\ncorresponding major mode for a symbol by removing \"-map\" for :which-key,\neasily storing the keymap name for use with `general-describe-keybindings',\netc.). Note that general.el provides other key definer macros that do not\nrequire quoting keymaps.\n\nSTATES corresponds to the evil state(s) to bind the keys in. Non-evil users\nshould not set STATES. When STATES is non-nil, `evil-define-key*' will be\nused (the evil auxiliary keymaps corresponding STATES and KEYMAPS will be used);\notherwise `define-key' will be used (unless DEFINER is specified). KEYMAPS\ndefaults to 'global. There is also 'local, which create buffer-local\nkeybindings for both evil and non-evil keybindings. There are other special,\nuser-alterable \"shorthand\" symbols for keymaps and states (see\n`general-keymap-aliases' and `general-state-aliases').\n\nNote that STATES and KEYMAPS can either be lists or single symbols. If any\nkeymap does not exist, those keybindings will be deferred until the keymap does\nexist, so using `eval-after-load' is not necessary with this function.\n\nPREFIX corresponds to a key to prefix keys in MAPS with and defaults to none. To\nbind/unbind a key specified with PREFIX, \"\" can be specified as a key in\nMAPS (e.g. ...:prefix \"SPC\" \"\" nil... will unbind space).\n\nThe keywords in this paragraph are only useful for evil users. If\nNON-NORMAL-PREFIX is specified, this prefix will be used instead of PREFIX for\nstates in `general-non-normal-states' (e.g. the emacs and insert states). This\nargument will only have an effect if one of these states is in STATES or if\ncorresponding global keymap (e.g. `evil-insert-state-map') is in KEYMAPS.\nAlternatively, GLOBAL-PREFIX can be used with PREFIX and/or NON-NORMAL-PREFIX to\nbind keys in all states under the specified prefix. Like with NON-NORMAL-PREFIX,\nGLOBAL-PREFIX will prevent PREFIX from applying to `general-non-normal-states'.\nINFIX can be used to append a string to all of the specified prefixes. This is\npotentially useful when you are using GLOBAL-PREFIX and/or NON-NORMAL-PREFIX so\nthat you can sandwich keys in between all the prefixes and the specified keys in\nMAPS. This may be particularly useful if you are using default prefixes in a\nwrapper function/macro so that you can add to them without needing to re-specify\nall of them. If none of the other prefix keyword arguments are specified, INFIX\nwill have no effect.\n\nIf PREFIX-COMMAND or PREFIX-MAP is specified, a prefix command and/or keymap\nwill be created. PREFIX-NAME can be additionally specified to set the keymap\nmenu name/prompt. If PREFIX-COMMAND is specified, `define-prefix-command' will\nbe used. Otherwise, only a prefix keymap will be created. Previously created\nprefix commands/keymaps will never be redefined/cleared. All prefixes (including\nthe INFIX key, if specified) will then be bound to PREFIX-COMMAND or PREFIX-MAP.\nIf the user did not specify any PREFIX or manually specify any KEYMAPS, general\nwill bind all MAPS in the prefix keymap corresponding to either PREFIX-MAP or\nPREFIX-COMMAND instead of in the default keymap.\n\nPREDICATE corresponds to a predicate to check to determine whether a definition\nshould be active (e.g. \":predicate '(eobp)\"). Definitions created with a\npredicate will only be active when the predicate is true. When the predicate is\nfalse, key lookup will continue to search for a match in lower-precedence\nkeymaps.\n\nIn addition to the normal definitions supported by `define-key', general.el also\nprovides \"extended\" definitions, which are plists containing the normal\ndefinition as well as other keywords. For example, PREDICATE can be specified\nglobally or locally in an extended definition. New global (~general-define-key~)\nand local (extended definition) keywords can be added by the user. See\n`general-extended-def-keywords' and general.el's documentation/README for more\ninformation.\n\nPACKAGE is the global version of the extended definition keyword that specifies\nthe package a keymap is defined in (used for \"autoloading\" keymaps)\n\nPROPERTIES, REPEAT, and JUMP are the global versions of the extended definition\nkeywords used for adding evil command properties to commands.\n\nMAJOR-MODES, WK-MATCH-KEYS, WK-MATCH-BINDINGS, and WK-FULL-KEYS are the\ncorresponding global versions of which-key extended definition keywords. They\nwill only have an effect for extended definitions that specify :which-key or\n:wk. See the section on extended definitions in the general.el\ndocumentation/README for more information.\n\nLISPY-PLIST and WORF-PLIST are the global versions of extended definition\nkeywords that are used for each corresponding custom DEFINER.\n\n(fn &rest MAPS &key DEFINER (STATES general-default-states) (KEYMAPS general-default-keymaps KEYMAPS-SPECIFIED-P) (PREFIX general-default-prefix) (NON-NORMAL-PREFIX general-default-non-normal-prefix) (GLOBAL-PREFIX general-default-global-prefix) INFIX PREFIX-COMMAND PREFIX-MAP PREFIX-NAME PREDICATE PACKAGE PROPERTIES REPEAT JUMP MAJOR-MODES (WK-MATCH-KEYS t) (WK-MATCH-BINDING t) (WK-FULL-KEYS t) LISPY-PLIST WORF-PLIST &allow-other-keys)")(autoload 'general-emacs-define-key "general" "A wrapper for `general-define-key' that is similar to `define-key'.\nIt has a positional argument for KEYMAPS (that will not be overridden by a later\n:keymaps argument). Besides this, it acts the same as `general-define-key', and\nARGS can contain keyword arguments in addition to keybindings. This can\nbasically act as a drop-in replacement for `define-key', and unlike with\n`general-define-key', KEYMAPS does not need to be quoted.\n\n(fn KEYMAPS &rest ARGS)" nil t)(function-put 'general-emacs-define-key 'lisp-indent-function 1)(autoload 'general-evil-define-key "general" "A wrapper for `general-define-key' that is similar to `evil-define-key'.\nIt has positional arguments for STATES and KEYMAPS (that will not be overridden\nby a later :keymaps or :states argument). Besides this, it acts the same as\n`general-define-key', and ARGS can contain keyword arguments in addition to\nkeybindings. This can basically act as a drop-in replacement for\n`evil-define-key', and unlike with `general-define-key', KEYMAPS does not need\nto be quoted.\n\n(fn STATES KEYMAPS &rest ARGS)" nil t)(function-put 'general-evil-define-key 'lisp-indent-function 2)(autoload 'general-def "general" "General definer that takes a variable number of positional arguments in ARGS.\nThis macro will act as `general-define-key', `general-emacs-define-key', or\n`general-evil-define-key' based on how many of the initial arguments do not\ncorrespond to keybindings. All quoted and non-quoted lists and symbols before\nthe first string, vector, or keyword are considered to be positional arguments.\nThis means that you cannot use a function or variable for a key that starts\nimmediately after the positional arguments. If you need to do this, you should\nuse one of the definers that `general-def' dispatches to or explicitly separate\nthe positional arguments from the maps with a bogus keyword pair like\n\":start-maps t\"\n\n(fn &rest ARGS)" nil t)(function-put 'general-def 'lisp-indent-function 'defun)(autoload 'general-create-definer "general" "A helper macro to create wrappers for `general-def'.\nThis can be used to create key definers that will use a certain keymap, evil\nstate, prefix key, etc. by default. NAME is the wrapper name and DEFAULTS are\nthe default arguments. WRAPPING can also be optionally specified to use a\ndifferent definer than `general-def'. It should not be quoted.\n\n(fn NAME &rest DEFAULTS &key WRAPPING &allow-other-keys)" nil t)(function-put 'general-create-definer 'lisp-indent-function 'defun)(autoload 'general-defs "general" "A wrapper that splits into multiple `general-def's.\nEach consecutive grouping of positional argument followed by keyword/argument\npairs (having only one or the other is fine) marks the start of a new section.\nEach section corresponds to one use of `general-def'. This means that settings\nonly apply to the keybindings that directly follow.\n\nSince positional arguments can appear at any point, unqouted symbols are always\nconsidered to be positional arguments (e.g. a keymap). This means that variables\ncan never be used for keys with `general-defs'. Variables can still be used for\ndefinitions or as arguments to keywords.\n\n(fn &rest ARGS)" nil t)(function-put 'general-defs 'lisp-indent-function 'defun)(autoload 'general-unbind "general" "A wrapper for `general-def' to unbind multiple keys simultaneously.\nInsert after all keys in ARGS before passing ARGS to `general-def.' \":with\n #'func\" can optionally specified to use a custom function instead (e.g.\n `ignore').\n\n(fn &rest ARGS)" nil t)(function-put 'general-unbind 'lisp-indent-function 'defun)(autoload 'general-describe-keybindings "general" "Show all keys that have been bound with general in an org buffer.\nAny local keybindings will be shown first followed by global keybindings.\nWith a non-nil prefix ARG only show bindings in active maps.\n\n(fn &optional ARG)" t)(autoload 'general-key "general" "Act as KEY's definition in the current context.\nThis uses an extended menu item's capability of dynamically computing a\ndefinition. It is recommended over `general-simulate-key' wherever possible. See\nthe docstring of `general-simulate-key' and the readme for information about the\nbenefits and downsides of `general-key'.\n\nKEY should be a string given in `kbd' notation and should correspond to a single\ndefinition (as opposed to a sequence of commands). When STATE is specified, look\nup KEY with STATE as the current evil state. When specified, DOCSTRING will be\nthe menu item's name/description.\n\nLet can be used to bind variables around key lookup. For example:\n(general-key \"some key\"\n  :let ((some-var some-val)))\n\nSETUP and TEARDOWN can be used to run certain functions before and after key\nlookup. For example, something similar to using :state 'emacs would be:\n(general-key \"some key\"\n  :setup (evil-local-mode -1)\n  :teardown (evil-local-mode))\n\nACCEPT-DEFAULT, NO-REMAP, and POSITION are passed to `key-binding'.\n\n(fn KEY &key STATE DOCSTRING LET SETUP TEARDOWN ACCEPT-DEFAULT NO-REMAP POSITION)" nil t)(function-put 'general-key 'lisp-indent-function 1)(autoload 'general-simulate-keys "general" "Deprecated. Please use `general-simulate-key' instead.\n\n(fn KEYS &optional STATE KEYMAP (LOOKUP t) DOCSTRING NAME)" nil t)(autoload 'general-simulate-key "general" "Create and return a command that simulates KEYS in STATE and KEYMAP.\n\n`general-key' should be prefered over this whenever possible as it is simpler\nand has saner functionality in many cases because it does not rely on\n`unread-command-events' (e.g. \"C-h k\" will show the docstring of the command\nto be simulated ; see the readme for more information). The main downsides of\n`general-key' are that it cannot simulate a command followed by keys or\nsubsequent commands, and which-key does not currently work well with it when\nsimulating a prefix key/incomplete key sequence.\n\nKEYS should be a string given in `kbd' notation. It can also be a list of a\nsingle command followed by a string of the key(s) to simulate after calling that\ncommand. STATE should only be specified by evil users and should be a quoted\nevil state. KEYMAP should not be quoted. Both STATE and KEYMAP aliases are\nsupported (but they have to be set when the macro is expanded). When neither\nSTATE or KEYMAP are specified, the key(s) will be simulated in the current\ncontext.\n\nIf NAME is specified, it will replace the automatically generated function name.\nNAME should not be quoted. If DOCSTRING is specified, it will replace the\nautomatically generated docstring.\n\nNormally the generated function will look up KEY in the correct context to try\nto match a command. To prevent this lookup, LOOKUP can be specified as nil.\nGenerally, you will want to keep LOOKUP non-nil because this will allow checking\nthe evil repeat property of matched commands to determine whether or not they\nshould be recorded. See the docstring for `general--simulate-keys' for more\ninformation about LOOKUP.\n\nWhen a WHICH-KEY description is specified, it will replace the command name in\nthe which-key popup.\n\nWhen a command name is specified and that command has been remapped (i.e. [remap\ncommand] is currently bound), the remapped version will be used instead of the\noriginal command unless REMAP is specified as nil (it is true by default).\n\nThe advantages of this over a keyboard macro are as follows:\n- Prefix arguments are supported\n- The user can control the context in which the keys are simulated\n- The user can simulate both a named command and keys\n- The user can simulate an incomplete key sequence (e.g. for a keymap)\n\n(fn KEYS &key STATE KEYMAP NAME DOCSTRING (LOOKUP t) WHICH-KEY (REMAP t))" nil t)(function-put 'general-simulate-key 'lisp-indent-function 'defun)(autoload 'general-key-dispatch "general" "Create and return a command that runs FALLBACK-COMMAND or a command in MAPS.\nMAPS consists of <key> <command> pairs. If a key in MAPS is matched, the\ncorresponding command will be run. Otherwise FALLBACK-COMMAND will be run with\nthe unmatched keys. So, for example, if \"ab\" was pressed, and \"ab\" is not\none of the key sequences from MAPS, the FALLBACK-COMMAND will be run followed by\nthe simulated keypresses of \"ab\". Prefix arguments will still work regardless\nof which command is run. This is useful for binding under non-prefix keys. For\nexample, this can be used to redefine a sequence like \"cw\" or \"cow\" in evil\nbut still have \"c\" work as `evil-change'. If TIMEOUT is specified,\nFALLBACK-COMMAND will also be run in the case that the user does not press the\nnext key within the TIMEOUT (e.g. 0.5).\n\nNAME and DOCSTRING are optional keyword arguments. They can be used to replace\nthe automatically generated name and docstring for the created function. By\ndefault, `cl-gensym' is used to prevent name clashes (e.g. allows the user to\ncreate multiple different commands using `self-insert-command' as the\nFALLBACK-COMMAND without explicitly specifying NAME to manually prevent\nclashes).\n\nWhen INHERIT-KEYMAP is specified, all the keybindings from that keymap will be\ninherited in MAPS.\n\nWhen a WHICH-KEY description is specified, it will replace the command name in\nthe which-key popup.\n\nWhen command to be executed has been remapped (i.e. [remap command] is currently\nbound), the remapped version will be used instead of the original command unless\nREMAP is specified as nil (it is true by default).\n\n(fn FALLBACK-COMMAND &rest MAPS &key TIMEOUT INHERIT-KEYMAP NAME DOCSTRING WHICH-KEY (REMAP t) &allow-other-keys)" nil t)(function-put 'general-key-dispatch 'lisp-indent-function 1)(autoload 'general-predicate-dispatch "general" "\n\n(fn FALLBACK-DEF &rest DEFS &key DOCSTRING &allow-other-keys)" nil t)(function-put 'general-predicate-dispatch 'lisp-indent-function 1)(autoload 'general-translate-key "general" "Translate keys in the keymap(s) corresponding to STATES and KEYMAPS.\nSTATES should be the name of an evil state, a list of states, or nil. KEYMAPS\nshould be a symbol corresponding to the keymap to make the translations in or a\nlist of keymap names. Keymap and state aliases are supported (as well as 'local\nand 'global for KEYMAPS).\n\nMAPS corresponds to a list of translations (key replacement pairs). For example,\nspecifying \"a\" \"b\" will bind \"a\" to \"b\"'s definition in the keymap.\nSpecifying nil as a replacement will unbind a key.\n\nIf DESTRUCTIVE is non-nil, the keymap will be destructively altered without\ncreating a backup. If DESTRUCTIVE is nil, store a backup of the keymap on the\ninitial invocation, and for future invocations always look up keys in the\noriginal/backup keymap. On the other hand, if DESTRUCTIVE is non-nil, calling\nthis function multiple times with \"a\" \"b\" \"b\" \"a\", for example, would\ncontinue to swap and unswap the definitions of these keys. This means that when\nDESTRUCTIVE is non-nil, all related swaps/cycles should be done in the same\ninvocation.\n\nIf both MAPS and DESCTRUCTIVE are nil, only create the backup keymap.\n\n(fn STATES KEYMAPS &rest MAPS &key DESTRUCTIVE &allow-other-keys)")(function-put 'general-translate-key 'lisp-indent-function 'defun)(autoload 'general-swap-key "general" "Wrapper around `general-translate-key' for swapping keys.\nSTATES, KEYMAPS, and ARGS are passed to `general-translate-key'. ARGS should\nconsist of key swaps (e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\" \"a\"\nwith `general-translate-key') and optionally keyword arguments for\n`general-translate-key'.\n\n(fn STATES KEYMAPS &rest ARGS)" nil t)(function-put 'general-swap-key 'lisp-indent-function 'defun)(autoload 'general-auto-unbind-keys "general" "Advise `define-key' to automatically unbind keys when necessary.\nThis will prevent errors when a sub-sequence of a key is already bound (e.g. the\nuser attempts to bind \"SPC a\" when \"SPC\" is bound, resulting in a \"Key\nsequnce starts with non-prefix key\" error). When UNDO is non-nil, remove\nadvice.\n\n(fn &optional UNDO)")(autoload 'general-add-hook "general" "A drop-in replacement for `add-hook'.\nUnlike `add-hook', HOOKS and FUNCTIONS can be single items or lists. APPEND and\nLOCAL are passed directly to `add-hook'. When TRANSIENT is non-nil, each\nfunction will remove itself from the hook it is in after it is run once. If\nTRANSIENT is a function, call it on the return value in order to determine\nwhether to remove a function from the hook. For example, if TRANSIENT is\n#'identity, remove each function only if it returns non-nil. TRANSIENT could\nalternatively check something external and ignore the function's return value.\n\n(fn HOOKS FUNCTIONS &optional APPEND LOCAL TRANSIENT)")(autoload 'general-remove-hook "general" "A drop-in replacement for `remove-hook'.\nUnlike `remove-hook', HOOKS and FUNCTIONS can be single items or lists. LOCAL is\npassed directly to `remove-hook'.\n\n(fn HOOKS FUNCTIONS &optional LOCAL)")(autoload 'general-advice-add "general" "A drop-in replacement for `advice-add'.\nSYMBOLS, WHERE, FUNCTIONS, and PROPS correspond to the arguments for\n`advice-add'. Unlike `advice-add', SYMBOLS and FUNCTIONS can be single items or\nlists. When TRANSIENT is non-nil, each function will remove itself as advice\nafter it is run once. If TRANSIENT is a function, call it on the return value in\norder to determine whether to remove a function as advice. For example, if\nTRANSIENT is #'identity, remove each function only if it returns non-nil.\nTRANSIENT could alternatively check something external and ignore the function's\nreturn value.\n\n(fn SYMBOLS WHERE FUNCTIONS &optional PROPS TRANSIENT)")(autoload 'general-add-advice "general")(autoload 'general-advice-remove "general" "A drop-in replacement for `advice-remove'.\nUnlike `advice-remove', SYMBOLS and FUNCTIONS can be single items or lists.\n\n(fn SYMBOLS FUNCTIONS)")(autoload 'general-remove-advice "general")(autoload 'general-evil-setup "general" "Set up some basic equivalents for vim mapping functions.\nThis creates global key definition functions for the evil states.\nSpecifying SHORT-NAMES as non-nil will create non-prefixed function\naliases such as `nmap' for `general-nmap'.\n\n(fn &optional SHORT-NAMES _)")(autoload 'project-current "project" "Return the project instance in DIRECTORY, defaulting to `default-directory'.\n\nWhen no project is found in that directory, the result depends on\nthe value of MAYBE-PROMPT: if it is nil or omitted, return nil,\nelse prompt the user for the project to use.  To prompt for a\nproject, call the function specified by `project-prompter', which\nreturns the directory in which to look for the project.  If no\nproject is found in that directory, return a \"transient\"\nproject instance.\n\nThe \"transient\" project instance is a special kind of value\nwhich denotes a project rooted in that directory and includes all\nthe files under the directory except for those that match entries\nin `vc-directory-exclusion-list' or `grep-find-ignored-files'.\n\nSee the doc string of `project-find-functions' for the general form\nof the project instance object.\n\n(fn &optional MAYBE-PROMPT DIRECTORY)")(put 'project-vc-ignores 'safe-local-variable (lambda (val) (and (listp val) (not (memq nil (mapcar #'stringp val))))))(put 'project-vc-merge-submodules 'safe-local-variable #'booleanp)(put 'project-vc-include-untracked 'safe-local-variable #'booleanp)(put 'project-vc-name 'safe-local-variable #'stringp)(put 'project-vc-extra-root-markers 'safe-local-variable (lambda (val) (and (listp val) (not (memq nil (mapcar #'stringp val))))))(defvar project-prefix-map (let ((map (make-sparse-keymap))) (define-key map "!" 'project-shell-command) (define-key map "&" 'project-async-shell-command) (define-key map "f" 'project-find-file) (define-key map "F" 'project-or-external-find-file) (define-key map "b" 'project-switch-to-buffer) (define-key map "s" 'project-shell) (define-key map "d" 'project-find-dir) (define-key map "D" 'project-dired) (define-key map "v" 'project-vc-dir) (define-key map "c" 'project-compile) (define-key map "e" 'project-eshell) (define-key map "k" 'project-kill-buffers) (define-key map "p" 'project-switch-project) (define-key map "g" 'project-find-regexp) (define-key map "G" 'project-or-external-find-regexp) (define-key map "r" 'project-query-replace-regexp) (define-key map "x" 'project-execute-extended-command) (define-key map "o" 'project-any-command) (define-key map "\2" 'project-list-buffers) map) "Keymap for project commands.")(define-key ctl-x-map "p" project-prefix-map)(autoload 'project-other-window-command "project" "Run project command, displaying resultant buffer in another window.\n\nThe following commands are available:\n\n\\{project-prefix-map}\n\\{project-other-window-map}" t)(define-key ctl-x-4-map "p" #'project-other-window-command)(autoload 'project-other-frame-command "project" "Run project command, displaying resultant buffer in another frame.\n\nThe following commands are available:\n\n\\{project-prefix-map}\n\\{project-other-frame-map}" t)(define-key ctl-x-5-map "p" #'project-other-frame-command)(autoload 'project-other-tab-command "project" "Run project command, displaying resultant buffer in a new tab.\n\nThe following commands are available:\n\n\\{project-prefix-map}" t)(when (bound-and-true-p tab-prefix-map) (define-key tab-prefix-map "p" #'project-other-tab-command))(autoload 'project-find-regexp "project" "Find all matches for REGEXP in the current project's roots.\nWith \\[universal-argument] prefix, you can specify the directory\nto search in, and the file name pattern to search for.  The\npattern may use abbreviations defined in `grep-files-aliases',\ne.g. entering `ch' is equivalent to `*.[ch]'.  As whitespace\ntriggers completion when entering a pattern, including it\nrequires quoting, e.g. `\\[quoted-insert]<space>'.\n\n(fn REGEXP)" t)(autoload 'project-or-external-find-regexp "project" "Find all matches for REGEXP in the project roots or external roots.\nWith \\[universal-argument] prefix, you can specify the file name\npattern to search for.\n\n(fn REGEXP)" t)(autoload 'project-find-file "project" "Visit a file (with completion) in the current project.\n\nThe filename at point (determined by `thing-at-point'), if any,\nis available as part of \"future history\".  If none, the current\nbuffer's file name is used.\n\nIf INCLUDE-ALL is non-nil, or with prefix argument when called\ninteractively, include all files under the project root, except\nfor VCS directories listed in `vc-directory-exclusion-list'.\n\n(fn &optional INCLUDE-ALL)" t)(autoload 'project-or-external-find-file "project" "Visit a file (with completion) in the current project or external roots.\n\nThe filename at point (determined by `thing-at-point'), if any,\nis available as part of \"future history\".  If none, the current\nbuffer's file name is used.\n\nIf INCLUDE-ALL is non-nil, or with prefix argument when called\ninteractively, include all files under the project root, except\nfor VCS directories listed in `vc-directory-exclusion-list'.\n\n(fn &optional INCLUDE-ALL)" t)(autoload 'project-find-dir "project" "Start Dired in a directory inside the current project.\n\nThe current buffer's `default-directory' is available as part of\n\"future history\"." t)(autoload 'project-dired "project" "Start Dired in the current project's root." t)(autoload 'project-vc-dir "project" "Run VC-Dir in the current project's root." t)(autoload 'project-shell "project" "Start an inferior shell in the current project's root directory.\nIf a buffer already exists for running a shell in the project's root,\nswitch to it.  Otherwise, create a new shell buffer.\nWith \\[universal-argument] prefix arg, create a new inferior shell buffer even\nif one already exists." t)(autoload 'project-eshell "project" "Start Eshell in the current project's root directory.\nIf a buffer already exists for running Eshell in the project's root,\nswitch to it.  Otherwise, create a new Eshell buffer.\nWith \\[universal-argument] prefix arg, create a new Eshell buffer even\nif one already exists." t)(autoload 'project-async-shell-command "project" "Run `async-shell-command' in the current project's root directory." t)(function-put 'project-async-shell-command 'interactive-only 'async-shell-command)(autoload 'project-shell-command "project" "Run `shell-command' in the current project's root directory." t)(function-put 'project-shell-command 'interactive-only 'shell-command)(autoload 'project-search "project" "Search for REGEXP in all the files of the project.\nStops when a match is found.\nTo continue searching for the next match, use the\ncommand \\[fileloop-continue].\n\n(fn REGEXP)" t)(autoload 'project-query-replace-regexp "project" "Query-replace REGEXP in all the files of the project.\nStops when a match is found and prompts for whether to replace it.\nAt that prompt, the user must type a character saying what to do\nwith the match.  Type SPC or `y' to replace the match,\nDEL or `n' to skip and go to the next match.  For more directions,\ntype \\[help-command] at that time.\nIf you exit the `query-replace', you can later continue the\n`query-replace' loop using the command \\[fileloop-continue].\n\n(fn FROM TO)" t)(autoload 'project-compile "project" "Run `compile' in the project root." t)(function-put 'project-compile 'interactive-only 'compile)(autoload 'project-switch-to-buffer "project" "Display buffer BUFFER-OR-NAME in the selected window.\nWhen called interactively, prompts for a buffer belonging to the\ncurrent project.  Two buffers belong to the same project if their\nproject instances, as reported by `project-current' in each\nbuffer, are identical.\n\n(fn BUFFER-OR-NAME)" t)(autoload 'project-display-buffer "project" "Display BUFFER-OR-NAME in some window, without selecting it.\nWhen called interactively, prompts for a buffer belonging to the\ncurrent project.  Two buffers belong to the same project if their\nproject instances, as reported by `project-current' in each\nbuffer, are identical.\n\nThis function uses `display-buffer' as a subroutine, which see\nfor how it is determined where the buffer will be displayed.\n\n(fn BUFFER-OR-NAME)" t)(autoload 'project-display-buffer-other-frame "project" "Display BUFFER-OR-NAME preferably in another frame.\nWhen called interactively, prompts for a buffer belonging to the\ncurrent project.  Two buffers belong to the same project if their\nproject instances, as reported by `project-current' in each\nbuffer, are identical.\n\nThis function uses `display-buffer-other-frame' as a subroutine,\nwhich see for how it is determined where the buffer will be\ndisplayed.\n\n(fn BUFFER-OR-NAME)" t)(autoload 'project-list-buffers "project" "Display a list of project buffers.\nThe list is displayed in a buffer named \"*Buffer List*\".\n\nBy default, all project buffers are listed except those whose names\nstart with a space (which are for internal use).  With prefix argument\nARG, show only buffers that are visiting files.\n\n(fn &optional ARG)" t)(put 'project-kill-buffers-display-buffer-list 'safe-local-variable #'booleanp)(autoload 'project-kill-buffers "project" "Kill the buffers belonging to the current project.\nTwo buffers belong to the same project if their project\ninstances, as reported by `project-current' in each buffer, are\nidentical.  Only the buffers that match a condition in\n`project-kill-buffer-conditions' will be killed.  If NO-CONFIRM\nis non-nil, the command will not ask the user for confirmation.\nNO-CONFIRM is always nil when the command is invoked\ninteractively.\n\nAlso see the `project-kill-buffers-display-buffer-list' variable.\n\n(fn &optional NO-CONFIRM)" t)(autoload 'project-remember-project "project" "Add project PR to the front of the project list.\nSave the result in `project-list-file' if the list of projects\nhas changed, and NO-WRITE is nil.\n\n(fn PR &optional NO-WRITE)")(autoload 'project-forget-project "project" "Remove directory PROJECT-ROOT from the project list.\nPROJECT-ROOT is the root directory of a known project listed in\nthe project list.\n\n(fn PROJECT-ROOT)" t)(autoload 'project-known-project-roots "project" "Return the list of root directories of all known projects.")(autoload 'project-execute-extended-command "project" "Execute an extended command in project root." t)(function-put 'project-execute-extended-command 'interactive-only 'command-execute)(autoload 'project-any-command "project" "Run the next command in the current project.\n\nIf the command name starts with `project-', or its symbol has\nproperty `project-aware', it gets passed the project to use\nwith the variable `project-current-directory-override'.\nOtherwise, `default-directory' is temporarily set to the current\nproject's root.\n\nIf OVERRIDING-MAP is non-nil, it will be used as\n`overriding-local-map' to provide shorter bindings from that map\nwhich will take priority over the global ones.\n\n(fn &optional OVERRIDING-MAP PROMPT-FORMAT)" t)(autoload 'project-prefix-or-any-command "project" "Run the next command in the current project.\nWorks like `project-any-command', but also mixes in the shorter\nbindings from `project-prefix-map'." t)(autoload 'project-switch-project "project" "\"Switch\" to another project by running an Emacs command.\nThe available commands are presented as a dispatch menu\nmade from `project-switch-commands'.\n\nWhen called in a program, it will use the project corresponding\nto directory DIR.\n\n(fn DIR)" t)(autoload 'project-uniquify-dirname-transform "project" "Uniquify name of directory DIRNAME using `project-name', if in a project.\n\nIf you set `uniquify-dirname-transform' to this function,\nslash-separated components from `project-name' will be appended to\nthe buffer's directory name when buffers from two different projects\nwould otherwise have the same name.\n\n(fn DIRNAME)")(defvar project-mode-line nil "Whether to show current project name and Project menu on the mode line.\nThis feature requires the presence of the following item in\n`mode-line-format': `(project-mode-line project-mode-line-format)'; it\nis part of the default mode line beginning with Emacs 30.")(autoload 'xref-find-backend "xref")(define-obsolete-function-alias 'xref-pop-marker-stack #'xref-go-back "29.1")(autoload 'xref-go-back "xref" "Go back to the previous position in xref history.\nTo undo, use \\[xref-go-forward]." t)(autoload 'xref-go-forward "xref" "Go to the point where a previous \\[xref-go-back] was invoked." t)(autoload 'xref-marker-stack-empty-p "xref" "Whether the xref back-history is empty.")(autoload 'xref-forward-history-empty-p "xref" "Whether the xref forward-history is empty.")(autoload 'xref-show-xrefs "xref" "Display some Xref values produced by FETCHER using DISPLAY-ACTION.\nThe meanings of both arguments are the same as documented in\n`xref-show-xrefs-function'.\n\n(fn FETCHER DISPLAY-ACTION)")(autoload 'xref-find-definitions "xref" "Find the definition of the identifier at point.\nWith prefix argument or when there's no identifier at point,\nprompt for it.\n\nIf sufficient information is available to determine a unique\ndefinition for IDENTIFIER, display it in the selected window.\nOtherwise, display the list of the possible definitions in a\nbuffer where the user can select from the list.\n\nUse \\[xref-go-back] to return back to where you invoked this command.\n\n(fn IDENTIFIER)" t)(autoload 'xref-find-definitions-other-window "xref" "Like `xref-find-definitions' but switch to the other window.\n\n(fn IDENTIFIER)" t)(autoload 'xref-find-definitions-other-frame "xref" "Like `xref-find-definitions' but switch to the other frame.\n\n(fn IDENTIFIER)" t)(autoload 'xref-find-references "xref" "Find references to the identifier at point.\nThis command might prompt for the identifier as needed, perhaps\noffering the symbol at point as the default.\nWith prefix argument, or if `xref-prompt-for-identifier' is t,\nalways prompt for the identifier.  If `xref-prompt-for-identifier'\nis nil, prompt only if there's no usable symbol at point.\n\n(fn IDENTIFIER)" t)(autoload 'xref-find-definitions-at-mouse "xref" "Find the definition of identifier at or around mouse click.\nThis command is intended to be bound to a mouse event.\n\n(fn EVENT)" t)(autoload 'xref-find-references-at-mouse "xref" "Find references to the identifier at or around mouse click.\nThis command is intended to be bound to a mouse event.\n\n(fn EVENT)" t)(autoload 'xref-find-apropos "xref" "Find all meaningful symbols that match PATTERN.\nThe argument has the same meaning as in `apropos'.\nSee `tags-apropos-additional-actions' for how to augment the\noutput of this command when the backend is etags.\n\n(fn PATTERN)" t)(define-key esc-map "." #'xref-find-definitions)(define-key esc-map "," #'xref-go-back)(define-key esc-map [67108908] #'xref-go-forward)(define-key esc-map "?" #'xref-find-references)(define-key esc-map [67108910] #'xref-find-apropos)(define-key ctl-x-4-map "." #'xref-find-definitions-other-window)(define-key ctl-x-5-map "." #'xref-find-definitions-other-frame)(autoload 'xref-references-in-directory "xref" "Find all references to SYMBOL in directory DIR.\nReturn a list of xref values.\n\nThis function uses the Semantic Symbol Reference API, see\n`semantic-symref-tool-alist' for details on which tools are used,\nand when.\n\n(fn SYMBOL DIR)")(autoload 'xref-matches-in-directory "xref" "Find all matches for REGEXP in directory DIR.\nReturn a list of xref values.\nOnly files matching some of FILES and none of IGNORES are searched.\nFILES is a string with glob patterns separated by spaces.\nIGNORES is a list of glob patterns for files to ignore.\n\n(fn REGEXP FILES DIR IGNORES)")(autoload 'xref-matches-in-files "xref" "Find all matches for REGEXP in FILES.\nReturn a list of xref values.\nFILES must be a list of absolute file names.\n\nSee `xref-search-program' and `xref-search-program-alist' for how\nto control which program to use when looking for matches.\n\n(fn REGEXP FILES)")(autoload 'ws-butler-mode "ws-butler" "White space cleanup, without obtrusive white space removal.\n\nWhitespaces at EOL and EOF are trimmed upon file save, and only\nfor lines modified by you.\n\nThis is a minor mode.  If called interactively, toggle the\n`Ws-Butler mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `ws-butler-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'ws-butler-global-mode 'globalized-minor-mode t)(defvar ws-butler-global-mode nil "Non-nil if Ws-Butler-Global mode is enabled.\nSee the `ws-butler-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `ws-butler-global-mode'.")(autoload 'ws-butler-global-mode "ws-butler" "Toggle Ws-Butler mode in all buffers.\nWith prefix ARG, enable Ws-Butler-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nWs-Butler mode is enabled in all buffers where `(lambda nil (unless\n(apply #'derived-mode-p ws-butler-global-exempt-modes)\n(ws-butler-mode)))' would do it.\n\nSee `ws-butler-mode' for more information on Ws-Butler mode.\n\n(fn &optional ARG)" t)(autoload 'sp-cheat-sheet "smartparens" "Generate a cheat sheet of all the smartparens interactive functions.\n\nWithout a prefix argument, print only the short documentation and examples.\n\nWith non-nil prefix argument ARG, show the full documentation for each function.\n\nYou can follow the links to the function or variable help page.\nTo get back to the full list, use \\[help-go-back].\n\nYou can use `beginning-of-defun' and `end-of-defun' to jump to\nthe previous/next entry.\n\nExamples are fontified using the `font-lock-string-face' for\nbetter orientation.\n\n(fn &optional ARG)" t)(defvar smartparens-mode-map (make-sparse-keymap) "Keymap used for `smartparens-mode'.")(autoload 'sp-use-paredit-bindings "smartparens" "Initiate `smartparens-mode-map' with `sp-paredit-bindings'." t)(autoload 'sp-use-smartparens-bindings "smartparens" "Initiate `smartparens-mode-map' with `sp-smartparens-bindings'." t)(autoload 'smartparens-mode "smartparens" "Toggle smartparens mode.\n\nYou can enable pre-set bindings by customizing\n`sp-base-key-bindings' variable.  The current content of\n`smartparens-mode-map' is:\n\n \\{smartparens-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Smartparens mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `smartparens-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'smartparens-strict-mode "smartparens" "Toggle the strict smartparens mode.\n\nWhen strict mode is active, `delete-char', `kill-word' and their\nbackward variants will skip over the pair delimiters in order to\nkeep the structure always valid (the same way as `paredit-mode'\ndoes).  This is accomplished by remapping them to\n`sp-delete-char' and `sp-kill-word'.  There is also function\n`sp-kill-symbol' that deletes symbols instead of words, otherwise\nworking exactly the same (it is not bound to any key by default).\n\nWhen strict mode is active, this is indicated with \"/s\"\nafter the smartparens indicator in the mode list.\n\nThis is a minor mode.  If called interactively, toggle the\n`Smartparens-Strict mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `smartparens-strict-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'smartparens-global-strict-mode 'globalized-minor-mode t)(defvar smartparens-global-strict-mode nil "Non-nil if Smartparens-Global-Strict mode is enabled.\nSee the `smartparens-global-strict-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `smartparens-global-strict-mode'.")(autoload 'smartparens-global-strict-mode "smartparens" "Toggle Smartparens-Strict mode in all buffers.\nWith prefix ARG, enable Smartparens-Global-Strict mode if ARG is\npositive; otherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nSmartparens-Strict mode is enabled in all buffers where\n`turn-on-smartparens-strict-mode' would do it.\n\nSee `smartparens-strict-mode' for more information on\nSmartparens-Strict mode.\n\n(fn &optional ARG)" t)(autoload 'turn-on-smartparens-strict-mode "smartparens" "Turn on `smartparens-strict-mode'." t)(autoload 'turn-off-smartparens-strict-mode "smartparens" "Turn off `smartparens-strict-mode'." t)(put 'smartparens-global-mode 'globalized-minor-mode t)(defvar smartparens-global-mode nil "Non-nil if Smartparens-Global mode is enabled.\nSee the `smartparens-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `smartparens-global-mode'.")(autoload 'smartparens-global-mode "smartparens" "Toggle Smartparens mode in all buffers.\nWith prefix ARG, enable Smartparens-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nSmartparens mode is enabled in all buffers where\n`turn-on-smartparens-mode' would do it.\n\nSee `smartparens-mode' for more information on Smartparens mode.\n\n(fn &optional ARG)" t)(autoload 'turn-on-smartparens-mode "smartparens" "Turn on `smartparens-mode'.\n\nThis function is used to turn on `smartparens-global-mode'.\n\nBy default `smartparens-global-mode' ignores buffers with\n`mode-class' set to special, but only if they are also not comint\nbuffers.\n\nAdditionally, buffers on `sp-ignore-modes-list' are ignored.\n\nYou can still turn on smartparens in these mode manually (or\nin mode's startup-hook etc.) by calling `smartparens-mode'." t)(autoload 'turn-off-smartparens-mode "smartparens" "Turn off `smartparens-mode'." t)(autoload 'show-smartparens-mode "smartparens" "Toggle visualization of matching pairs.  When enabled, any\n\nmatching pair is highlighted after `sp-show-pair-delay' seconds\nof Emacs idle time if the point is immediately in front or after\na pair.  This mode works similarly to `show-paren-mode', but\nsupport custom pairs.\n\nThis is a minor mode.  If called interactively, toggle the\n`Show-Smartparens mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `show-smartparens-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'show-smartparens-global-mode 'globalized-minor-mode t)(defvar show-smartparens-global-mode nil "Non-nil if Show-Smartparens-Global mode is enabled.\nSee the `show-smartparens-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `show-smartparens-global-mode'.")(autoload 'show-smartparens-global-mode "smartparens" "Toggle Show-Smartparens mode in all buffers.\nWith prefix ARG, enable Show-Smartparens-Global mode if ARG is\npositive; otherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nShow-Smartparens mode is enabled in all buffers where\n`turn-on-show-smartparens-mode' would do it.\n\nSee `show-smartparens-mode' for more information on Show-Smartparens\nmode.\n\n(fn &optional ARG)" t)(autoload 'turn-on-show-smartparens-mode "smartparens" "Turn on `show-smartparens-mode'." t)(autoload 'turn-off-show-smartparens-mode "smartparens" "Turn off `show-smartparens-mode'." t)(autoload 'helpful-function "helpful" "Show help for function named SYMBOL.\n\nSee also `helpful-macro', `helpful-command' and `helpful-callable'.\n\n(fn SYMBOL)" t)(autoload 'helpful-command "helpful" "Show help for interactive function named SYMBOL.\n\nSee also `helpful-function'.\n\n(fn SYMBOL)" t)(autoload 'helpful-key "helpful" "Show help for interactive command bound to KEY-SEQUENCE.\n\n(fn KEY-SEQUENCE)" t)(autoload 'helpful-macro "helpful" "Show help for macro named SYMBOL.\n\n(fn SYMBOL)" t)(autoload 'helpful-callable "helpful" "Show help for function, macro or special form named SYMBOL.\n\nSee also `helpful-macro', `helpful-function' and `helpful-command'.\n\n(fn SYMBOL)" t)(autoload 'helpful-symbol "helpful" "Show help for SYMBOL, a variable, function, macro, or face.\n\nSee also `helpful-callable' and `helpful-variable'.\n\n(fn SYMBOL)" t)(autoload 'helpful-variable "helpful" "Show help for variable named SYMBOL.\n\n(fn SYMBOL)" t)(autoload 'helpful-at-point "helpful" "Show help for the symbol at point." t)(autoload 'elisp-refs-function "elisp-refs" "Display all the references to function SYMBOL, in all loaded\nelisp files.\n\nIf called with a prefix, prompt for a directory to limit the search.\n\nThis searches for functions, not macros. For that, see\n`elisp-refs-macro'.\n\n(fn SYMBOL &optional PATH-PREFIX)" t)(autoload 'elisp-refs-macro "elisp-refs" "Display all the references to macro SYMBOL, in all loaded\nelisp files.\n\nIf called with a prefix, prompt for a directory to limit the search.\n\nThis searches for macros, not functions. For that, see\n`elisp-refs-function'.\n\n(fn SYMBOL &optional PATH-PREFIX)" t)(autoload 'elisp-refs-special "elisp-refs" "Display all the references to special form SYMBOL, in all loaded\nelisp files.\n\nIf called with a prefix, prompt for a directory to limit the search.\n\n(fn SYMBOL &optional PATH-PREFIX)" t)(autoload 'elisp-refs-variable "elisp-refs" "Display all the references to variable SYMBOL, in all loaded\nelisp files.\n\nIf called with a prefix, prompt for a directory to limit the search.\n\n(fn SYMBOL &optional PATH-PREFIX)" t)(autoload 'elisp-refs-symbol "elisp-refs" "Display all the references to SYMBOL in all loaded elisp files.\n\nIf called with a prefix, prompt for a directory to limit the\nsearch.\n\n(fn SYMBOL &optional PATH-PREFIX)" t)(autoload 'dtrt-indent-mode "dtrt-indent" "Toggle dtrt-indent mode.\n\nWith no argument, this command toggles the mode.  Non-null prefix\nargument turns on the mode.  Null prefix argument turns off the\nmode.\n\nWhen dtrt-indent mode is enabled, the proper indentation offset\nand `indent-tabs-mode' will be guessed for newly opened files and\nadjusted transparently.\n\nThis is a minor mode.  If called interactively, toggle the\n`Dtrt-Indent mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `dtrt-indent-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'dtrt-indent-global-mode 'globalized-minor-mode t)(defvar dtrt-indent-global-mode nil "Non-nil if Dtrt-Indent-Global mode is enabled.\nSee the `dtrt-indent-global-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `dtrt-indent-global-mode'.")(autoload 'dtrt-indent-global-mode "dtrt-indent" "Toggle Dtrt-Indent mode in all buffers.\nWith prefix ARG, enable Dtrt-Indent-Global mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nDtrt-Indent mode is enabled in all buffers where `(lambda nil (when\n(derived-mode-p 'prog-mode 'text-mode 'javascript-mode)\n(dtrt-indent-mode)))' would do it.\n\nSee `dtrt-indent-mode' for more information on Dtrt-Indent mode.\n\n(fn &optional ARG)" t)(defvar dtrt-indent-mode nil "Toggle adaptive indentation mode.\nSetting this variable directly does not take effect;\nuse either \\[customize] or the function `dtrt-indent-mode'.")(autoload 'better-jumper-set-jump "better-jumper" "Set jump point at POS.\nPOS defaults to point.\n\n(fn &optional POS)" t)(autoload 'better-jumper-jump-backward "better-jumper" "Jump backward COUNT positions to previous location in jump list.\nIf COUNT is nil then defaults to 1.\n\n(fn &optional COUNT)" t)(autoload 'better-jumper-jump-forward "better-jumper" "Jump forward COUNT positions to location in jump list.\nIf COUNT is nil then defaults to 1.\n\n(fn &optional COUNT)" t)(autoload 'better-jumper-jump-newest "better-jumper" "Jump forward to newest entry in jump list." t)(autoload 'better-jumper-clear-jumps "better-jumper" "Clears jump list for WINDOW-OR-BUFFER.\nWINDOW-OR-BUFFER should be either a window or buffer depending on the\ncontext and will default to current context if not provided.\n\n(fn &optional WINDOW-OR-BUFFER)" t)(autoload 'better-jumper-get-jumps "better-jumper" "Get jumps for WINDOW-OR-BUFFER.\nWINDOW-OR-BUFFER should be either a window or buffer depending on the\ncontext and will default to current context if not provided.\n\n(fn &optional WINDOW-OR-BUFFER)")(autoload 'better-jumper-set-jumps "better-jumper" "Set jumps to JUMPS for WINDOW-OR-BUFFER.\nWINDOW-OR-BUFFER should be either a window or buffer depending on the\ncontext and will default to current context if not provided.\n\n(fn JUMPS &optional WINDOW-OR-BUFFER)")(autoload 'turn-on-better-jumper-mode "better-jumper" "Enable better-jumper-mode in the current buffer.")(autoload 'turn-off-better-jumper-mode "better-jumper" "Disable `better-jumper-local-mode' in the current buffer.")(autoload 'better-jumper-local-mode "better-jumper" "better-jumper minor mode.\n\nThis is a minor mode.  If called interactively, toggle the\n`better-jumper-Local mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `better-jumper-local-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'better-jumper-mode 'globalized-minor-mode t)(defvar better-jumper-mode nil "Non-nil if Better-Jumper mode is enabled.\nSee the `better-jumper-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `better-jumper-mode'.")(autoload 'better-jumper-mode "better-jumper" "Toggle Better-Jumper-Local mode in all buffers.\nWith prefix ARG, enable Better-Jumper mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nBetter-Jumper-Local mode is enabled in all buffers where\n`turn-on-better-jumper-mode' would do it.\n\nSee `better-jumper-local-mode' for more information on\nBetter-Jumper-Local mode.\n\n(fn &optional ARG)" t)(autoload 'restart-emacs-handle-command-line-args "restart-emacs" "Handle the --restart-emacs-desktop command line argument.\n\nThe value of the argument is the desktop file from which the frames should be\nrestored.  IGNORED are ignored.\n\n(fn &rest IGNORED)")(add-to-list 'command-switch-alist '("--restart-emacs-desktop" . restart-emacs-handle-command-line-args))(autoload 'restart-emacs "restart-emacs" "Restart Emacs.\n\nWhen called interactively ARGS is interpreted as follows\n\n- with a single `universal-argument' (`C-u') Emacs is restarted\n  with `--debug-init' flag\n- with two `universal-argument' (`C-u') Emacs is restarted with\n  `-Q' flag\n- with three `universal-argument' (`C-u') the user prompted for\n  the arguments\n\nWhen called non-interactively ARGS should be a list of arguments\nwith which Emacs should be restarted.\n\n(fn &optional ARGS)" t)(autoload 'restart-emacs-start-new-emacs "restart-emacs" "Start a new instance of Emacs.\n\nWhen called interactively ARGS is interpreted as follows\n\n- with a single `universal-argument' (`C-u') the new Emacs is started\n  with `--debug-init' flag\n- with two `universal-argument' (`C-u') the new Emacs is started with\n  `-Q' flag\n- with three `universal-argument' (`C-u') the user prompted for\n  the arguments\n\nWhen called non-interactively ARGS should be a list of arguments\nwith which the new Emacs should be started.\n\n(fn &optional ARGS)" t)(autoload 'rainbow-delimiters-mode "rainbow-delimiters" "Highlight nested parentheses, brackets, and braces according to their depth.\n\nThis is a minor mode.  If called interactively, toggle the\n`Rainbow-Delimiters mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `rainbow-delimiters-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'rainbow-delimiters-mode-enable "rainbow-delimiters" "Enable `rainbow-delimiters-mode'.")(autoload 'rainbow-delimiters-mode-disable "rainbow-delimiters" "Disable `rainbow-delimiters-mode'.")(autoload 'highlight-numbers-mode "highlight-numbers" "Minor mode for highlighting numeric literals in source code.\n\nToggle Highlight Numbers mode on or off.\n\nWith a prefix argument ARG, enable Highlight Numbers mode if ARG is\npositive, and disable it otherwise. If called from Lisp, enable\nthe mode if ARG is omitted or nil, and toggle it if ARG is `toggle'.\n\n(fn &optional ARG)" t)(autoload 'hide-mode-line-mode "hide-mode-line" "Minor mode to hide the mode-line in the current buffer.\n\nThis is a minor mode.  If called interactively, toggle the\n`Hide-Mode-Line mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `hide-mode-line-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(put 'global-hide-mode-line-mode 'globalized-minor-mode t)(defvar global-hide-mode-line-mode nil "Non-nil if Global Hide-Mode-Line mode is enabled.\nSee the `global-hide-mode-line-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `global-hide-mode-line-mode'.")(autoload 'global-hide-mode-line-mode "hide-mode-line" "Toggle Hide-Mode-Line mode in all buffers.\nWith prefix ARG, enable Global Hide-Mode-Line mode if ARG is positive;\notherwise, disable it.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.\nEnable the mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nHide-Mode-Line mode is enabled in all buffers where\n`turn-on-hide-mode-line-mode' would do it.\n\nSee `hide-mode-line-mode' for more information on Hide-Mode-Line\nmode.\n\n(fn &optional ARG)" t)(autoload 'turn-on-hide-mode-line-mode "hide-mode-line" "Turn on `hide-mode-line-mode'.\nUnless in `fundamental-mode' or `hide-mode-line-excluded-modes'.")(autoload 'turn-off-hide-mode-line-mode "hide-mode-line" "Turn off `hide-mode-line-mode'.")(autoload 'straight-remove-unused-repos "straight" "Remove unused repositories from the repos and build directories.\nA repo is considered \"unused\" if it was not explicitly requested via\n`straight-use-package' during the current Emacs session.\nIf FORCE is non-nil do not prompt before deleting repos.\n\n(fn &optional FORCE)" t)(autoload 'straight-get-recipe "straight" "Interactively select a recipe from one of the recipe repositories.\nAll recipe repositories in `straight-recipe-repositories' will\nfirst be cloned. After the recipe is selected, it will be copied\nto the kill ring. With a prefix argument, first prompt for a\nrecipe repository to search. Only that repository will be\ncloned.\n\nFrom Lisp code, SOURCES should be a subset of the symbols in\n`straight-recipe-repositories'. Only those recipe repositories\nare cloned and searched. If it is nil or omitted, then the value\nof `straight-recipe-repositories' is used. If SOURCES is the\nsymbol `interactive', then the user is prompted to select a\nrecipe repository, and a list containing that recipe repository\nis used for the value of SOURCES. ACTION may be `copy' (copy\nrecipe to the kill ring), `insert' (insert at point), or nil (no\naction, just return it).\n\nOptional arg FILTER must be a unary function.\nIt takes a package name as its sole argument.\nIf it returns nil the candidate is excluded.\n\n(fn &optional SOURCES ACTION FILTER)" t)(autoload 'straight-visit-package-website "straight" "Visit the package RECIPE's website.\n\n(fn RECIPE)" t)(autoload 'straight-visit-package "straight" "Open PACKAGE's local repository directory.\nWhen BUILD is non-nil visit PACKAGE's build directory.\n\n(fn PACKAGE &optional BUILD)" t)(autoload 'straight-use-package "straight" "Register, clone, build, and activate a package and its dependencies.\nThis is the main entry point to the functionality of straight.el.\n\nMELPA-STYLE-RECIPE is either a symbol naming a package, or a list\nwhose car is a symbol naming a package and whose cdr is a\nproperty list containing e.g. `:type', `:local-repo', `:files',\nand VC backend specific keywords.\n\nFirst, the package recipe is registered with straight.el. If\nNO-CLONE is a function, then it is called with two arguments: the\npackage name as a string, and a boolean value indicating whether\nthe local repository for the package is available. In that case,\nthe return value of the function is used as the value of NO-CLONE\ninstead. In any case, if NO-CLONE is non-nil, then processing\nstops here.\n\nOtherwise, the repository is cloned, if it is missing. If\nNO-BUILD is a function, then it is called with one argument: the\npackage name as a string. In that case, the return value of the\nfunction is used as the value of NO-BUILD instead. In any case,\nif NO-BUILD is non-nil, then processing halts here. Otherwise,\nthe package is built and activated. Note that if the package\nrecipe has a nil `:build' entry, then NO-BUILD is ignored\nand processing always stops before building and activation\noccurs.\n\nCAUSE is a string explaining the reason why\n`straight-use-package' has been called. It is for internal use\nonly, and is used to construct progress messages. INTERACTIVE is\nnon-nil if the function has been called interactively. It is for\ninternal use only, and is used to determine whether to show a\nhint about how to install the package permanently.\n\nReturn non-nil when package is initially installed, nil otherwise.\n\n(fn MELPA-STYLE-RECIPE &optional NO-CLONE NO-BUILD CAUSE INTERACTIVE)" t)(autoload 'straight-register-package "straight" "Register a package without cloning, building, or activating it.\nThis function is equivalent to calling `straight-use-package'\nwith a non-nil argument for NO-CLONE. It is provided for\nconvenience. MELPA-STYLE-RECIPE is as for\n`straight-use-package'.\n\n(fn MELPA-STYLE-RECIPE)")(autoload 'straight-use-package-no-build "straight" "Register and clone a package without building it.\nThis function is equivalent to calling `straight-use-package'\nwith nil for NO-CLONE but a non-nil argument for NO-BUILD. It is\nprovided for convenience. MELPA-STYLE-RECIPE is as for\n`straight-use-package'.\n\n(fn MELPA-STYLE-RECIPE)")(autoload 'straight-use-package-lazy "straight" "Register, build, and activate a package if it is already cloned.\nThis function is equivalent to calling `straight-use-package'\nwith symbol `lazy' for NO-CLONE. It is provided for convenience.\nMELPA-STYLE-RECIPE is as for `straight-use-package'.\n\n(fn MELPA-STYLE-RECIPE)")(autoload 'straight-use-recipes "straight" "Register a recipe repository using MELPA-STYLE-RECIPE.\nThis registers the recipe and builds it if it is already cloned.\nNote that you probably want the recipe for a recipe repository to\ninclude a nil `:build' property, to unconditionally\ninhibit the build phase.\n\nThis function also adds the recipe repository to\n`straight-recipe-repositories', at the end of the list.\n\n(fn MELPA-STYLE-RECIPE)")(autoload 'straight-override-recipe "straight" "Register MELPA-STYLE-RECIPE as a recipe override.\nThis puts it in `straight-recipe-overrides', depending on the\nvalue of `straight-current-profile'.\n\n(fn MELPA-STYLE-RECIPE)")(autoload 'straight-check-package "straight" "Rebuild a PACKAGE if it has been modified.\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'. See also `straight-rebuild-package' and\n`straight-check-all'.\n\n(fn PACKAGE)" t)(autoload 'straight-check-all "straight" "Rebuild any packages that have been modified.\nSee also `straight-rebuild-all' and `straight-check-package'.\nThis function should not be called during init." t)(autoload 'straight-rebuild-package "straight" "Rebuild a PACKAGE.\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'. With prefix argument RECURSIVE, rebuild\nall dependencies as well. See also `straight-check-package' and\n`straight-rebuild-all'.\n\n(fn PACKAGE &optional RECURSIVE)" t)(autoload 'straight-rebuild-all "straight" "Rebuild all packages.\nSee also `straight-check-all' and `straight-rebuild-package'." t)(autoload 'straight-prune-build-cache "straight" "Prune the build cache.\nThis means that only packages that were built in the last init\nrun and subsequent interactive session will remain; other\npackages will have their build mtime information and any cached\nautoloads discarded.")(autoload 'straight-prune-build-directory "straight" "Prune the build directory.\nThis means that only packages that were built in the last init\nrun and subsequent interactive session will remain; other\npackages will have their build directories deleted.")(autoload 'straight-prune-build "straight" "Prune the build cache and build directory.\nThis means that only packages that were built in the last init\nrun and subsequent interactive session will remain; other\npackages will have their build mtime information discarded and\ntheir build directories deleted." t)(autoload 'straight-normalize-package "straight" "Normalize a PACKAGE's local repository to its recipe's configuration.\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'.\n\n(fn PACKAGE)" t)(autoload 'straight-normalize-all "straight" "Normalize all packages. See `straight-normalize-package'.\nReturn a list of recipes for packages that were not successfully\nnormalized. If multiple packages come from the same local\nrepository, only one is normalized.\n\nPREDICATE, if provided, filters the packages that are normalized.\nIt is called with the package name as a string, and should return\nnon-nil if the package should actually be normalized.\n\n(fn &optional PREDICATE)" t)(autoload 'straight-fetch-package "straight" "Try to fetch a PACKAGE from the primary remote.\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'. With prefix argument FROM-UPSTREAM,\nfetch not just from primary remote but also from upstream (for\nforked packages).\n\n(fn PACKAGE &optional FROM-UPSTREAM)" t)(autoload 'straight-fetch-package-and-deps "straight" "Try to fetch a PACKAGE and its (transitive) dependencies.\nPACKAGE, its dependencies, their dependencies, etc. are fetched\nfrom their primary remotes.\n\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'. With prefix argument FROM-UPSTREAM,\nfetch not just from primary remote but also from upstream (for\nforked packages).\n\n(fn PACKAGE &optional FROM-UPSTREAM)" t)(autoload 'straight-fetch-all "straight" "Try to fetch all packages from their primary remotes.\nWith prefix argument FROM-UPSTREAM, fetch not just from primary\nremotes but also from upstreams (for forked packages).\n\nReturn a list of recipes for packages that were not successfully\nfetched. If multiple packages come from the same local\nrepository, only one is fetched.\n\nPREDICATE, if provided, filters the packages that are fetched. It\nis called with the package name as a string, and should return\nnon-nil if the package should actually be fetched.\n\n(fn &optional FROM-UPSTREAM PREDICATE)" t)(autoload 'straight-merge-package "straight" "Try to merge a PACKAGE from the primary remote.\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'. With prefix argument FROM-UPSTREAM,\nmerge not just from primary remote but also from upstream (for\nforked packages).\n\n(fn PACKAGE &optional FROM-UPSTREAM)" t)(autoload 'straight-merge-package-and-deps "straight" "Try to merge a PACKAGE and its (transitive) dependencies.\nPACKAGE, its dependencies, their dependencies, etc. are merged\nfrom their primary remotes.\n\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'. With prefix argument FROM-UPSTREAM,\nmerge not just from primary remote but also from upstream (for\nforked packages).\n\n(fn PACKAGE &optional FROM-UPSTREAM)" t)(autoload 'straight-merge-all "straight" "Try to merge all packages from their primary remotes.\nWith prefix argument FROM-UPSTREAM, merge not just from primary\nremotes but also from upstreams (for forked packages).\n\nReturn a list of recipes for packages that were not successfully\nmerged. If multiple packages come from the same local\nrepository, only one is merged.\n\nPREDICATE, if provided, filters the packages that are merged. It\nis called with the package name as a string, and should return\nnon-nil if the package should actually be merged.\n\n(fn &optional FROM-UPSTREAM PREDICATE)" t)(autoload 'straight-pull-package "straight" "Try to pull a PACKAGE from the primary remote.\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'. With prefix argument FROM-UPSTREAM, pull\nnot just from primary remote but also from upstream (for forked\npackages).\n\n(fn PACKAGE &optional FROM-UPSTREAM)" t)(autoload 'straight-pull-package-and-deps "straight" "Try to pull a PACKAGE and its (transitive) dependencies.\nPACKAGE, its dependencies, their dependencies, etc. are pulled\nfrom their primary remotes.\n\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'. With prefix argument FROM-UPSTREAM,\npull not just from primary remote but also from upstream (for\nforked packages).\n\n(fn PACKAGE &optional FROM-UPSTREAM)" t)(autoload 'straight-pull-all "straight" "Try to pull all packages from their primary remotes.\nWith prefix argument FROM-UPSTREAM, pull not just from primary\nremotes but also from upstreams (for forked packages).\n\nReturn a list of recipes for packages that were not successfully\npulled. If multiple packages come from the same local repository,\nonly one is pulled.\n\nPREDICATE, if provided, filters the packages that are pulled. It\nis called with the package name as a string, and should return\nnon-nil if the package should actually be pulled.\n\n(fn &optional FROM-UPSTREAM PREDICATE)" t)(autoload 'straight-push-package "straight" "Push a PACKAGE to its primary remote, if necessary.\nPACKAGE is a string naming a package. Interactively, select\nPACKAGE from the known packages in the current Emacs session\nusing `completing-read'.\n\n(fn PACKAGE)" t)(autoload 'straight-push-all "straight" "Try to push all packages to their primary remotes.\n\nReturn a list of recipes for packages that were not successfully\npushed. If multiple packages come from the same local repository,\nonly one is pushed.\n\nPREDICATE, if provided, filters the packages that are normalized.\nIt is called with the package name as a string, and should return\nnon-nil if the package should actually be normalized.\n\n(fn &optional PREDICATE)" t)(autoload 'straight-freeze-versions "straight" "Write version lockfiles for currently activated packages.\nThis implies first pushing all packages that have unpushed local\nchanges. If the package management system has been used since the\nlast time the init-file was reloaded, offer to fix the situation\nby reloading the init-file again. If FORCE is\nnon-nil (interactively, if a prefix argument is provided), skip\nall checks and write the lockfile anyway.\n\nCurrently, writing version lockfiles requires cloning all lazily\ninstalled packages. Hopefully, this inconvenient requirement will\nbe removed in the future.\n\nMultiple lockfiles may be written (one for each profile),\naccording to the value of `straight-profiles'.\n\n(fn &optional FORCE)" t)(autoload 'straight-thaw-versions "straight" "Read version lockfiles and restore package versions to those listed." t)(autoload 'straight-bug-report "straight" "Test straight.el in a clean environment.\nARGS may be any of the following keywords and their respective values:\n  - :pre-bootstrap (Form)...\n      Forms evaluated before bootstrapping straight.el\n      e.g. (setq straight-repository-branch \"develop\")\n      Note this example is already in the default bootstrapping code.\n\n  - :post-bootstrap (Form)...\n      Forms evaluated in the testing environment after boostrapping.\n      e.g. (straight-use-package \\='(example :type git :host github))\n\n  - :interactive Boolean\n      If nil, the subprocess will immediately exit after the test.\n      Output will be printed to `straight-bug-report--process-buffer'\n      Otherwise, the subprocess will be interactive.\n\n  - :preserve Boolean\n      If non-nil, the test directory is left in the directory stored in the\n      variable `temporary-file-directory'. Otherwise, it is\n      immediately removed after the test is run.\n\n  - :executable String\n      Indicate the Emacs executable to launch.\n      Defaults to the path of the current Emacs executable.\n\n  - :raw Boolean\n      If non-nil, the raw process output is sent to\n      `straight-bug-report--process-buffer'. Otherwise, it is\n      formatted as markdown for submitting as an issue.\n\n  - :user-dir String\n      If non-nil, the test is run with `user-emacs-directory' set to STRING.\n      Otherwise, a temporary directory is created and used.\n      Unless absolute, paths are expanded relative to the variable\n      `temporary-file-directory'.\n\nARGS are accessible within the :pre/:post-bootsrap phases via the\nlocally bound plist, straight-bug-report-args.\n\n(fn &rest ARGS)" nil t)(function-put 'straight-bug-report 'lisp-indent-function 0)(autoload 'straight-dependencies "straight" "Return a list of PACKAGE's dependencies.\n\n(fn &optional PACKAGE)" t)(autoload 'straight-dependents "straight" "Return a list of PACKAGE's dependents.\n\n(fn &optional PACKAGE)" t)(defvar straight-x-pinned-packages nil "List of pinned packages.")(defvar explain-pause-mode nil "Non-nil if explain-pause mode is enabled.\nSee the `explain-pause-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `explain-pause-mode'.")(autoload 'explain-pause-mode "explain-pause-mode" "Toggle whether to attempt to discover and explain pauses in emacs.\n\nWhen enabled, explain-pause will attempt to time how long blocking activity\ntakes. If it measures blocking work that takes longer then a configurable\namount of time, explain-pause logs contextual information that can be used\nto help diagnose and propose areas of elisp that might affect emacs\ninteractivity.\n\nWhen blocking work takes too long many times, explain-mode profiles the\nblocking work using the builtin Emacs profiler (`profiler' package). A fixed\nnumber of these are saved.\n\nThis mode hooks `call-interactively', both idle and regular timers, and process\nfilters and sentinels.\n\nWhen running interactively, e.g. run from `M-x' or similar, `explain-pause-mode'\nmust install itself after some time while Emacs is not doing anything.\n\nThis is a global minor mode.  If called interactively, toggle the\n`explain-pause mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='explain-pause-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'explain-pause-top "explain-pause-mode" "Show a top-like report of commands recently ran and their runtime. Returns\nthe buffer." t)(autoload 'explain-pause-log-to-socket "explain-pause-mode" "Log the event stream to a UNIX file socket, FILE-SOCKET. If FILE-SOCKET is nil,\nthen the default location `explain-pause-default-log' is used. This file socket\nshould already exist. It might be created by `explain-pause-socket' in another\nEmacs process, in which case `explain-mode-top-from-socket' will receive and\npresent that data. Or you can simply receive the data in any other process that\ncan create UNIX sockets, for example `netcat'.To turn off logging, run\n`explain-pause-log-off'.\n\nThe stream is written as newline delimited elisp readable lines. See\n`explain-pause-log--send-*' family of commands for the format of those objects.\n\nReturns the process that is connected to the socket.\n\n(fn &optional FILE-SOCKET)" t)(defvar gcmh-mode nil "Non-nil if GCMH mode is enabled.\nSee the `gcmh-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `gcmh-mode'.")(autoload 'gcmh-mode "gcmh" "Minor mode to tweak Garbage Collection strategy.\n\nThis is a global minor mode.  If called interactively, toggle the\n`GCMH mode' mode.  If the prefix argument is positive, enable the\nmode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='gcmh-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar auto-minor-mode-alist nil "Alist of filename patterns vs corresponding minor mode functions.\n\nThis is an equivalent of \x2018\ auto-mode-alist\x2019, for minor modes.\n\nUnlike \x2018\ auto-mode-alist\x2019, matching is always case-folded.")(defvar auto-minor-mode-magic-alist nil "Alist of buffer beginnings vs corresponding minor mode functions.\n\nThis is an equivalent of \x2018magic-mode-alist\x2019, for minor modes.\n\nMagic minor modes are applied after \x2018set-auto-mode\x2019 enables any\nmajor mode, so it\x2019s possible to check for expected major modes in\nmatch functions.\n\nUnlike \x2018magic-mode-alist\x2019, matching is always case-folded.")(autoload 'auto-minor-mode-set "auto-minor-mode" "Enable all minor modes appropriate for the current buffer.\n\nIf the optional argument KEEP-MODE-IF-SAME is non-nil, then we\ndon\x2019t re-activate minor modes already enabled in the buffer.\n\n(fn &optional KEEP-MODE-IF-SAME)")(advice-add #'set-auto-mode :after #'auto-minor-mode-set)(autoload 'use-package-autoload-keymap "use-package-bind-key" "Load PACKAGE and bind key sequence invoking this function to KEYMAP-SYMBOL.\nThen simulate pressing the same key sequence a again, so that the\nnext key pressed is routed to the newly loaded keymap.\n\nThis function supports use-package's :bind-keymap keyword.  It\nworks by binding the given key sequence to an invocation of this\nfunction for a particular keymap.  The keymap is expected to be\ndefined by the package.  In this way, loading the package is\ndeferred until the prefix key sequence is pressed.\n\n(fn KEYMAP-SYMBOL PACKAGE OVERRIDE)")(autoload 'use-package-normalize-binder "use-package-bind-key" "\n\n(fn NAME KEYWORD ARGS)")(defalias 'use-package-normalize/:bind 'use-package-normalize-binder)(defalias 'use-package-normalize/:bind* 'use-package-normalize-binder)(defalias 'use-package-autoloads/:bind 'use-package-autoloads-mode)(defalias 'use-package-autoloads/:bind* 'use-package-autoloads-mode)(autoload 'use-package-handler/:bind "use-package-bind-key" "\n\n(fn NAME KEYWORD ARGS REST STATE &optional BIND-MACRO)")(defalias 'use-package-normalize/:bind-keymap 'use-package-normalize-binder)(defalias 'use-package-normalize/:bind-keymap* 'use-package-normalize-binder)(autoload 'use-package-handler/:bind-keymap "use-package-bind-key" "\n\n(fn NAME KEYWORD ARGS REST STATE &optional OVERRIDE)")(autoload 'use-package-handler/:bind-keymap* "use-package-bind-key" "\n\n(fn NAME KEYWORD ARG REST STATE)")(autoload 'use-package "use-package-core" "Declare an Emacs package by specifying a group of configuration options.\n\nFor the full documentation, see Info node `(use-package) top'.\nUsage:\n\n  (use-package package-name\n     [:keyword [option]]...)\n\n:init            Code to run before PACKAGE-NAME has been loaded.\n:config          Code to run after PACKAGE-NAME has been loaded.  Note that\n                 if loading is deferred for any reason, this code does not\n                 execute until the lazy load has occurred.\n:preface         Code to be run before everything except `:disabled'; this\n                 can be used to define functions for use in `:if', or that\n                 should be seen by the byte-compiler.\n\n:mode            Form to be added to `auto-mode-alist'.\n:magic           Form to be added to `magic-mode-alist'.\n:magic-fallback  Form to be added to `magic-fallback-mode-alist'.\n:interpreter     Form to be added to `interpreter-mode-alist'.\n\n:commands        Define autoloads for commands that will be defined by the\n                 package.  This is useful if the package is being lazily\n                 loaded, and you wish to conditionally call functions in your\n                 `:init' block that are defined in the package.\n:autoload        Similar to :commands, but it for no-interactive one.\n:hook            Specify hook(s) to attach this package to.\n\n:bind            Bind keys, and define autoloads for the bound commands.\n:bind*           Bind keys, and define autoloads for the bound commands,\n                 *overriding all minor mode bindings*.\n:bind-keymap     Bind a key prefix to an auto-loaded keymap defined in the\n                 package.  This is like `:bind', but for keymaps.\n:bind-keymap*    Like `:bind-keymap', but overrides all minor mode bindings\n\n:defer           Defer loading of a package -- this is implied when using\n                 `:commands', `:bind', `:bind*', `:mode', `:magic', `:hook',\n                 `:magic-fallback', or `:interpreter'.  This can be an integer,\n                 to force loading after N seconds of idle time, if the package\n                 has not already been loaded.\n:demand          Prevent the automatic deferred loading introduced by constructs\n                 such as `:bind' (see `:defer' for the complete list).\n\n:after           Delay the effect of the use-package declaration\n                 until after the named libraries have loaded.\n                 Before they have been loaded, no other keyword\n                 has any effect at all, and once they have been\n                 loaded it is as if `:after' was not specified.\n\n:if EXPR         Initialize and load only if EXPR evaluates to a non-nil value.\n:disabled        The package is ignored completely if this keyword is present.\n:defines         Declare certain variables to silence the byte-compiler.\n:functions       Declare certain functions to silence the byte-compiler.\n:load-path       Add to the `load-path' before attempting to load the package.\n:diminish        Support for diminish.el (if installed).\n:delight         Support for delight.el (if installed).\n:custom          Call `Custom-set' or `set-default' with each variable\n                 definition without modifying the Emacs `custom-file'.\n                 (compare with `custom-set-variables').\n:custom-face     Call `custom-set-faces' with each face definition.\n:ensure          Loads the package using package.el if necessary.\n:pin             Pin the package to an archive.\n\n(fn NAME &rest ARGS)" nil t)(function-put 'use-package 'lisp-indent-function 'defun)(autoload 'use-package-normalize/:delight "use-package-delight" "Normalize arguments to delight.\n\n(fn NAME KEYWORD ARGS)")(autoload 'use-package-handler/:delight "use-package-delight" "\n\n(fn NAME KEYWORD ARGS REST STATE)")(autoload 'use-package-normalize/:diminish "use-package-diminish" "\n\n(fn NAME KEYWORD ARGS)")(autoload 'use-package-handler/:diminish "use-package-diminish" "\n\n(fn NAME KEYWORD ARG REST STATE)")(autoload 'use-package-normalize/:ensure "use-package-ensure" "\n\n(fn NAME KEYWORD ARGS)")(autoload 'use-package-handler/:ensure "use-package-ensure" "\n\n(fn NAME KEYWORD ENSURE REST STATE)")(autoload 'use-package-jump-to-package-form "use-package-jump" "Attempt to find and jump to the `use-package' form that loaded PACKAGE.\nThis will only find the form if that form actually required\nPACKAGE.  If PACKAGE was previously required then this function\nwill jump to the file that originally required PACKAGE instead.\n\n(fn PACKAGE)" t)(autoload 'use-package-lint "use-package-lint" "Check for errors in `use-package' declarations.\nFor example, if the module's `:if' condition is met, but even\nwith the specified `:load-path' the module cannot be found." t)(autoload 'bind-key "bind-key" "Bind KEY-NAME to COMMAND in KEYMAP (`global-map' if not passed).\n\nKEY-NAME may be a vector, in which case it is passed straight to\n`define-key'.  Or it may be a string to be interpreted as\nspelled-out keystrokes, e.g., \"C-c C-z\".  See the documentation\nof `edmacro-mode' for details.\n\nCOMMAND must be an interactive function, lambda form, or a cons\n`(STRING . DEFN)'.\n\nKEYMAP, if present, should be a keymap variable or symbol.\nFor example:\n\n  (bind-key \"M-h\" #\\='some-interactive-function my-mode-map)\n\n  (bind-key \"M-h\" #\\='some-interactive-function \\='my-mode-map)\n\nIf PREDICATE is non-nil, it is a form evaluated to determine when\na key should be bound. It must return non-nil in such cases.\nEmacs can evaluate this form at any time that it does redisplay\nor operates on menu data structures, so you should write it so it\ncan safely be called at any time.\n\n(fn KEY-NAME COMMAND &optional KEYMAP PREDICATE)" nil t)(autoload 'unbind-key "bind-key" "Unbind the given KEY-NAME, within the KEYMAP (if specified).\nSee `bind-key' for more details.\n\n(fn KEY-NAME &optional KEYMAP)" nil t)(autoload 'bind-key* "bind-key" "Similar to `bind-key', but overrides any mode-specific bindings.\n\n(fn KEY-NAME COMMAND &optional PREDICATE)" nil t)(autoload 'bind-keys "bind-key" "Bind multiple keys at once.\n\nAccepts keyword arguments:\n:map MAP               - a keymap into which the keybindings should be\n                         added\n:prefix KEY            - prefix key for these bindings\n:prefix-map MAP        - name of the prefix map that should be created\n                         for these bindings\n:prefix-docstring STR  - docstring for the prefix-map variable\n:menu-name NAME        - optional menu string for prefix map\n:repeat-docstring STR  - docstring for the repeat-map variable\n:repeat-map MAP        - name of the repeat map that should be created\n                         for these bindings. If specified, the\n                         `repeat-map' property of each command bound\n                         (within the scope of the `:repeat-map' keyword)\n                         is set to this map.\n:exit BINDINGS         - Within the scope of `:repeat-map' will bind the\n                         key in the repeat map, but will not set the\n                         `repeat-map' property of the bound command.\n:continue BINDINGS     - Within the scope of `:repeat-map' forces the\n                         same behaviour as if no special keyword had\n                         been used (that is, the command is bound, and\n                         it's `repeat-map' property set)\n:filter FORM           - optional form to determine when bindings apply\n\nThe rest of the arguments are conses of keybinding string and a\nfunction symbol (unquoted).\n\n(fn &rest ARGS)" nil t)(autoload 'bind-keys* "bind-key" "Bind multiple keys at once, in `override-global-map'.\nAccepts the same keyword arguments as `bind-keys' (which see).\n\nThis binds keys in such a way that bindings are not overridden by\nother modes.  See `override-global-mode'.\n\n(fn &rest ARGS)" nil t)(autoload 'describe-personal-keybindings "bind-key" "Display all the personal keybindings defined by `bind-key'." t)(autoload 'org-pdftools-open "org-pdftools" "Function to open org-pdftools LINK.\n\n(fn LINK)")(autoload 'org-pdftools-store-link "org-pdftools" "Store a link to a pdfview/pdfoccur buffer.")(autoload 'org-pdftools-export "org-pdftools" "Export the pdfview LINK with DESCRIPTION for FORMAT from Org files.\n\n(fn LINK DESCRIPTION FORMAT)")(autoload 'org-pdftools-setup-link "org-pdftools" "Set up pdf: links in org-mode.\n\n(fn &optional PREFIX)")(autoload 'org-pdftools-complete-link "org-pdftools" "Use the existing file name completion for file.\nLinks to get the file name, then ask the user for the page number\nand append it. ARG is passed to `org-link-complete-file'.\n\n(fn &optional ARG)")(autoload 'pdf-annot-minor-mode "pdf-annot" "Support for PDF Annotations.\n\n\\{pdf-annot-minor-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Annot minor mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-annot-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-history-minor-mode "pdf-history" "Keep a history of previously visited pages.\n\nThis is a simple stack-based history.  Turning the page or\nfollowing a link pushes the left-behind page on the stack, which\nmay be navigated with the following keys.\n\n\\{pdf-history-minor-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-History minor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-history-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-isearch-minor-mode "pdf-isearch" "Isearch mode for PDF buffer.\n\nWhen this mode is enabled \\[isearch-forward], among other keys,\nstarts an incremental search in this PDF document.  Since this mode\nuses external programs to highlight found matches via\nimage-processing, proceeding to the next match may be slow.\n\nTherefore two isearch behaviours have been defined: Normal isearch and\nbatch mode.  The later one is a minor mode\n(`pdf-isearch-batch-mode'), which when activated inhibits isearch\nfrom stopping at and highlighting every single match, but rather\ndisplay them batch-wise.  Here a batch means a number of matches\ncurrently visible in the selected window.\n\nThe kind of highlighting is determined by three faces\n`pdf-isearch-match' (for the current match), `pdf-isearch-lazy'\n(for all other matches) and `pdf-isearch-batch' (when in batch\nmode), which see.\n\nColors may also be influenced by the minor-mode\n`pdf-view-dark-minor-mode'.  If this is minor mode enabled, each face's\ndark colors, are used (see e.g. `frame-background-mode'), instead\nof the light ones.\n\n\\{pdf-isearch-minor-mode-map}\nWhile in `isearch-mode' the following keys are available. Note\nthat not every isearch command work as expected.\n\n\\{pdf-isearch-active-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Isearch minor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-isearch-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-links-minor-mode "pdf-links" "Handle links in PDF documents.\\<pdf-links-minor-mode-map>\n\nIf this mode is enabled, most links in the document may be\nactivated by clicking on them or by pressing \\[pdf-links-action-perform] and selecting\none of the displayed keys, or by using isearch limited to\nlinks via \\[pdf-links-isearch-link].\n\n\\{pdf-links-minor-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Links minor mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-links-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-links-action-perform "pdf-links" "Follow LINK, depending on its type.\n\nThis may turn to another page, switch to another PDF buffer or\ninvoke `pdf-links-browse-uri-function'.\n\nInteractively, link is read via `pdf-links-read-link-action'.\nThis function displays characters around the links in the current\npage and starts reading characters (ignoring case).  After a\nsufficient number of characters have been read, the corresponding\nlink's link is invoked.  Additionally, SPC may be used to\nscroll the current page.\n\n(fn LINK)" t)(autoload 'pdf-loader-install "pdf-loader" "Prepare Emacs for using PDF Tools.\n\nThis function acts as a replacement for `pdf-tools-install' and\nmakes Emacs load and use PDF Tools as soon as a PDF file is\nopened, but not sooner.\n\nThe arguments are passed verbatim to `pdf-tools-install', which\nsee.\n\n(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)")(autoload 'pdf-misc-minor-mode "pdf-misc" "FIXME:  Not documented.\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Misc minor mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-misc-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-misc-size-indication-minor-mode "pdf-misc" "Provide a working size indication in the mode-line.\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Misc-Size-Indication minor mode' mode.  If the prefix\nargument is positive, enable the mode, and if it is zero or\nnegative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-misc-size-indication-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-misc-menu-bar-minor-mode "pdf-misc" "Display a PDF Tools menu in the menu-bar.\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Misc-Menu-Bar minor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-misc-menu-bar-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-misc-context-menu-minor-mode "pdf-misc" "Provide a right-click context menu in PDF buffers.\n\n\\{pdf-misc-context-menu-minor-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Misc-Context-Menu minor mode' mode.  If the prefix argument\nis positive, enable the mode, and if it is zero or negative,\ndisable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-misc-context-menu-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-occur "pdf-occur" "List lines matching STRING or PCRE.\n\nInteractively search for a regexp. Unless a prefix arg was given,\nin which case this functions performs a string search.\n\nIf `pdf-occur-prefer-string-search' is non-nil, the meaning of\nthe prefix-arg is inverted.\n\n(fn STRING &optional REGEXP-P)" t)(autoload 'pdf-occur-multi-command "pdf-occur" "Perform `pdf-occur' on multiple buffer.\n\nFor a programmatic search of multiple documents see\n`pdf-occur-search'." t)(defvar pdf-occur-global-minor-mode nil "Non-nil if Pdf-Occur-Global minor mode is enabled.\nSee the `pdf-occur-global-minor-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `pdf-occur-global-minor-mode'.")(autoload 'pdf-occur-global-minor-mode "pdf-occur" "Enable integration of Pdf Occur with other modes.\n\nThis global minor mode enables (or disables)\n`pdf-occur-ibuffer-minor-mode' and `pdf-occur-dired-minor-mode'\nin all current and future ibuffer/dired buffer.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Pdf-Occur-Global minor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='pdf-occur-global-minor-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-occur-ibuffer-minor-mode "pdf-occur" "Hack into ibuffer's do-occur binding.\n\nThis mode remaps `ibuffer-do-occur' to\n`pdf-occur-ibuffer-do-occur', which will start the PDF Tools\nversion of `occur', if all marked buffer's are in `pdf-view-mode'\nand otherwise fallback to `ibuffer-do-occur'.\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Occur-Ibuffer minor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-occur-ibuffer-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-occur-dired-minor-mode "pdf-occur" "Hack into dired's `dired-do-search' binding.\n\nThis mode remaps `dired-do-search' to\n`pdf-occur-dired-do-search', which will start the PDF Tools\nversion of `occur', if all marked buffer's are in `pdf-view-mode'\nand otherwise fallback to `dired-do-search'.\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Occur-Dired minor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-occur-dired-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-outline-minor-mode "pdf-outline" "Display an outline of a PDF document.\n\nThis provides a PDF's outline on the menu bar via imenu.\nAdditionally the same outline may be viewed in a designated\nbuffer.\n\n\\{pdf-outline-minor-mode-map}\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Outline minor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-outline-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-outline "pdf-outline" "Display an PDF outline of BUFFER.\n\nBUFFER defaults to the current buffer.  Select the outline\nbuffer, unless NO-SELECT-WINDOW-P is non-nil.\n\n(fn &optional BUFFER NO-SELECT-WINDOW-P)" t)(autoload 'pdf-outline-imenu-enable "pdf-outline" "Enable imenu in the current PDF buffer." t)(autoload 'pdf-sync-minor-mode "pdf-sync" "Correlate a PDF position with the TeX file.\n\n\\<pdf-sync-minor-mode-map>\nThis works via SyncTeX, which means the TeX sources need to have\nbeen compiled with `--synctex=1'.  In AUCTeX this can be done by\nsetting `TeX-source-correlate-method' to `synctex' (before AUCTeX\nis loaded) and enabling `TeX-source-correlate-mode'.\n\nThen \\[pdf-sync-backward-search-mouse] in the PDF buffer will\nopen the corresponding TeX location.\n\nIf AUCTeX is your preferred tex-mode, this library arranges to\nbind `pdf-sync-forward-display-pdf-key' (the default is `C-c C-g')\nto `pdf-sync-forward-search' in `TeX-source-correlate-map'.  This\nfunction displays the PDF page corresponding to the current\nposition in the TeX buffer.  This function only works together\nwith AUCTeX.\n\nThis is a minor mode.  If called interactively, toggle the\n`Pdf-Sync minor mode' mode.  If the prefix argument is positive,\nenable the mode, and if it is zero or negative, disable the mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `pdf-sync-minor-mode'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(defvar pdf-tools-handle-upgrades t "Whether PDF Tools should handle upgrading itself.")(autoload 'pdf-tools-install "pdf-tools" "Install PDF-Tools in all current and future PDF buffers.\n\nIf the `pdf-info-epdfinfo-program' is not running or does not\nappear to be working, attempt to rebuild it.  If this build\nsucceeded, continue with the activation of the package.\nOtherwise fail silently, i.e. no error is signaled.\n\nBuild the program (if necessary) without asking first, if\nNO-QUERY-P is non-nil.\n\nDon't attempt to install system packages, if SKIP-DEPENDENCIES-P\nis non-nil.\n\nDo not signal an error in case the build failed, if NO-ERROR-P is\nnon-nil.\n\nAttempt to install system packages (even if it is deemed\nunnecessary), if FORCE-DEPENDENCIES-P is non-nil.\n\nNote that SKIP-DEPENDENCIES-P and FORCE-DEPENDENCIES-P are\nmutually exclusive.\n\nNote further, that you can influence the installation directory\nby setting `pdf-info-epdfinfo-program' to an appropriate\nvalue (e.g. ~/bin/epdfinfo) before calling this function.\n\nSee `pdf-view-mode' and `pdf-tools-enabled-modes'.\n\n(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" t)(autoload 'pdf-tools-enable-minor-modes "pdf-tools" "Enable MODES in the current buffer.\n\nMODES defaults to `pdf-tools-enabled-modes'.\n\n(fn &optional MODES)" t)(autoload 'pdf-tools-help "pdf-tools" "Show a Help buffer for `pdf-tools'." t)(autoload 'pdf-view-bookmark-jump-handler "pdf-view" "The bookmark handler-function interface for bookmark BMK.\n\nSee also `pdf-view-bookmark-make-record'.\n\n(fn BMK)")(autoload 'pdf-virtual-edit-mode "pdf-virtual" "Major mode when editing a virtual PDF buffer.\n\n(fn)" t)(autoload 'pdf-virtual-view-mode "pdf-virtual" "Major mode in virtual PDF buffers.\n\n(fn)" t)(defvar pdf-virtual-global-minor-mode nil "Non-nil if Pdf-Virtual-Global minor mode is enabled.\nSee the `pdf-virtual-global-minor-mode' command\nfor a description of this minor mode.\nSetting this variable directly does not take effect;\neither customize it (see the info node `Easy Customization')\nor call the function `pdf-virtual-global-minor-mode'.")(autoload 'pdf-virtual-global-minor-mode "pdf-virtual" "Enable recognition and handling of VPDF files.\n\nThis is a global minor mode.  If called interactively, toggle the\n`Pdf-Virtual-Global minor mode' mode.  If the prefix argument is\npositive, enable the mode, and if it is zero or negative, disable\nthe mode.\n\nIf called from Lisp, toggle the mode if ARG is `toggle'.  Enable\nthe mode if ARG is nil, omitted, or is a positive number.\nDisable the mode if ARG is a negative number.\n\nTo check whether the minor mode is enabled in the current buffer,\nevaluate `(default-value \\='pdf-virtual-global-minor-mode)'.\n\nThe mode's hook is called both when the mode is enabled and when\nit is disabled.\n\n(fn &optional ARG)" t)(autoload 'pdf-virtual-buffer-create "pdf-virtual" "\n\n(fn &optional FILENAMES BUFFER-NAME DISPLAY-P)" t)(autoload 'org-noter "org-noter" "Start `org-noter' session.\n\nThere are two modes of operation.  You may create the session from:\n- The Org notes file\n- The document to be annotated (PDF, EPUB, ...)\n\n- Creating the session from notes file\n--------------------------------------\nThis will open a session for taking your notes, with indirect\nbuffers to the document and the notes side by side.  Your current\nwindow configuration won't be changed, because this opens in a\nnew frame.\n\nYou only need to run this command inside a heading (which will\nhold the notes for this document).  If no document path property is found,\nthis command will ask you for the target file.\n\nWith a prefix universal argument ARG, only check for the property\nin the current heading, don't inherit from parents.\n\nWith 2 prefix universal arguments ARG, ask for a new document,\neven if the current heading annotates one.\n\nWith a prefix number ARG:\n- Greater than 0: Open the document like `find-file'\n-     Equal to 0: Create session with `org-noter-always-create-frame' toggled\n-    Less than 0: Open the folder containing the document\n\n- Creating the session from the document\n----------------------------------------\nThis will try to find a notes file in any of the parent folders.\nThe names it will search for are defined in\n`org-noter-default-notes-file-names'.  It will also try to find a\nnotes file with the same name as the document, giving it the\nmaximum priority.\n\nWhen it doesn't find anything, it will interactively ask you what\nyou want it to do.  The target notes file must be in a parent\nfolder (direct or otherwise) of the document.\n\nYou may pass a prefix ARG in order to make it let you choose the\nnotes file, even if it finds one.\n\n(fn &optional ARG)" t)(autoload 'org-noter-start-from-dired "org-noter" "In Dired, open sessions for marked files or file at point.\n\nIf there are multiple marked files, focus will be on the last\nmarked file." t)